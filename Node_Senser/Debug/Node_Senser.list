
Node_Senser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08007d64  08007d64  00017d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008074  08008074  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008074  08008074  00018074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800807c  0800807c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800807c  0800807c  0001807c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008080  08008080  00018080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000070  080080f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  080080f4  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016399  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003376  00000000  00000000  00036431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  000397a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  0003a820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018178  00000000  00000000  0003b780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000164d8  00000000  00000000  000538f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089435  00000000  00000000  00069dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3205  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004754  00000000  00000000  000f3258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007d4c 	.word	0x08007d4c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08007d4c 	.word	0x08007d4c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cfrcmple>:
 8000244:	4684      	mov	ip, r0
 8000246:	1c08      	adds	r0, r1, #0
 8000248:	4661      	mov	r1, ip
 800024a:	e7ff      	b.n	800024c <__aeabi_cfcmpeq>

0800024c <__aeabi_cfcmpeq>:
 800024c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800024e:	f000 f9d3 	bl	80005f8 <__lesf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	d401      	bmi.n	800025a <__aeabi_cfcmpeq+0xe>
 8000256:	2100      	movs	r1, #0
 8000258:	42c8      	cmn	r0, r1
 800025a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800025c <__aeabi_fcmpeq>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f000 f957 	bl	8000510 <__eqsf2>
 8000262:	4240      	negs	r0, r0
 8000264:	3001      	adds	r0, #1
 8000266:	bd10      	pop	{r4, pc}

08000268 <__aeabi_fcmplt>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 f9c5 	bl	80005f8 <__lesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	db01      	blt.n	8000276 <__aeabi_fcmplt+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			; (mov r8, r8)

0800027c <__aeabi_fcmple>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 f9bb 	bl	80005f8 <__lesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	dd01      	ble.n	800028a <__aeabi_fcmple+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <__aeabi_fcmpgt>:
 8000290:	b510      	push	{r4, lr}
 8000292:	f000 f965 	bl	8000560 <__gesf2>
 8000296:	2800      	cmp	r0, #0
 8000298:	dc01      	bgt.n	800029e <__aeabi_fcmpgt+0xe>
 800029a:	2000      	movs	r0, #0
 800029c:	bd10      	pop	{r4, pc}
 800029e:	2001      	movs	r0, #1
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)

080002a4 <__aeabi_fcmpge>:
 80002a4:	b510      	push	{r4, lr}
 80002a6:	f000 f95b 	bl	8000560 <__gesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	da01      	bge.n	80002b2 <__aeabi_fcmpge+0xe>
 80002ae:	2000      	movs	r0, #0
 80002b0:	bd10      	pop	{r4, pc}
 80002b2:	2001      	movs	r0, #1
 80002b4:	bd10      	pop	{r4, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)

080002b8 <__aeabi_uldivmod>:
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d111      	bne.n	80002e0 <__aeabi_uldivmod+0x28>
 80002bc:	2a00      	cmp	r2, #0
 80002be:	d10f      	bne.n	80002e0 <__aeabi_uldivmod+0x28>
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d100      	bne.n	80002c6 <__aeabi_uldivmod+0xe>
 80002c4:	2800      	cmp	r0, #0
 80002c6:	d002      	beq.n	80002ce <__aeabi_uldivmod+0x16>
 80002c8:	2100      	movs	r1, #0
 80002ca:	43c9      	mvns	r1, r1
 80002cc:	1c08      	adds	r0, r1, #0
 80002ce:	b407      	push	{r0, r1, r2}
 80002d0:	4802      	ldr	r0, [pc, #8]	; (80002dc <__aeabi_uldivmod+0x24>)
 80002d2:	a102      	add	r1, pc, #8	; (adr r1, 80002dc <__aeabi_uldivmod+0x24>)
 80002d4:	1840      	adds	r0, r0, r1
 80002d6:	9002      	str	r0, [sp, #8]
 80002d8:	bd03      	pop	{r0, r1, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	ffffff65 	.word	0xffffff65
 80002e0:	b403      	push	{r0, r1}
 80002e2:	4668      	mov	r0, sp
 80002e4:	b501      	push	{r0, lr}
 80002e6:	9802      	ldr	r0, [sp, #8]
 80002e8:	f000 f846 	bl	8000378 <__udivmoddi4>
 80002ec:	9b01      	ldr	r3, [sp, #4]
 80002ee:	469e      	mov	lr, r3
 80002f0:	b002      	add	sp, #8
 80002f2:	bc0c      	pop	{r2, r3}
 80002f4:	4770      	bx	lr
 80002f6:	46c0      	nop			; (mov r8, r8)

080002f8 <__aeabi_lmul>:
 80002f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fa:	0415      	lsls	r5, r2, #16
 80002fc:	0c2d      	lsrs	r5, r5, #16
 80002fe:	000f      	movs	r7, r1
 8000300:	0001      	movs	r1, r0
 8000302:	002e      	movs	r6, r5
 8000304:	46c6      	mov	lr, r8
 8000306:	4684      	mov	ip, r0
 8000308:	0400      	lsls	r0, r0, #16
 800030a:	0c14      	lsrs	r4, r2, #16
 800030c:	0c00      	lsrs	r0, r0, #16
 800030e:	0c09      	lsrs	r1, r1, #16
 8000310:	4346      	muls	r6, r0
 8000312:	434d      	muls	r5, r1
 8000314:	4360      	muls	r0, r4
 8000316:	4361      	muls	r1, r4
 8000318:	1940      	adds	r0, r0, r5
 800031a:	0c34      	lsrs	r4, r6, #16
 800031c:	1824      	adds	r4, r4, r0
 800031e:	b500      	push	{lr}
 8000320:	42a5      	cmp	r5, r4
 8000322:	d903      	bls.n	800032c <__aeabi_lmul+0x34>
 8000324:	2080      	movs	r0, #128	; 0x80
 8000326:	0240      	lsls	r0, r0, #9
 8000328:	4680      	mov	r8, r0
 800032a:	4441      	add	r1, r8
 800032c:	0c25      	lsrs	r5, r4, #16
 800032e:	186d      	adds	r5, r5, r1
 8000330:	4661      	mov	r1, ip
 8000332:	4359      	muls	r1, r3
 8000334:	437a      	muls	r2, r7
 8000336:	0430      	lsls	r0, r6, #16
 8000338:	1949      	adds	r1, r1, r5
 800033a:	0424      	lsls	r4, r4, #16
 800033c:	0c00      	lsrs	r0, r0, #16
 800033e:	1820      	adds	r0, r4, r0
 8000340:	1889      	adds	r1, r1, r2
 8000342:	bc80      	pop	{r7}
 8000344:	46b8      	mov	r8, r7
 8000346:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000348 <__aeabi_f2uiz>:
 8000348:	219e      	movs	r1, #158	; 0x9e
 800034a:	b510      	push	{r4, lr}
 800034c:	05c9      	lsls	r1, r1, #23
 800034e:	1c04      	adds	r4, r0, #0
 8000350:	f7ff ffa8 	bl	80002a4 <__aeabi_fcmpge>
 8000354:	2800      	cmp	r0, #0
 8000356:	d103      	bne.n	8000360 <__aeabi_f2uiz+0x18>
 8000358:	1c20      	adds	r0, r4, #0
 800035a:	f000 fb5f 	bl	8000a1c <__aeabi_f2iz>
 800035e:	bd10      	pop	{r4, pc}
 8000360:	219e      	movs	r1, #158	; 0x9e
 8000362:	1c20      	adds	r0, r4, #0
 8000364:	05c9      	lsls	r1, r1, #23
 8000366:	f000 f991 	bl	800068c <__aeabi_fsub>
 800036a:	f000 fb57 	bl	8000a1c <__aeabi_f2iz>
 800036e:	2380      	movs	r3, #128	; 0x80
 8000370:	061b      	lsls	r3, r3, #24
 8000372:	469c      	mov	ip, r3
 8000374:	4460      	add	r0, ip
 8000376:	e7f2      	b.n	800035e <__aeabi_f2uiz+0x16>

08000378 <__udivmoddi4>:
 8000378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800037a:	4657      	mov	r7, sl
 800037c:	464e      	mov	r6, r9
 800037e:	4645      	mov	r5, r8
 8000380:	46de      	mov	lr, fp
 8000382:	b5e0      	push	{r5, r6, r7, lr}
 8000384:	0004      	movs	r4, r0
 8000386:	000d      	movs	r5, r1
 8000388:	4692      	mov	sl, r2
 800038a:	4699      	mov	r9, r3
 800038c:	b083      	sub	sp, #12
 800038e:	428b      	cmp	r3, r1
 8000390:	d830      	bhi.n	80003f4 <__udivmoddi4+0x7c>
 8000392:	d02d      	beq.n	80003f0 <__udivmoddi4+0x78>
 8000394:	4649      	mov	r1, r9
 8000396:	4650      	mov	r0, sl
 8000398:	f000 fb7e 	bl	8000a98 <__clzdi2>
 800039c:	0029      	movs	r1, r5
 800039e:	0006      	movs	r6, r0
 80003a0:	0020      	movs	r0, r4
 80003a2:	f000 fb79 	bl	8000a98 <__clzdi2>
 80003a6:	1a33      	subs	r3, r6, r0
 80003a8:	4698      	mov	r8, r3
 80003aa:	3b20      	subs	r3, #32
 80003ac:	469b      	mov	fp, r3
 80003ae:	d433      	bmi.n	8000418 <__udivmoddi4+0xa0>
 80003b0:	465a      	mov	r2, fp
 80003b2:	4653      	mov	r3, sl
 80003b4:	4093      	lsls	r3, r2
 80003b6:	4642      	mov	r2, r8
 80003b8:	001f      	movs	r7, r3
 80003ba:	4653      	mov	r3, sl
 80003bc:	4093      	lsls	r3, r2
 80003be:	001e      	movs	r6, r3
 80003c0:	42af      	cmp	r7, r5
 80003c2:	d83a      	bhi.n	800043a <__udivmoddi4+0xc2>
 80003c4:	42af      	cmp	r7, r5
 80003c6:	d100      	bne.n	80003ca <__udivmoddi4+0x52>
 80003c8:	e078      	b.n	80004bc <__udivmoddi4+0x144>
 80003ca:	465b      	mov	r3, fp
 80003cc:	1ba4      	subs	r4, r4, r6
 80003ce:	41bd      	sbcs	r5, r7
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	da00      	bge.n	80003d6 <__udivmoddi4+0x5e>
 80003d4:	e075      	b.n	80004c2 <__udivmoddi4+0x14a>
 80003d6:	2200      	movs	r2, #0
 80003d8:	2300      	movs	r3, #0
 80003da:	9200      	str	r2, [sp, #0]
 80003dc:	9301      	str	r3, [sp, #4]
 80003de:	2301      	movs	r3, #1
 80003e0:	465a      	mov	r2, fp
 80003e2:	4093      	lsls	r3, r2
 80003e4:	9301      	str	r3, [sp, #4]
 80003e6:	2301      	movs	r3, #1
 80003e8:	4642      	mov	r2, r8
 80003ea:	4093      	lsls	r3, r2
 80003ec:	9300      	str	r3, [sp, #0]
 80003ee:	e028      	b.n	8000442 <__udivmoddi4+0xca>
 80003f0:	4282      	cmp	r2, r0
 80003f2:	d9cf      	bls.n	8000394 <__udivmoddi4+0x1c>
 80003f4:	2200      	movs	r2, #0
 80003f6:	2300      	movs	r3, #0
 80003f8:	9200      	str	r2, [sp, #0]
 80003fa:	9301      	str	r3, [sp, #4]
 80003fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <__udivmoddi4+0x8e>
 8000402:	601c      	str	r4, [r3, #0]
 8000404:	605d      	str	r5, [r3, #4]
 8000406:	9800      	ldr	r0, [sp, #0]
 8000408:	9901      	ldr	r1, [sp, #4]
 800040a:	b003      	add	sp, #12
 800040c:	bcf0      	pop	{r4, r5, r6, r7}
 800040e:	46bb      	mov	fp, r7
 8000410:	46b2      	mov	sl, r6
 8000412:	46a9      	mov	r9, r5
 8000414:	46a0      	mov	r8, r4
 8000416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	1a9b      	subs	r3, r3, r2
 800041e:	4652      	mov	r2, sl
 8000420:	40da      	lsrs	r2, r3
 8000422:	4641      	mov	r1, r8
 8000424:	0013      	movs	r3, r2
 8000426:	464a      	mov	r2, r9
 8000428:	408a      	lsls	r2, r1
 800042a:	0017      	movs	r7, r2
 800042c:	4642      	mov	r2, r8
 800042e:	431f      	orrs	r7, r3
 8000430:	4653      	mov	r3, sl
 8000432:	4093      	lsls	r3, r2
 8000434:	001e      	movs	r6, r3
 8000436:	42af      	cmp	r7, r5
 8000438:	d9c4      	bls.n	80003c4 <__udivmoddi4+0x4c>
 800043a:	2200      	movs	r2, #0
 800043c:	2300      	movs	r3, #0
 800043e:	9200      	str	r2, [sp, #0]
 8000440:	9301      	str	r3, [sp, #4]
 8000442:	4643      	mov	r3, r8
 8000444:	2b00      	cmp	r3, #0
 8000446:	d0d9      	beq.n	80003fc <__udivmoddi4+0x84>
 8000448:	07fb      	lsls	r3, r7, #31
 800044a:	0872      	lsrs	r2, r6, #1
 800044c:	431a      	orrs	r2, r3
 800044e:	4646      	mov	r6, r8
 8000450:	087b      	lsrs	r3, r7, #1
 8000452:	e00e      	b.n	8000472 <__udivmoddi4+0xfa>
 8000454:	42ab      	cmp	r3, r5
 8000456:	d101      	bne.n	800045c <__udivmoddi4+0xe4>
 8000458:	42a2      	cmp	r2, r4
 800045a:	d80c      	bhi.n	8000476 <__udivmoddi4+0xfe>
 800045c:	1aa4      	subs	r4, r4, r2
 800045e:	419d      	sbcs	r5, r3
 8000460:	2001      	movs	r0, #1
 8000462:	1924      	adds	r4, r4, r4
 8000464:	416d      	adcs	r5, r5
 8000466:	2100      	movs	r1, #0
 8000468:	3e01      	subs	r6, #1
 800046a:	1824      	adds	r4, r4, r0
 800046c:	414d      	adcs	r5, r1
 800046e:	2e00      	cmp	r6, #0
 8000470:	d006      	beq.n	8000480 <__udivmoddi4+0x108>
 8000472:	42ab      	cmp	r3, r5
 8000474:	d9ee      	bls.n	8000454 <__udivmoddi4+0xdc>
 8000476:	3e01      	subs	r6, #1
 8000478:	1924      	adds	r4, r4, r4
 800047a:	416d      	adcs	r5, r5
 800047c:	2e00      	cmp	r6, #0
 800047e:	d1f8      	bne.n	8000472 <__udivmoddi4+0xfa>
 8000480:	9800      	ldr	r0, [sp, #0]
 8000482:	9901      	ldr	r1, [sp, #4]
 8000484:	465b      	mov	r3, fp
 8000486:	1900      	adds	r0, r0, r4
 8000488:	4169      	adcs	r1, r5
 800048a:	2b00      	cmp	r3, #0
 800048c:	db24      	blt.n	80004d8 <__udivmoddi4+0x160>
 800048e:	002b      	movs	r3, r5
 8000490:	465a      	mov	r2, fp
 8000492:	4644      	mov	r4, r8
 8000494:	40d3      	lsrs	r3, r2
 8000496:	002a      	movs	r2, r5
 8000498:	40e2      	lsrs	r2, r4
 800049a:	001c      	movs	r4, r3
 800049c:	465b      	mov	r3, fp
 800049e:	0015      	movs	r5, r2
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	db2a      	blt.n	80004fa <__udivmoddi4+0x182>
 80004a4:	0026      	movs	r6, r4
 80004a6:	409e      	lsls	r6, r3
 80004a8:	0033      	movs	r3, r6
 80004aa:	0026      	movs	r6, r4
 80004ac:	4647      	mov	r7, r8
 80004ae:	40be      	lsls	r6, r7
 80004b0:	0032      	movs	r2, r6
 80004b2:	1a80      	subs	r0, r0, r2
 80004b4:	4199      	sbcs	r1, r3
 80004b6:	9000      	str	r0, [sp, #0]
 80004b8:	9101      	str	r1, [sp, #4]
 80004ba:	e79f      	b.n	80003fc <__udivmoddi4+0x84>
 80004bc:	42a3      	cmp	r3, r4
 80004be:	d8bc      	bhi.n	800043a <__udivmoddi4+0xc2>
 80004c0:	e783      	b.n	80003ca <__udivmoddi4+0x52>
 80004c2:	4642      	mov	r2, r8
 80004c4:	2320      	movs	r3, #32
 80004c6:	2100      	movs	r1, #0
 80004c8:	1a9b      	subs	r3, r3, r2
 80004ca:	2200      	movs	r2, #0
 80004cc:	9100      	str	r1, [sp, #0]
 80004ce:	9201      	str	r2, [sp, #4]
 80004d0:	2201      	movs	r2, #1
 80004d2:	40da      	lsrs	r2, r3
 80004d4:	9201      	str	r2, [sp, #4]
 80004d6:	e786      	b.n	80003e6 <__udivmoddi4+0x6e>
 80004d8:	4642      	mov	r2, r8
 80004da:	2320      	movs	r3, #32
 80004dc:	1a9b      	subs	r3, r3, r2
 80004de:	002a      	movs	r2, r5
 80004e0:	4646      	mov	r6, r8
 80004e2:	409a      	lsls	r2, r3
 80004e4:	0023      	movs	r3, r4
 80004e6:	40f3      	lsrs	r3, r6
 80004e8:	4644      	mov	r4, r8
 80004ea:	4313      	orrs	r3, r2
 80004ec:	002a      	movs	r2, r5
 80004ee:	40e2      	lsrs	r2, r4
 80004f0:	001c      	movs	r4, r3
 80004f2:	465b      	mov	r3, fp
 80004f4:	0015      	movs	r5, r2
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	dad4      	bge.n	80004a4 <__udivmoddi4+0x12c>
 80004fa:	4642      	mov	r2, r8
 80004fc:	002f      	movs	r7, r5
 80004fe:	2320      	movs	r3, #32
 8000500:	0026      	movs	r6, r4
 8000502:	4097      	lsls	r7, r2
 8000504:	1a9b      	subs	r3, r3, r2
 8000506:	40de      	lsrs	r6, r3
 8000508:	003b      	movs	r3, r7
 800050a:	4333      	orrs	r3, r6
 800050c:	e7cd      	b.n	80004aa <__udivmoddi4+0x132>
 800050e:	46c0      	nop			; (mov r8, r8)

08000510 <__eqsf2>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	0042      	lsls	r2, r0, #1
 8000514:	024e      	lsls	r6, r1, #9
 8000516:	004c      	lsls	r4, r1, #1
 8000518:	0245      	lsls	r5, r0, #9
 800051a:	0a6d      	lsrs	r5, r5, #9
 800051c:	0e12      	lsrs	r2, r2, #24
 800051e:	0fc3      	lsrs	r3, r0, #31
 8000520:	0a76      	lsrs	r6, r6, #9
 8000522:	0e24      	lsrs	r4, r4, #24
 8000524:	0fc9      	lsrs	r1, r1, #31
 8000526:	2aff      	cmp	r2, #255	; 0xff
 8000528:	d00f      	beq.n	800054a <__eqsf2+0x3a>
 800052a:	2cff      	cmp	r4, #255	; 0xff
 800052c:	d011      	beq.n	8000552 <__eqsf2+0x42>
 800052e:	2001      	movs	r0, #1
 8000530:	42a2      	cmp	r2, r4
 8000532:	d000      	beq.n	8000536 <__eqsf2+0x26>
 8000534:	bd70      	pop	{r4, r5, r6, pc}
 8000536:	42b5      	cmp	r5, r6
 8000538:	d1fc      	bne.n	8000534 <__eqsf2+0x24>
 800053a:	428b      	cmp	r3, r1
 800053c:	d00d      	beq.n	800055a <__eqsf2+0x4a>
 800053e:	2a00      	cmp	r2, #0
 8000540:	d1f8      	bne.n	8000534 <__eqsf2+0x24>
 8000542:	0028      	movs	r0, r5
 8000544:	1e45      	subs	r5, r0, #1
 8000546:	41a8      	sbcs	r0, r5
 8000548:	e7f4      	b.n	8000534 <__eqsf2+0x24>
 800054a:	2001      	movs	r0, #1
 800054c:	2d00      	cmp	r5, #0
 800054e:	d1f1      	bne.n	8000534 <__eqsf2+0x24>
 8000550:	e7eb      	b.n	800052a <__eqsf2+0x1a>
 8000552:	2001      	movs	r0, #1
 8000554:	2e00      	cmp	r6, #0
 8000556:	d1ed      	bne.n	8000534 <__eqsf2+0x24>
 8000558:	e7e9      	b.n	800052e <__eqsf2+0x1e>
 800055a:	2000      	movs	r0, #0
 800055c:	e7ea      	b.n	8000534 <__eqsf2+0x24>
 800055e:	46c0      	nop			; (mov r8, r8)

08000560 <__gesf2>:
 8000560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000562:	0042      	lsls	r2, r0, #1
 8000564:	0246      	lsls	r6, r0, #9
 8000566:	024d      	lsls	r5, r1, #9
 8000568:	004c      	lsls	r4, r1, #1
 800056a:	0fc3      	lsrs	r3, r0, #31
 800056c:	0a76      	lsrs	r6, r6, #9
 800056e:	0e12      	lsrs	r2, r2, #24
 8000570:	0a6d      	lsrs	r5, r5, #9
 8000572:	0e24      	lsrs	r4, r4, #24
 8000574:	0fc8      	lsrs	r0, r1, #31
 8000576:	2aff      	cmp	r2, #255	; 0xff
 8000578:	d01f      	beq.n	80005ba <__gesf2+0x5a>
 800057a:	2cff      	cmp	r4, #255	; 0xff
 800057c:	d010      	beq.n	80005a0 <__gesf2+0x40>
 800057e:	2a00      	cmp	r2, #0
 8000580:	d11f      	bne.n	80005c2 <__gesf2+0x62>
 8000582:	4271      	negs	r1, r6
 8000584:	4171      	adcs	r1, r6
 8000586:	2c00      	cmp	r4, #0
 8000588:	d101      	bne.n	800058e <__gesf2+0x2e>
 800058a:	2d00      	cmp	r5, #0
 800058c:	d01e      	beq.n	80005cc <__gesf2+0x6c>
 800058e:	2900      	cmp	r1, #0
 8000590:	d10e      	bne.n	80005b0 <__gesf2+0x50>
 8000592:	4283      	cmp	r3, r0
 8000594:	d01e      	beq.n	80005d4 <__gesf2+0x74>
 8000596:	2102      	movs	r1, #2
 8000598:	1e58      	subs	r0, r3, #1
 800059a:	4008      	ands	r0, r1
 800059c:	3801      	subs	r0, #1
 800059e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a0:	2d00      	cmp	r5, #0
 80005a2:	d126      	bne.n	80005f2 <__gesf2+0x92>
 80005a4:	2a00      	cmp	r2, #0
 80005a6:	d1f4      	bne.n	8000592 <__gesf2+0x32>
 80005a8:	4271      	negs	r1, r6
 80005aa:	4171      	adcs	r1, r6
 80005ac:	2900      	cmp	r1, #0
 80005ae:	d0f0      	beq.n	8000592 <__gesf2+0x32>
 80005b0:	2800      	cmp	r0, #0
 80005b2:	d1f4      	bne.n	800059e <__gesf2+0x3e>
 80005b4:	2001      	movs	r0, #1
 80005b6:	4240      	negs	r0, r0
 80005b8:	e7f1      	b.n	800059e <__gesf2+0x3e>
 80005ba:	2e00      	cmp	r6, #0
 80005bc:	d119      	bne.n	80005f2 <__gesf2+0x92>
 80005be:	2cff      	cmp	r4, #255	; 0xff
 80005c0:	d0ee      	beq.n	80005a0 <__gesf2+0x40>
 80005c2:	2c00      	cmp	r4, #0
 80005c4:	d1e5      	bne.n	8000592 <__gesf2+0x32>
 80005c6:	2d00      	cmp	r5, #0
 80005c8:	d1e3      	bne.n	8000592 <__gesf2+0x32>
 80005ca:	e7e4      	b.n	8000596 <__gesf2+0x36>
 80005cc:	2000      	movs	r0, #0
 80005ce:	2e00      	cmp	r6, #0
 80005d0:	d0e5      	beq.n	800059e <__gesf2+0x3e>
 80005d2:	e7e0      	b.n	8000596 <__gesf2+0x36>
 80005d4:	42a2      	cmp	r2, r4
 80005d6:	dc05      	bgt.n	80005e4 <__gesf2+0x84>
 80005d8:	dbea      	blt.n	80005b0 <__gesf2+0x50>
 80005da:	42ae      	cmp	r6, r5
 80005dc:	d802      	bhi.n	80005e4 <__gesf2+0x84>
 80005de:	d3e7      	bcc.n	80005b0 <__gesf2+0x50>
 80005e0:	2000      	movs	r0, #0
 80005e2:	e7dc      	b.n	800059e <__gesf2+0x3e>
 80005e4:	4241      	negs	r1, r0
 80005e6:	4141      	adcs	r1, r0
 80005e8:	4248      	negs	r0, r1
 80005ea:	2102      	movs	r1, #2
 80005ec:	4008      	ands	r0, r1
 80005ee:	3801      	subs	r0, #1
 80005f0:	e7d5      	b.n	800059e <__gesf2+0x3e>
 80005f2:	2002      	movs	r0, #2
 80005f4:	4240      	negs	r0, r0
 80005f6:	e7d2      	b.n	800059e <__gesf2+0x3e>

080005f8 <__lesf2>:
 80005f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005fa:	0042      	lsls	r2, r0, #1
 80005fc:	0246      	lsls	r6, r0, #9
 80005fe:	024d      	lsls	r5, r1, #9
 8000600:	004c      	lsls	r4, r1, #1
 8000602:	0fc3      	lsrs	r3, r0, #31
 8000604:	0a76      	lsrs	r6, r6, #9
 8000606:	0e12      	lsrs	r2, r2, #24
 8000608:	0a6d      	lsrs	r5, r5, #9
 800060a:	0e24      	lsrs	r4, r4, #24
 800060c:	0fc8      	lsrs	r0, r1, #31
 800060e:	2aff      	cmp	r2, #255	; 0xff
 8000610:	d00d      	beq.n	800062e <__lesf2+0x36>
 8000612:	2cff      	cmp	r4, #255	; 0xff
 8000614:	d00f      	beq.n	8000636 <__lesf2+0x3e>
 8000616:	2a00      	cmp	r2, #0
 8000618:	d123      	bne.n	8000662 <__lesf2+0x6a>
 800061a:	4271      	negs	r1, r6
 800061c:	4171      	adcs	r1, r6
 800061e:	2c00      	cmp	r4, #0
 8000620:	d10f      	bne.n	8000642 <__lesf2+0x4a>
 8000622:	2d00      	cmp	r5, #0
 8000624:	d10d      	bne.n	8000642 <__lesf2+0x4a>
 8000626:	2000      	movs	r0, #0
 8000628:	2e00      	cmp	r6, #0
 800062a:	d014      	beq.n	8000656 <__lesf2+0x5e>
 800062c:	e00d      	b.n	800064a <__lesf2+0x52>
 800062e:	2e00      	cmp	r6, #0
 8000630:	d110      	bne.n	8000654 <__lesf2+0x5c>
 8000632:	2cff      	cmp	r4, #255	; 0xff
 8000634:	d115      	bne.n	8000662 <__lesf2+0x6a>
 8000636:	2d00      	cmp	r5, #0
 8000638:	d10c      	bne.n	8000654 <__lesf2+0x5c>
 800063a:	2a00      	cmp	r2, #0
 800063c:	d103      	bne.n	8000646 <__lesf2+0x4e>
 800063e:	4271      	negs	r1, r6
 8000640:	4171      	adcs	r1, r6
 8000642:	2900      	cmp	r1, #0
 8000644:	d108      	bne.n	8000658 <__lesf2+0x60>
 8000646:	4283      	cmp	r3, r0
 8000648:	d010      	beq.n	800066c <__lesf2+0x74>
 800064a:	2102      	movs	r1, #2
 800064c:	1e58      	subs	r0, r3, #1
 800064e:	4008      	ands	r0, r1
 8000650:	3801      	subs	r0, #1
 8000652:	e000      	b.n	8000656 <__lesf2+0x5e>
 8000654:	2002      	movs	r0, #2
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	2800      	cmp	r0, #0
 800065a:	d1fc      	bne.n	8000656 <__lesf2+0x5e>
 800065c:	2001      	movs	r0, #1
 800065e:	4240      	negs	r0, r0
 8000660:	e7f9      	b.n	8000656 <__lesf2+0x5e>
 8000662:	2c00      	cmp	r4, #0
 8000664:	d1ef      	bne.n	8000646 <__lesf2+0x4e>
 8000666:	2d00      	cmp	r5, #0
 8000668:	d1ed      	bne.n	8000646 <__lesf2+0x4e>
 800066a:	e7ee      	b.n	800064a <__lesf2+0x52>
 800066c:	42a2      	cmp	r2, r4
 800066e:	dc05      	bgt.n	800067c <__lesf2+0x84>
 8000670:	dbf2      	blt.n	8000658 <__lesf2+0x60>
 8000672:	42ae      	cmp	r6, r5
 8000674:	d802      	bhi.n	800067c <__lesf2+0x84>
 8000676:	d3ef      	bcc.n	8000658 <__lesf2+0x60>
 8000678:	2000      	movs	r0, #0
 800067a:	e7ec      	b.n	8000656 <__lesf2+0x5e>
 800067c:	4241      	negs	r1, r0
 800067e:	4141      	adcs	r1, r0
 8000680:	4248      	negs	r0, r1
 8000682:	2102      	movs	r1, #2
 8000684:	4008      	ands	r0, r1
 8000686:	3801      	subs	r0, #1
 8000688:	e7e5      	b.n	8000656 <__lesf2+0x5e>
 800068a:	46c0      	nop			; (mov r8, r8)

0800068c <__aeabi_fsub>:
 800068c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800068e:	4646      	mov	r6, r8
 8000690:	46d6      	mov	lr, sl
 8000692:	464f      	mov	r7, r9
 8000694:	0243      	lsls	r3, r0, #9
 8000696:	0a5b      	lsrs	r3, r3, #9
 8000698:	00da      	lsls	r2, r3, #3
 800069a:	4694      	mov	ip, r2
 800069c:	024a      	lsls	r2, r1, #9
 800069e:	b5c0      	push	{r6, r7, lr}
 80006a0:	0044      	lsls	r4, r0, #1
 80006a2:	0a56      	lsrs	r6, r2, #9
 80006a4:	1c05      	adds	r5, r0, #0
 80006a6:	46b0      	mov	r8, r6
 80006a8:	0e24      	lsrs	r4, r4, #24
 80006aa:	004e      	lsls	r6, r1, #1
 80006ac:	0992      	lsrs	r2, r2, #6
 80006ae:	001f      	movs	r7, r3
 80006b0:	0020      	movs	r0, r4
 80006b2:	4692      	mov	sl, r2
 80006b4:	0fed      	lsrs	r5, r5, #31
 80006b6:	0e36      	lsrs	r6, r6, #24
 80006b8:	0fc9      	lsrs	r1, r1, #31
 80006ba:	2eff      	cmp	r6, #255	; 0xff
 80006bc:	d100      	bne.n	80006c0 <__aeabi_fsub+0x34>
 80006be:	e07f      	b.n	80007c0 <__aeabi_fsub+0x134>
 80006c0:	2201      	movs	r2, #1
 80006c2:	4051      	eors	r1, r2
 80006c4:	428d      	cmp	r5, r1
 80006c6:	d051      	beq.n	800076c <__aeabi_fsub+0xe0>
 80006c8:	1ba2      	subs	r2, r4, r6
 80006ca:	4691      	mov	r9, r2
 80006cc:	2a00      	cmp	r2, #0
 80006ce:	dc00      	bgt.n	80006d2 <__aeabi_fsub+0x46>
 80006d0:	e07e      	b.n	80007d0 <__aeabi_fsub+0x144>
 80006d2:	2e00      	cmp	r6, #0
 80006d4:	d100      	bne.n	80006d8 <__aeabi_fsub+0x4c>
 80006d6:	e099      	b.n	800080c <__aeabi_fsub+0x180>
 80006d8:	2cff      	cmp	r4, #255	; 0xff
 80006da:	d100      	bne.n	80006de <__aeabi_fsub+0x52>
 80006dc:	e08c      	b.n	80007f8 <__aeabi_fsub+0x16c>
 80006de:	2380      	movs	r3, #128	; 0x80
 80006e0:	4652      	mov	r2, sl
 80006e2:	04db      	lsls	r3, r3, #19
 80006e4:	431a      	orrs	r2, r3
 80006e6:	4692      	mov	sl, r2
 80006e8:	464a      	mov	r2, r9
 80006ea:	2301      	movs	r3, #1
 80006ec:	2a1b      	cmp	r2, #27
 80006ee:	dc08      	bgt.n	8000702 <__aeabi_fsub+0x76>
 80006f0:	4653      	mov	r3, sl
 80006f2:	2120      	movs	r1, #32
 80006f4:	40d3      	lsrs	r3, r2
 80006f6:	1a89      	subs	r1, r1, r2
 80006f8:	4652      	mov	r2, sl
 80006fa:	408a      	lsls	r2, r1
 80006fc:	1e51      	subs	r1, r2, #1
 80006fe:	418a      	sbcs	r2, r1
 8000700:	4313      	orrs	r3, r2
 8000702:	4662      	mov	r2, ip
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	015a      	lsls	r2, r3, #5
 8000708:	d400      	bmi.n	800070c <__aeabi_fsub+0x80>
 800070a:	e0f3      	b.n	80008f4 <__aeabi_fsub+0x268>
 800070c:	019b      	lsls	r3, r3, #6
 800070e:	099e      	lsrs	r6, r3, #6
 8000710:	0030      	movs	r0, r6
 8000712:	f000 f9a3 	bl	8000a5c <__clzsi2>
 8000716:	3805      	subs	r0, #5
 8000718:	4086      	lsls	r6, r0
 800071a:	4284      	cmp	r4, r0
 800071c:	dd00      	ble.n	8000720 <__aeabi_fsub+0x94>
 800071e:	e0f7      	b.n	8000910 <__aeabi_fsub+0x284>
 8000720:	0032      	movs	r2, r6
 8000722:	1b04      	subs	r4, r0, r4
 8000724:	2020      	movs	r0, #32
 8000726:	3401      	adds	r4, #1
 8000728:	40e2      	lsrs	r2, r4
 800072a:	1b04      	subs	r4, r0, r4
 800072c:	40a6      	lsls	r6, r4
 800072e:	0033      	movs	r3, r6
 8000730:	1e5e      	subs	r6, r3, #1
 8000732:	41b3      	sbcs	r3, r6
 8000734:	2400      	movs	r4, #0
 8000736:	4313      	orrs	r3, r2
 8000738:	075a      	lsls	r2, r3, #29
 800073a:	d004      	beq.n	8000746 <__aeabi_fsub+0xba>
 800073c:	220f      	movs	r2, #15
 800073e:	401a      	ands	r2, r3
 8000740:	2a04      	cmp	r2, #4
 8000742:	d000      	beq.n	8000746 <__aeabi_fsub+0xba>
 8000744:	3304      	adds	r3, #4
 8000746:	015a      	lsls	r2, r3, #5
 8000748:	d400      	bmi.n	800074c <__aeabi_fsub+0xc0>
 800074a:	e0d6      	b.n	80008fa <__aeabi_fsub+0x26e>
 800074c:	1c62      	adds	r2, r4, #1
 800074e:	2cfe      	cmp	r4, #254	; 0xfe
 8000750:	d100      	bne.n	8000754 <__aeabi_fsub+0xc8>
 8000752:	e0da      	b.n	800090a <__aeabi_fsub+0x27e>
 8000754:	019b      	lsls	r3, r3, #6
 8000756:	0a5f      	lsrs	r7, r3, #9
 8000758:	b2d0      	uxtb	r0, r2
 800075a:	05c0      	lsls	r0, r0, #23
 800075c:	4338      	orrs	r0, r7
 800075e:	07ed      	lsls	r5, r5, #31
 8000760:	4328      	orrs	r0, r5
 8000762:	bce0      	pop	{r5, r6, r7}
 8000764:	46ba      	mov	sl, r7
 8000766:	46b1      	mov	r9, r6
 8000768:	46a8      	mov	r8, r5
 800076a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076c:	1ba2      	subs	r2, r4, r6
 800076e:	4691      	mov	r9, r2
 8000770:	2a00      	cmp	r2, #0
 8000772:	dd63      	ble.n	800083c <__aeabi_fsub+0x1b0>
 8000774:	2e00      	cmp	r6, #0
 8000776:	d100      	bne.n	800077a <__aeabi_fsub+0xee>
 8000778:	e099      	b.n	80008ae <__aeabi_fsub+0x222>
 800077a:	2cff      	cmp	r4, #255	; 0xff
 800077c:	d03c      	beq.n	80007f8 <__aeabi_fsub+0x16c>
 800077e:	2380      	movs	r3, #128	; 0x80
 8000780:	4652      	mov	r2, sl
 8000782:	04db      	lsls	r3, r3, #19
 8000784:	431a      	orrs	r2, r3
 8000786:	4692      	mov	sl, r2
 8000788:	464a      	mov	r2, r9
 800078a:	2301      	movs	r3, #1
 800078c:	2a1b      	cmp	r2, #27
 800078e:	dc08      	bgt.n	80007a2 <__aeabi_fsub+0x116>
 8000790:	4653      	mov	r3, sl
 8000792:	2120      	movs	r1, #32
 8000794:	40d3      	lsrs	r3, r2
 8000796:	1a89      	subs	r1, r1, r2
 8000798:	4652      	mov	r2, sl
 800079a:	408a      	lsls	r2, r1
 800079c:	1e51      	subs	r1, r2, #1
 800079e:	418a      	sbcs	r2, r1
 80007a0:	4313      	orrs	r3, r2
 80007a2:	4463      	add	r3, ip
 80007a4:	015a      	lsls	r2, r3, #5
 80007a6:	d400      	bmi.n	80007aa <__aeabi_fsub+0x11e>
 80007a8:	e0a4      	b.n	80008f4 <__aeabi_fsub+0x268>
 80007aa:	3401      	adds	r4, #1
 80007ac:	2cff      	cmp	r4, #255	; 0xff
 80007ae:	d100      	bne.n	80007b2 <__aeabi_fsub+0x126>
 80007b0:	e0ab      	b.n	800090a <__aeabi_fsub+0x27e>
 80007b2:	2201      	movs	r2, #1
 80007b4:	4997      	ldr	r1, [pc, #604]	; (8000a14 <__aeabi_fsub+0x388>)
 80007b6:	401a      	ands	r2, r3
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	400b      	ands	r3, r1
 80007bc:	4313      	orrs	r3, r2
 80007be:	e7bb      	b.n	8000738 <__aeabi_fsub+0xac>
 80007c0:	2a00      	cmp	r2, #0
 80007c2:	d032      	beq.n	800082a <__aeabi_fsub+0x19e>
 80007c4:	428d      	cmp	r5, r1
 80007c6:	d035      	beq.n	8000834 <__aeabi_fsub+0x1a8>
 80007c8:	22ff      	movs	r2, #255	; 0xff
 80007ca:	4252      	negs	r2, r2
 80007cc:	4691      	mov	r9, r2
 80007ce:	44a1      	add	r9, r4
 80007d0:	464a      	mov	r2, r9
 80007d2:	2a00      	cmp	r2, #0
 80007d4:	d051      	beq.n	800087a <__aeabi_fsub+0x1ee>
 80007d6:	1b30      	subs	r0, r6, r4
 80007d8:	2c00      	cmp	r4, #0
 80007da:	d000      	beq.n	80007de <__aeabi_fsub+0x152>
 80007dc:	e09c      	b.n	8000918 <__aeabi_fsub+0x28c>
 80007de:	4663      	mov	r3, ip
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d100      	bne.n	80007e6 <__aeabi_fsub+0x15a>
 80007e4:	e0df      	b.n	80009a6 <__aeabi_fsub+0x31a>
 80007e6:	3801      	subs	r0, #1
 80007e8:	2800      	cmp	r0, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_fsub+0x162>
 80007ec:	e0f7      	b.n	80009de <__aeabi_fsub+0x352>
 80007ee:	2eff      	cmp	r6, #255	; 0xff
 80007f0:	d000      	beq.n	80007f4 <__aeabi_fsub+0x168>
 80007f2:	e099      	b.n	8000928 <__aeabi_fsub+0x29c>
 80007f4:	000d      	movs	r5, r1
 80007f6:	4643      	mov	r3, r8
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fsub+0x172>
 80007fc:	e085      	b.n	800090a <__aeabi_fsub+0x27e>
 80007fe:	2780      	movs	r7, #128	; 0x80
 8000800:	03ff      	lsls	r7, r7, #15
 8000802:	431f      	orrs	r7, r3
 8000804:	027f      	lsls	r7, r7, #9
 8000806:	20ff      	movs	r0, #255	; 0xff
 8000808:	0a7f      	lsrs	r7, r7, #9
 800080a:	e7a6      	b.n	800075a <__aeabi_fsub+0xce>
 800080c:	4652      	mov	r2, sl
 800080e:	2a00      	cmp	r2, #0
 8000810:	d074      	beq.n	80008fc <__aeabi_fsub+0x270>
 8000812:	2201      	movs	r2, #1
 8000814:	4252      	negs	r2, r2
 8000816:	4690      	mov	r8, r2
 8000818:	44c1      	add	r9, r8
 800081a:	464a      	mov	r2, r9
 800081c:	2a00      	cmp	r2, #0
 800081e:	d100      	bne.n	8000822 <__aeabi_fsub+0x196>
 8000820:	e0c8      	b.n	80009b4 <__aeabi_fsub+0x328>
 8000822:	2cff      	cmp	r4, #255	; 0xff
 8000824:	d000      	beq.n	8000828 <__aeabi_fsub+0x19c>
 8000826:	e75f      	b.n	80006e8 <__aeabi_fsub+0x5c>
 8000828:	e7e6      	b.n	80007f8 <__aeabi_fsub+0x16c>
 800082a:	2201      	movs	r2, #1
 800082c:	4051      	eors	r1, r2
 800082e:	42a9      	cmp	r1, r5
 8000830:	d000      	beq.n	8000834 <__aeabi_fsub+0x1a8>
 8000832:	e749      	b.n	80006c8 <__aeabi_fsub+0x3c>
 8000834:	22ff      	movs	r2, #255	; 0xff
 8000836:	4252      	negs	r2, r2
 8000838:	4691      	mov	r9, r2
 800083a:	44a1      	add	r9, r4
 800083c:	464a      	mov	r2, r9
 800083e:	2a00      	cmp	r2, #0
 8000840:	d043      	beq.n	80008ca <__aeabi_fsub+0x23e>
 8000842:	1b31      	subs	r1, r6, r4
 8000844:	2c00      	cmp	r4, #0
 8000846:	d100      	bne.n	800084a <__aeabi_fsub+0x1be>
 8000848:	e08c      	b.n	8000964 <__aeabi_fsub+0x2d8>
 800084a:	2eff      	cmp	r6, #255	; 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fsub+0x1c4>
 800084e:	e092      	b.n	8000976 <__aeabi_fsub+0x2ea>
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	4662      	mov	r2, ip
 8000854:	04db      	lsls	r3, r3, #19
 8000856:	431a      	orrs	r2, r3
 8000858:	4694      	mov	ip, r2
 800085a:	2301      	movs	r3, #1
 800085c:	291b      	cmp	r1, #27
 800085e:	dc09      	bgt.n	8000874 <__aeabi_fsub+0x1e8>
 8000860:	2020      	movs	r0, #32
 8000862:	4663      	mov	r3, ip
 8000864:	4662      	mov	r2, ip
 8000866:	40cb      	lsrs	r3, r1
 8000868:	1a41      	subs	r1, r0, r1
 800086a:	408a      	lsls	r2, r1
 800086c:	0011      	movs	r1, r2
 800086e:	1e48      	subs	r0, r1, #1
 8000870:	4181      	sbcs	r1, r0
 8000872:	430b      	orrs	r3, r1
 8000874:	0034      	movs	r4, r6
 8000876:	4453      	add	r3, sl
 8000878:	e794      	b.n	80007a4 <__aeabi_fsub+0x118>
 800087a:	22fe      	movs	r2, #254	; 0xfe
 800087c:	1c66      	adds	r6, r4, #1
 800087e:	4232      	tst	r2, r6
 8000880:	d164      	bne.n	800094c <__aeabi_fsub+0x2c0>
 8000882:	2c00      	cmp	r4, #0
 8000884:	d000      	beq.n	8000888 <__aeabi_fsub+0x1fc>
 8000886:	e082      	b.n	800098e <__aeabi_fsub+0x302>
 8000888:	4663      	mov	r3, ip
 800088a:	2b00      	cmp	r3, #0
 800088c:	d100      	bne.n	8000890 <__aeabi_fsub+0x204>
 800088e:	e0ab      	b.n	80009e8 <__aeabi_fsub+0x35c>
 8000890:	4653      	mov	r3, sl
 8000892:	2b00      	cmp	r3, #0
 8000894:	d100      	bne.n	8000898 <__aeabi_fsub+0x20c>
 8000896:	e760      	b.n	800075a <__aeabi_fsub+0xce>
 8000898:	4663      	mov	r3, ip
 800089a:	4652      	mov	r2, sl
 800089c:	1a9b      	subs	r3, r3, r2
 800089e:	015a      	lsls	r2, r3, #5
 80008a0:	d400      	bmi.n	80008a4 <__aeabi_fsub+0x218>
 80008a2:	e0aa      	b.n	80009fa <__aeabi_fsub+0x36e>
 80008a4:	4663      	mov	r3, ip
 80008a6:	4652      	mov	r2, sl
 80008a8:	000d      	movs	r5, r1
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	e744      	b.n	8000738 <__aeabi_fsub+0xac>
 80008ae:	4652      	mov	r2, sl
 80008b0:	2a00      	cmp	r2, #0
 80008b2:	d023      	beq.n	80008fc <__aeabi_fsub+0x270>
 80008b4:	2201      	movs	r2, #1
 80008b6:	4252      	negs	r2, r2
 80008b8:	4690      	mov	r8, r2
 80008ba:	44c1      	add	r9, r8
 80008bc:	464a      	mov	r2, r9
 80008be:	2a00      	cmp	r2, #0
 80008c0:	d075      	beq.n	80009ae <__aeabi_fsub+0x322>
 80008c2:	2cff      	cmp	r4, #255	; 0xff
 80008c4:	d000      	beq.n	80008c8 <__aeabi_fsub+0x23c>
 80008c6:	e75f      	b.n	8000788 <__aeabi_fsub+0xfc>
 80008c8:	e796      	b.n	80007f8 <__aeabi_fsub+0x16c>
 80008ca:	26fe      	movs	r6, #254	; 0xfe
 80008cc:	3401      	adds	r4, #1
 80008ce:	4226      	tst	r6, r4
 80008d0:	d153      	bne.n	800097a <__aeabi_fsub+0x2ee>
 80008d2:	2800      	cmp	r0, #0
 80008d4:	d172      	bne.n	80009bc <__aeabi_fsub+0x330>
 80008d6:	4663      	mov	r3, ip
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d100      	bne.n	80008de <__aeabi_fsub+0x252>
 80008dc:	e093      	b.n	8000a06 <__aeabi_fsub+0x37a>
 80008de:	4653      	mov	r3, sl
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d100      	bne.n	80008e6 <__aeabi_fsub+0x25a>
 80008e4:	e739      	b.n	800075a <__aeabi_fsub+0xce>
 80008e6:	4463      	add	r3, ip
 80008e8:	2400      	movs	r4, #0
 80008ea:	015a      	lsls	r2, r3, #5
 80008ec:	d502      	bpl.n	80008f4 <__aeabi_fsub+0x268>
 80008ee:	4a4a      	ldr	r2, [pc, #296]	; (8000a18 <__aeabi_fsub+0x38c>)
 80008f0:	3401      	adds	r4, #1
 80008f2:	4013      	ands	r3, r2
 80008f4:	075a      	lsls	r2, r3, #29
 80008f6:	d000      	beq.n	80008fa <__aeabi_fsub+0x26e>
 80008f8:	e720      	b.n	800073c <__aeabi_fsub+0xb0>
 80008fa:	08db      	lsrs	r3, r3, #3
 80008fc:	2cff      	cmp	r4, #255	; 0xff
 80008fe:	d100      	bne.n	8000902 <__aeabi_fsub+0x276>
 8000900:	e77a      	b.n	80007f8 <__aeabi_fsub+0x16c>
 8000902:	025b      	lsls	r3, r3, #9
 8000904:	0a5f      	lsrs	r7, r3, #9
 8000906:	b2e0      	uxtb	r0, r4
 8000908:	e727      	b.n	800075a <__aeabi_fsub+0xce>
 800090a:	20ff      	movs	r0, #255	; 0xff
 800090c:	2700      	movs	r7, #0
 800090e:	e724      	b.n	800075a <__aeabi_fsub+0xce>
 8000910:	4b41      	ldr	r3, [pc, #260]	; (8000a18 <__aeabi_fsub+0x38c>)
 8000912:	1a24      	subs	r4, r4, r0
 8000914:	4033      	ands	r3, r6
 8000916:	e70f      	b.n	8000738 <__aeabi_fsub+0xac>
 8000918:	2eff      	cmp	r6, #255	; 0xff
 800091a:	d100      	bne.n	800091e <__aeabi_fsub+0x292>
 800091c:	e76a      	b.n	80007f4 <__aeabi_fsub+0x168>
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	4662      	mov	r2, ip
 8000922:	04db      	lsls	r3, r3, #19
 8000924:	431a      	orrs	r2, r3
 8000926:	4694      	mov	ip, r2
 8000928:	2301      	movs	r3, #1
 800092a:	281b      	cmp	r0, #27
 800092c:	dc09      	bgt.n	8000942 <__aeabi_fsub+0x2b6>
 800092e:	2420      	movs	r4, #32
 8000930:	4663      	mov	r3, ip
 8000932:	4662      	mov	r2, ip
 8000934:	40c3      	lsrs	r3, r0
 8000936:	1a20      	subs	r0, r4, r0
 8000938:	4082      	lsls	r2, r0
 800093a:	0010      	movs	r0, r2
 800093c:	1e44      	subs	r4, r0, #1
 800093e:	41a0      	sbcs	r0, r4
 8000940:	4303      	orrs	r3, r0
 8000942:	4652      	mov	r2, sl
 8000944:	000d      	movs	r5, r1
 8000946:	0034      	movs	r4, r6
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	e6dc      	b.n	8000706 <__aeabi_fsub+0x7a>
 800094c:	4663      	mov	r3, ip
 800094e:	4652      	mov	r2, sl
 8000950:	1a9e      	subs	r6, r3, r2
 8000952:	0173      	lsls	r3, r6, #5
 8000954:	d417      	bmi.n	8000986 <__aeabi_fsub+0x2fa>
 8000956:	2e00      	cmp	r6, #0
 8000958:	d000      	beq.n	800095c <__aeabi_fsub+0x2d0>
 800095a:	e6d9      	b.n	8000710 <__aeabi_fsub+0x84>
 800095c:	2500      	movs	r5, #0
 800095e:	2000      	movs	r0, #0
 8000960:	2700      	movs	r7, #0
 8000962:	e6fa      	b.n	800075a <__aeabi_fsub+0xce>
 8000964:	4663      	mov	r3, ip
 8000966:	2b00      	cmp	r3, #0
 8000968:	d044      	beq.n	80009f4 <__aeabi_fsub+0x368>
 800096a:	3901      	subs	r1, #1
 800096c:	2900      	cmp	r1, #0
 800096e:	d04c      	beq.n	8000a0a <__aeabi_fsub+0x37e>
 8000970:	2eff      	cmp	r6, #255	; 0xff
 8000972:	d000      	beq.n	8000976 <__aeabi_fsub+0x2ea>
 8000974:	e771      	b.n	800085a <__aeabi_fsub+0x1ce>
 8000976:	4643      	mov	r3, r8
 8000978:	e73e      	b.n	80007f8 <__aeabi_fsub+0x16c>
 800097a:	2cff      	cmp	r4, #255	; 0xff
 800097c:	d0c5      	beq.n	800090a <__aeabi_fsub+0x27e>
 800097e:	4652      	mov	r2, sl
 8000980:	4462      	add	r2, ip
 8000982:	0853      	lsrs	r3, r2, #1
 8000984:	e7b6      	b.n	80008f4 <__aeabi_fsub+0x268>
 8000986:	4663      	mov	r3, ip
 8000988:	000d      	movs	r5, r1
 800098a:	1ad6      	subs	r6, r2, r3
 800098c:	e6c0      	b.n	8000710 <__aeabi_fsub+0x84>
 800098e:	4662      	mov	r2, ip
 8000990:	2a00      	cmp	r2, #0
 8000992:	d116      	bne.n	80009c2 <__aeabi_fsub+0x336>
 8000994:	4653      	mov	r3, sl
 8000996:	2b00      	cmp	r3, #0
 8000998:	d000      	beq.n	800099c <__aeabi_fsub+0x310>
 800099a:	e72b      	b.n	80007f4 <__aeabi_fsub+0x168>
 800099c:	2780      	movs	r7, #128	; 0x80
 800099e:	2500      	movs	r5, #0
 80009a0:	20ff      	movs	r0, #255	; 0xff
 80009a2:	03ff      	lsls	r7, r7, #15
 80009a4:	e6d9      	b.n	800075a <__aeabi_fsub+0xce>
 80009a6:	000d      	movs	r5, r1
 80009a8:	4643      	mov	r3, r8
 80009aa:	0034      	movs	r4, r6
 80009ac:	e7a6      	b.n	80008fc <__aeabi_fsub+0x270>
 80009ae:	4653      	mov	r3, sl
 80009b0:	4463      	add	r3, ip
 80009b2:	e6f7      	b.n	80007a4 <__aeabi_fsub+0x118>
 80009b4:	4663      	mov	r3, ip
 80009b6:	4652      	mov	r2, sl
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	e6a4      	b.n	8000706 <__aeabi_fsub+0x7a>
 80009bc:	4662      	mov	r2, ip
 80009be:	2a00      	cmp	r2, #0
 80009c0:	d0d9      	beq.n	8000976 <__aeabi_fsub+0x2ea>
 80009c2:	4652      	mov	r2, sl
 80009c4:	2a00      	cmp	r2, #0
 80009c6:	d100      	bne.n	80009ca <__aeabi_fsub+0x33e>
 80009c8:	e716      	b.n	80007f8 <__aeabi_fsub+0x16c>
 80009ca:	2280      	movs	r2, #128	; 0x80
 80009cc:	03d2      	lsls	r2, r2, #15
 80009ce:	4213      	tst	r3, r2
 80009d0:	d100      	bne.n	80009d4 <__aeabi_fsub+0x348>
 80009d2:	e711      	b.n	80007f8 <__aeabi_fsub+0x16c>
 80009d4:	4640      	mov	r0, r8
 80009d6:	4210      	tst	r0, r2
 80009d8:	d000      	beq.n	80009dc <__aeabi_fsub+0x350>
 80009da:	e70d      	b.n	80007f8 <__aeabi_fsub+0x16c>
 80009dc:	e70a      	b.n	80007f4 <__aeabi_fsub+0x168>
 80009de:	4652      	mov	r2, sl
 80009e0:	000d      	movs	r5, r1
 80009e2:	0034      	movs	r4, r6
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	e68e      	b.n	8000706 <__aeabi_fsub+0x7a>
 80009e8:	4653      	mov	r3, sl
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d008      	beq.n	8000a00 <__aeabi_fsub+0x374>
 80009ee:	000d      	movs	r5, r1
 80009f0:	4647      	mov	r7, r8
 80009f2:	e6b2      	b.n	800075a <__aeabi_fsub+0xce>
 80009f4:	4643      	mov	r3, r8
 80009f6:	0034      	movs	r4, r6
 80009f8:	e780      	b.n	80008fc <__aeabi_fsub+0x270>
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d000      	beq.n	8000a00 <__aeabi_fsub+0x374>
 80009fe:	e779      	b.n	80008f4 <__aeabi_fsub+0x268>
 8000a00:	2500      	movs	r5, #0
 8000a02:	2700      	movs	r7, #0
 8000a04:	e6a9      	b.n	800075a <__aeabi_fsub+0xce>
 8000a06:	4647      	mov	r7, r8
 8000a08:	e6a7      	b.n	800075a <__aeabi_fsub+0xce>
 8000a0a:	4653      	mov	r3, sl
 8000a0c:	0034      	movs	r4, r6
 8000a0e:	4463      	add	r3, ip
 8000a10:	e6c8      	b.n	80007a4 <__aeabi_fsub+0x118>
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	7dffffff 	.word	0x7dffffff
 8000a18:	fbffffff 	.word	0xfbffffff

08000a1c <__aeabi_f2iz>:
 8000a1c:	0241      	lsls	r1, r0, #9
 8000a1e:	0042      	lsls	r2, r0, #1
 8000a20:	0fc3      	lsrs	r3, r0, #31
 8000a22:	0a49      	lsrs	r1, r1, #9
 8000a24:	2000      	movs	r0, #0
 8000a26:	0e12      	lsrs	r2, r2, #24
 8000a28:	2a7e      	cmp	r2, #126	; 0x7e
 8000a2a:	d903      	bls.n	8000a34 <__aeabi_f2iz+0x18>
 8000a2c:	2a9d      	cmp	r2, #157	; 0x9d
 8000a2e:	d902      	bls.n	8000a36 <__aeabi_f2iz+0x1a>
 8000a30:	4a09      	ldr	r2, [pc, #36]	; (8000a58 <__aeabi_f2iz+0x3c>)
 8000a32:	1898      	adds	r0, r3, r2
 8000a34:	4770      	bx	lr
 8000a36:	2080      	movs	r0, #128	; 0x80
 8000a38:	0400      	lsls	r0, r0, #16
 8000a3a:	4301      	orrs	r1, r0
 8000a3c:	2a95      	cmp	r2, #149	; 0x95
 8000a3e:	dc07      	bgt.n	8000a50 <__aeabi_f2iz+0x34>
 8000a40:	2096      	movs	r0, #150	; 0x96
 8000a42:	1a82      	subs	r2, r0, r2
 8000a44:	40d1      	lsrs	r1, r2
 8000a46:	4248      	negs	r0, r1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1f3      	bne.n	8000a34 <__aeabi_f2iz+0x18>
 8000a4c:	0008      	movs	r0, r1
 8000a4e:	e7f1      	b.n	8000a34 <__aeabi_f2iz+0x18>
 8000a50:	3a96      	subs	r2, #150	; 0x96
 8000a52:	4091      	lsls	r1, r2
 8000a54:	e7f7      	b.n	8000a46 <__aeabi_f2iz+0x2a>
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	7fffffff 	.word	0x7fffffff

08000a5c <__clzsi2>:
 8000a5c:	211c      	movs	r1, #28
 8000a5e:	2301      	movs	r3, #1
 8000a60:	041b      	lsls	r3, r3, #16
 8000a62:	4298      	cmp	r0, r3
 8000a64:	d301      	bcc.n	8000a6a <__clzsi2+0xe>
 8000a66:	0c00      	lsrs	r0, r0, #16
 8000a68:	3910      	subs	r1, #16
 8000a6a:	0a1b      	lsrs	r3, r3, #8
 8000a6c:	4298      	cmp	r0, r3
 8000a6e:	d301      	bcc.n	8000a74 <__clzsi2+0x18>
 8000a70:	0a00      	lsrs	r0, r0, #8
 8000a72:	3908      	subs	r1, #8
 8000a74:	091b      	lsrs	r3, r3, #4
 8000a76:	4298      	cmp	r0, r3
 8000a78:	d301      	bcc.n	8000a7e <__clzsi2+0x22>
 8000a7a:	0900      	lsrs	r0, r0, #4
 8000a7c:	3904      	subs	r1, #4
 8000a7e:	a202      	add	r2, pc, #8	; (adr r2, 8000a88 <__clzsi2+0x2c>)
 8000a80:	5c10      	ldrb	r0, [r2, r0]
 8000a82:	1840      	adds	r0, r0, r1
 8000a84:	4770      	bx	lr
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	02020304 	.word	0x02020304
 8000a8c:	01010101 	.word	0x01010101
	...

08000a98 <__clzdi2>:
 8000a98:	b510      	push	{r4, lr}
 8000a9a:	2900      	cmp	r1, #0
 8000a9c:	d103      	bne.n	8000aa6 <__clzdi2+0xe>
 8000a9e:	f7ff ffdd 	bl	8000a5c <__clzsi2>
 8000aa2:	3020      	adds	r0, #32
 8000aa4:	e002      	b.n	8000aac <__clzdi2+0x14>
 8000aa6:	1c08      	adds	r0, r1, #0
 8000aa8:	f7ff ffd8 	bl	8000a5c <__clzsi2>
 8000aac:	bd10      	pop	{r4, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)

08000ab0 <getPage>:

#include "flash.h"


static uint32_t getPage(uint32_t Address)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	e01a      	b.n	8000af4 <getPage+0x44>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <getPage+0x54>)
 8000ac2:	4694      	mov	ip, r2
 8000ac4:	4463      	add	r3, ip
 8000ac6:	01db      	lsls	r3, r3, #7
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d20f      	bcs.n	8000aee <getPage+0x3e>
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2280      	movs	r2, #128	; 0x80
 8000ad2:	0352      	lsls	r2, r2, #13
 8000ad4:	4694      	mov	ip, r2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	01db      	lsls	r3, r3, #7
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d306      	bcc.n	8000aee <getPage+0x3e>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	0352      	lsls	r2, r2, #13
 8000ae6:	4694      	mov	ip, r2
 8000ae8:	4463      	add	r3, ip
 8000aea:	01db      	lsls	r3, r3, #7
 8000aec:	e006      	b.n	8000afc <getPage+0x4c>
  for (int indx=0; indx<128; indx++)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	3301      	adds	r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2b7f      	cmp	r3, #127	; 0x7f
 8000af8:	dde1      	ble.n	8000abe <getPage+0xe>
	  }
  }

  return 0;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	0018      	movs	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b004      	add	sp, #16
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	00100001 	.word	0x00100001

08000b08 <float2Bytes>:

uint8_t bytes_temp[4];


void float2Bytes(uint8_t * ftoa_bytes_temp,float float_variable)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    thing.a = float_variable;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 4; i++) {
 8000b16:	230f      	movs	r3, #15
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	e00f      	b.n	8000b40 <float2Bytes+0x38>
      ftoa_bytes_temp[i] = thing.bytes[i];
 8000b20:	200f      	movs	r0, #15
 8000b22:	183b      	adds	r3, r7, r0
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	183b      	adds	r3, r7, r0
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	18cb      	adds	r3, r1, r3
 8000b2e:	2108      	movs	r1, #8
 8000b30:	1879      	adds	r1, r7, r1
 8000b32:	5c8a      	ldrb	r2, [r1, r2]
 8000b34:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++) {
 8000b36:	183b      	adds	r3, r7, r0
 8000b38:	781a      	ldrb	r2, [r3, #0]
 8000b3a:	183b      	adds	r3, r7, r0
 8000b3c:	3201      	adds	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
 8000b40:	230f      	movs	r3, #15
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d9ea      	bls.n	8000b20 <float2Bytes+0x18>
    }

}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b004      	add	sp, #16
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <Bytes2float>:

float Bytes2float(uint8_t * ftoa_bytes_temp)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
    union {
      float a;
      uint8_t bytes[4];
    } thing;

    for (uint8_t i = 0; i < 4; i++) {
 8000b5c:	2317      	movs	r3, #23
 8000b5e:	18fb      	adds	r3, r7, r3
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	e00f      	b.n	8000b86 <Bytes2float+0x32>
    	thing.bytes[i] = ftoa_bytes_temp[i];
 8000b66:	2017      	movs	r0, #23
 8000b68:	183b      	adds	r3, r7, r0
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	18d2      	adds	r2, r2, r3
 8000b70:	183b      	adds	r3, r7, r0
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	7811      	ldrb	r1, [r2, #0]
 8000b76:	220c      	movs	r2, #12
 8000b78:	18ba      	adds	r2, r7, r2
 8000b7a:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < 4; i++) {
 8000b7c:	183b      	adds	r3, r7, r0
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	183b      	adds	r3, r7, r0
 8000b82:	3201      	adds	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	2317      	movs	r3, #23
 8000b88:	18fb      	adds	r3, r7, r3
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b03      	cmp	r3, #3
 8000b8e:	d9ea      	bls.n	8000b66 <Bytes2float+0x12>
    }

   float float_variable =  thing.a;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	613b      	str	r3, [r7, #16]
   return float_variable;
 8000b94:	693b      	ldr	r3, [r7, #16]
}
 8000b96:	1c18      	adds	r0, r3, #0
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b006      	add	sp, #24
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <flashWriteData>:

uint32_t flashWriteData (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	60f8      	str	r0, [r7, #12]
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	1dbb      	adds	r3, r7, #6
 8000baa:	801a      	strh	r2, [r3, #0]

//	static FLASH_EraseInitTypeDef EraseInitStruct;
//	uint32_t PAGEError;
	int sofar=0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8000bb0:	f002 f8ea 	bl	8002d88 <HAL_FLASH_Unlock>
//		  return HAL_FLASH_GetError ();
//	   }

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
 8000bb4:	e016      	b.n	8000be4 <flashWriteData+0x46>
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	18d3      	adds	r3, r2, r3
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	0019      	movs	r1, r3
 8000bc4:	2002      	movs	r0, #2
 8000bc6:	f002 f8a3 	bl	8002d10 <HAL_FLASH_Program>
 8000bca:	1e03      	subs	r3, r0, #0
 8000bcc:	d106      	bne.n	8000bdc <flashWriteData+0x3e>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	e003      	b.n	8000be4 <flashWriteData+0x46>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8000bdc:	f002 f93c 	bl	8002e58 <HAL_FLASH_GetError>
 8000be0:	0003      	movs	r3, r0
 8000be2:	e007      	b.n	8000bf4 <flashWriteData+0x56>
	   while (sofar<numberofwords)
 8000be4:	1dbb      	adds	r3, r7, #6
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	dbe3      	blt.n	8000bb6 <flashWriteData+0x18>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8000bee:	f002 f91f 	bl	8002e30 <HAL_FLASH_Lock>

	   return 0;
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b006      	add	sp, #24
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <flashReadData>:


void flashReadData (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	1dbb      	adds	r3, r7, #6
 8000c08:	801a      	strh	r2, [r3, #0]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	3304      	adds	r3, #4
 8000c16:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	3304      	adds	r3, #4
 8000c1c:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8000c1e:	1dbb      	adds	r3, r7, #6
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	1dba      	adds	r2, r7, #6
 8000c24:	1e59      	subs	r1, r3, #1
 8000c26:	8011      	strh	r1, [r2, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d000      	beq.n	8000c2e <flashReadData+0x32>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000c2c:	e7ed      	b.n	8000c0a <flashReadData+0xe>
		if (!(numberofwords--)) break;
 8000c2e:	46c0      	nop			; (mov r8, r8)
	}
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b004      	add	sp, #16
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <flashWriteNumber>:
	}
}


void flashWriteNumber (uint32_t StartSectorAddress, float Num)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]

	float2Bytes(bytes_temp, Num);
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <flashWriteNumber+0x2c>)
 8000c46:	1c11      	adds	r1, r2, #0
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff ff5d 	bl	8000b08 <float2Bytes>

	flashWriteData (StartSectorAddress, (uint32_t *)bytes_temp, 1);
 8000c4e:	4905      	ldr	r1, [pc, #20]	; (8000c64 <flashWriteNumber+0x2c>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2201      	movs	r2, #1
 8000c54:	0018      	movs	r0, r3
 8000c56:	f7ff ffa2 	bl	8000b9e <flashWriteData>
}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	2000013c 	.word	0x2000013c

08000c68 <flashReadNumber>:


float flashReadNumber (uint32_t StartSectorAddress)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[4];
	float value;

	flashReadData(StartSectorAddress, (uint32_t *)buffer, 1);
 8000c70:	2408      	movs	r4, #8
 8000c72:	1939      	adds	r1, r7, r4
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2201      	movs	r2, #1
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff ffbf 	bl	8000bfc <flashReadData>
	value = Bytes2float(buffer);
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff ff67 	bl	8000b54 <Bytes2float>
 8000c86:	1c03      	adds	r3, r0, #0
 8000c88:	60fb      	str	r3, [r7, #12]
	return value;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	1c18      	adds	r0, r3, #0
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b005      	add	sp, #20
 8000c92:	bd90      	pop	{r4, r7, pc}

08000c94 <deletePage>:
uint32_t deletePage(){
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b087      	sub	sp, #28
 8000c98:	af00      	add	r7, sp, #0
	static FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t PAGEError;

		  /* Unlock the Flash to enable the flash control register access *************/
		   HAL_FLASH_Unlock();
 8000c9a:	f002 f875 	bl	8002d88 <HAL_FLASH_Unlock>

		   /* Erase the user Flash area*/
		  uint32_t StartPageAddress = 0x08003F80UL;
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <deletePage+0x7c>)
 8000ca0:	617b      	str	r3, [r7, #20]
		  uint8_t numberofwords = 8 ;
 8000ca2:	2413      	movs	r4, #19
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	701a      	strb	r2, [r3, #0]
		  uint32_t StartPage = getPage(StartPageAddress);
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff feff 	bl	8000ab0 <getPage>
 8000cb2:	0003      	movs	r3, r0
 8000cb4:	60fb      	str	r3, [r7, #12]
		  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	189b      	adds	r3, r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
		  uint32_t EndPage = getPage(EndPageAdress);
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f7ff fef2 	bl	8000ab0 <getPage>
 8000ccc:	0003      	movs	r3, r0
 8000cce:	607b      	str	r3, [r7, #4]

		   /* Fill EraseInit structure*/
		   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000cd0:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <deletePage+0x80>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
		   EraseInitStruct.PageAddress = StartPage;
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <deletePage+0x80>)
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	605a      	str	r2, [r3, #4]
		   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	09db      	lsrs	r3, r3, #7
 8000ce4:	1c5a      	adds	r2, r3, #1
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <deletePage+0x80>)
 8000ce8:	609a      	str	r2, [r3, #8]

		   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000cea:	003a      	movs	r2, r7
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <deletePage+0x80>)
 8000cee:	0011      	movs	r1, r2
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f002 f9c9 	bl	8003088 <HAL_FLASHEx_Erase>
 8000cf6:	1e03      	subs	r3, r0, #0
 8000cf8:	d003      	beq.n	8000d02 <deletePage+0x6e>
		   {
		     /*Error occurred while page erase.*/
			  return HAL_FLASH_GetError ();
 8000cfa:	f002 f8ad 	bl	8002e58 <HAL_FLASH_GetError>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	e002      	b.n	8000d08 <deletePage+0x74>
		   }
		   HAL_FLASH_Lock();
 8000d02:	f002 f895 	bl	8002e30 <HAL_FLASH_Lock>
		   return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b007      	add	sp, #28
 8000d0e:	bd90      	pop	{r4, r7, pc}
 8000d10:	08003f80 	.word	0x08003f80
 8000d14:	2000008c 	.word	0x2000008c

08000d18 <RFM95_Init>:
 */

#include <lora.h>
#include <stdio.h>
RFM95_StatusTypedef RFM95_Init(RFM95_HandleTypedef *RFM_Init)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	/*Reset Module*/
	RFM95_reset(RFM_Init);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 f886 	bl	8000e34 <RFM95_reset>

	/*Into Sleep Mode*/
	if (RFM95_setMode(RFM_Init, SLEEP_MODE | LORA_MODE) == RFM95_ERROR)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2180      	movs	r1, #128	; 0x80
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f000 f8bb 	bl	8000ea8 <RFM95_setMode>
 8000d32:	1e03      	subs	r3, r0, #0
 8000d34:	d101      	bne.n	8000d3a <RFM95_Init+0x22>
		return RFM95_ERROR;
 8000d36:	2300      	movs	r3, #0
 8000d38:	e078      	b.n	8000e2c <RFM95_Init+0x114>

	/*Enable ExplicitHeaderMode */
	if (RFM95_setExplicitHeaderMode(RFM_Init) == RFM95_ERROR)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f000 f8ea 	bl	8000f16 <RFM95_setExplicitHeaderMode>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d101      	bne.n	8000d4a <RFM95_Init+0x32>
		return RFM95_ERROR;
 8000d46:	2300      	movs	r3, #0
 8000d48:	e070      	b.n	8000e2c <RFM95_Init+0x114>

	/*Configure Frequency*/
	if (RFM95_setFrequency(RFM_Init) != RFM95_OK)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f000 f913 	bl	8000f78 <RFM95_setFrequency>
 8000d52:	0003      	movs	r3, r0
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d001      	beq.n	8000d5c <RFM95_Init+0x44>
		return RFM95_ERROR;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	e067      	b.n	8000e2c <RFM95_Init+0x114>

	/*Reset base addr */
	if (RFM95_resetBaseAddr(RFM_Init) == RFM95_ERROR)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f000 f93c 	bl	8000fdc <RFM95_resetBaseAddr>
 8000d64:	1e03      	subs	r3, r0, #0
 8000d66:	d101      	bne.n	8000d6c <RFM95_Init+0x54>
		return RFM95_ERROR;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	e05f      	b.n	8000e2c <RFM95_Init+0x114>

	/*Set LNA*/
	if (RFM95_setLNA(RFM_Init) != RFM95_OK)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 f94e 	bl	8001010 <RFM95_setLNA>
 8000d74:	0003      	movs	r3, r0
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d001      	beq.n	8000d7e <RFM95_Init+0x66>
		return RFM95_ERROR;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e056      	b.n	8000e2c <RFM95_Init+0x114>

	/*Set power for Tx*/
	if (RFM95_setPower(RFM_Init, PW_PABOOST) != RFM95_OK)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	0018      	movs	r0, r3
 8000d84:	f000 f95d 	bl	8001042 <RFM95_setPower>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d001      	beq.n	8000d92 <RFM95_Init+0x7a>
		return RFM95_ERROR;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e04c      	b.n	8000e2c <RFM95_Init+0x114>

	/*Set BandWidth*/
	if (RFM95_setBandWidth(RFM_Init) != RFM95_OK)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	0018      	movs	r0, r3
 8000d96:	f000 f99d 	bl	80010d4 <RFM95_setBandWidth>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d001      	beq.n	8000da4 <RFM95_Init+0x8c>
		return RFM95_ERROR;
 8000da0:	2300      	movs	r3, #0
 8000da2:	e043      	b.n	8000e2c <RFM95_Init+0x114>

	/*Set SpredingFactor*/
	if (RFM95_setSpredingFactor(RFM_Init) != RFM95_OK)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 f9c5 	bl	8001136 <RFM95_setSpredingFactor>
 8000dac:	0003      	movs	r3, r0
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d001      	beq.n	8000db6 <RFM95_Init+0x9e>
		return RFM95_ERROR;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e03a      	b.n	8000e2c <RFM95_Init+0x114>

	/*Set AGC*/
	if (RFM95_enableAGC(RFM_Init) != RFM95_OK)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	0018      	movs	r0, r3
 8000dba:	f000 fd80 	bl	80018be <RFM95_enableAGC>
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d001      	beq.n	8000dc8 <RFM95_Init+0xb0>
		return RFM95_ERROR;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e031      	b.n	8000e2c <RFM95_Init+0x114>

	/*Check LDRO after set BW and SF*/
	if (RFM95_checkLDRO(RFM_Init) != RFM95_OK)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f000 fda0 	bl	8001910 <RFM95_checkLDRO>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d001      	beq.n	8000dda <RFM95_Init+0xc2>
		return RFM95_ERROR;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e028      	b.n	8000e2c <RFM95_Init+0x114>

	/*Set CodingRate*/
	if (RFM95_setCodingRate(RFM_Init) != RFM95_OK)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f000 fa50 	bl	8001282 <RFM95_setCodingRate>
 8000de2:	0003      	movs	r3, r0
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d001      	beq.n	8000dec <RFM95_Init+0xd4>
		return RFM95_ERROR;
 8000de8:	2300      	movs	r3, #0
 8000dea:	e01f      	b.n	8000e2c <RFM95_Init+0x114>

	/*Set reamble*/
	if (RFM95_setPreamble(RFM_Init) != RFM95_OK)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	0018      	movs	r0, r3
 8000df0:	f000 fa78 	bl	80012e4 <RFM95_setPreamble>
 8000df4:	0003      	movs	r3, r0
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d001      	beq.n	8000dfe <RFM95_Init+0xe6>
		return RFM95_ERROR;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e016      	b.n	8000e2c <RFM95_Init+0x114>

	/*Set timeout*/
	if (RFM95_setTimeout(RFM_Init) != RFM95_OK)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	0018      	movs	r0, r3
 8000e02:	f000 fb8f 	bl	8001524 <RFM95_setTimeout>
 8000e06:	0003      	movs	r3, r0
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d001      	beq.n	8000e10 <RFM95_Init+0xf8>
		return RFM95_ERROR;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e00d      	b.n	8000e2c <RFM95_Init+0x114>

	RFM95_mappingDIO0(RFM_Init);    //rx done
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	0018      	movs	r0, r3
 8000e14:	f000 f83a 	bl	8000e8c <RFM95_mappingDIO0>

	/*Set Stanby Mode*/
	if (RFM95_setMode(RFM_Init, STDBY_MODE | LORA_MODE) == RFM95_ERROR)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2181      	movs	r1, #129	; 0x81
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f000 f843 	bl	8000ea8 <RFM95_setMode>
 8000e22:	1e03      	subs	r3, r0, #0
 8000e24:	d101      	bne.n	8000e2a <RFM95_Init+0x112>
		return RFM95_ERROR;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e000      	b.n	8000e2c <RFM95_Init+0x114>

	return RFM95_OK;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b002      	add	sp, #8
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <RFM95_reset>:

void RFM95_reset(RFM95_HandleTypedef *RFM_Init)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(RFM_Init->Module.Reset.Port, RFM_Init->Module.Reset.Pin,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6818      	ldr	r0, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	889b      	ldrh	r3, [r3, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	0019      	movs	r1, r3
 8000e48:	f002 fb24 	bl	8003494 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	HAL_Delay(50);
 8000e4c:	2032      	movs	r0, #50	; 0x32
 8000e4e:	f001 fe5d 	bl	8002b0c <HAL_Delay>

	HAL_GPIO_WritePin(RFM_Init->Module.Reset.Port, RFM_Init->Module.Reset.Pin,
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6818      	ldr	r0, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	889b      	ldrh	r3, [r3, #4]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	f002 fb19 	bl	8003494 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	HAL_Delay(10);
 8000e62:	200a      	movs	r0, #10
 8000e64:	f001 fe52 	bl	8002b0c <HAL_Delay>
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b002      	add	sp, #8
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <RFM95_enableReceive>:

RFM95_StatusTypedef RFM95_enableReceive(RFM95_HandleTypedef *RFM_Init)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	return RFM95_setMode(RFM_Init, RXCONTINUOUS_MODE | LORA_MODE);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2185      	movs	r1, #133	; 0x85
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f000 f813 	bl	8000ea8 <RFM95_setMode>
 8000e82:	0003      	movs	r3, r0
}
 8000e84:	0018      	movs	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b002      	add	sp, #8
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <RFM95_mappingDIO0>:
void RFM95_mappingDIO0(RFM95_HandleTypedef *RFM_Init)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	RFM95_writeByteRes(RFM_Init, LR_REG_DIOMAPPING1, (uint8_t) 0x3F);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	223f      	movs	r2, #63	; 0x3f
 8000e98:	2140      	movs	r1, #64	; 0x40
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 fc56 	bl	800174c <RFM95_writeByteRes>
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b002      	add	sp, #8
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <RFM95_setMode>:
RFM95_StatusTypedef RFM95_setMode(RFM95_HandleTypedef *RFM_Init, uint8_t Mode)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	000a      	movs	r2, r1
 8000eb2:	1cfb      	adds	r3, r7, #3
 8000eb4:	701a      	strb	r2, [r3, #0]
	uint8_t buffer = 0;
 8000eb6:	210e      	movs	r1, #14
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
	uint8_t dataWrite = 0;
 8000ebe:	230f      	movs	r3, #15
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]

	if (RFM95_readByteRes(RFM_Init, LR_REG_OPMODE, &buffer) != RFM95_OK)
 8000ec6:	187a      	adds	r2, r7, r1
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2101      	movs	r1, #1
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f000 fb90 	bl	80015f2 <RFM95_readByteRes>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d001      	beq.n	8000edc <RFM95_setMode+0x34>
	{
		return RFM95_ERROR;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e018      	b.n	8000f0e <RFM95_setMode+0x66>
	}
	else
	{
		dataWrite = (uint8_t) ((Mode) | (buffer & RESET_MODE));
 8000edc:	230e      	movs	r3, #14
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2207      	movs	r2, #7
 8000ee4:	4393      	bics	r3, r2
 8000ee6:	b2d9      	uxtb	r1, r3
 8000ee8:	200f      	movs	r0, #15
 8000eea:	183b      	adds	r3, r7, r0
 8000eec:	1cfa      	adds	r2, r7, #3
 8000eee:	7812      	ldrb	r2, [r2, #0]
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	701a      	strb	r2, [r3, #0]

		if (RFM95_writeByteRes(RFM_Init, LR_REG_OPMODE, dataWrite) != RFM95_OK)
 8000ef4:	183b      	adds	r3, r7, r0
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2101      	movs	r1, #1
 8000efc:	0018      	movs	r0, r3
 8000efe:	f000 fc25 	bl	800174c <RFM95_writeByteRes>
 8000f02:	0003      	movs	r3, r0
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d001      	beq.n	8000f0c <RFM95_setMode+0x64>
		{
			return RFM95_ERROR;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	e000      	b.n	8000f0e <RFM95_setMode+0x66>
		}
		else
		{
			return RFM95_OK;
 8000f0c:	2301      	movs	r3, #1
		}
	}

}
 8000f0e:	0018      	movs	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b004      	add	sp, #16
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <RFM95_setExplicitHeaderMode>:

RFM95_StatusTypedef RFM95_setExplicitHeaderMode(RFM95_HandleTypedef *RFM_Init)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b084      	sub	sp, #16
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
	uint8_t dataWrite = 0;
 8000f1e:	230f      	movs	r3, #15
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
	uint8_t buffer = 0;
 8000f26:	210e      	movs	r1, #14
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]

	if (RFM95_readByteRes(RFM_Init, LR_REG_MODEMCONFIG1, &buffer) != RFM95_OK)
 8000f2e:	187a      	adds	r2, r7, r1
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	211d      	movs	r1, #29
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 fb5c 	bl	80015f2 <RFM95_readByteRes>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d001      	beq.n	8000f44 <RFM95_setExplicitHeaderMode+0x2e>
	{
		return RFM95_ERROR;
 8000f40:	2300      	movs	r3, #0
 8000f42:	e014      	b.n	8000f6e <RFM95_setExplicitHeaderMode+0x58>
	}
	else
	{
		dataWrite = (buffer & EN_EXPLICITHEADERMODE);
 8000f44:	230e      	movs	r3, #14
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	781a      	ldrb	r2, [r3, #0]
 8000f4a:	200f      	movs	r0, #15
 8000f4c:	183b      	adds	r3, r7, r0
 8000f4e:	2101      	movs	r1, #1
 8000f50:	438a      	bics	r2, r1
 8000f52:	701a      	strb	r2, [r3, #0]

		if (RFM95_writeByteRes(RFM_Init, LR_REG_MODEMCONFIG1, dataWrite)
 8000f54:	183b      	adds	r3, r7, r0
 8000f56:	781a      	ldrb	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	211d      	movs	r1, #29
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f000 fbf5 	bl	800174c <RFM95_writeByteRes>
 8000f62:	0003      	movs	r3, r0
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d001      	beq.n	8000f6c <RFM95_setExplicitHeaderMode+0x56>
				!= RFM95_OK)
		{
			return RFM95_ERROR;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e000      	b.n	8000f6e <RFM95_setExplicitHeaderMode+0x58>
		}
		else
		{
			return RFM95_OK;
 8000f6c:	2301      	movs	r3, #1
		}
	}
}
 8000f6e:	0018      	movs	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b004      	add	sp, #16
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <RFM95_setFrequency>:

RFM95_StatusTypedef RFM95_setFrequency(RFM95_HandleTypedef *RFM_Init)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	uint32_t result = (RFM_Init->Frequency << 19) >> 5;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	8a9b      	ldrh	r3, [r3, #20]
 8000f84:	04db      	lsls	r3, r3, #19
 8000f86:	115b      	asrs	r3, r3, #5
 8000f88:	60fb      	str	r3, [r7, #12]

	uint8_t freq[3] = { 0 };
 8000f8a:	2008      	movs	r0, #8
 8000f8c:	183b      	adds	r3, r7, r0
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <RFM95_setFrequency+0x60>)
 8000f90:	8812      	ldrh	r2, [r2, #0]
 8000f92:	801a      	strh	r2, [r3, #0]
 8000f94:	2202      	movs	r2, #2
 8000f96:	2100      	movs	r1, #0
 8000f98:	5499      	strb	r1, [r3, r2]

	freq[0] = (uint8_t) (result >> 16);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	0c1b      	lsrs	r3, r3, #16
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	183b      	adds	r3, r7, r0
 8000fa2:	701a      	strb	r2, [r3, #0]

	freq[1] = (uint8_t) (result >> 8);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	183b      	adds	r3, r7, r0
 8000fac:	705a      	strb	r2, [r3, #1]

	freq[2] = (uint8_t) (result >> 0);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	183b      	adds	r3, r7, r0
 8000fb4:	709a      	strb	r2, [r3, #2]

	if (RFM95_writeBurstRes(RFM_Init, LR_REG_FRFMSB, freq, sizeof(freq))
 8000fb6:	183a      	adds	r2, r7, r0
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	2303      	movs	r3, #3
 8000fbc:	2106      	movs	r1, #6
 8000fbe:	f000 fb52 	bl	8001666 <RFM95_writeBurstRes>
 8000fc2:	0003      	movs	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d001      	beq.n	8000fcc <RFM95_setFrequency+0x54>
			!= RFM95_OK)
	{
		return RFM95_ERROR;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	e000      	b.n	8000fce <RFM95_setFrequency+0x56>
	}
	else
	{
		return RFM95_OK;
 8000fcc:	2301      	movs	r3, #1
	}
}
 8000fce:	0018      	movs	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b004      	add	sp, #16
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	08007d64 	.word	0x08007d64

08000fdc <RFM95_resetBaseAddr>:

RFM95_StatusTypedef RFM95_resetBaseAddr(RFM95_HandleTypedef *RFM_Init)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	if (RFM95_writeByteRes(RFM_Init, LR_REG_FIFOTXBASEADDR,
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	210e      	movs	r1, #14
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 fbae 	bl	800174c <RFM95_writeByteRes>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d001      	beq.n	8000ffa <RFM95_resetBaseAddr+0x1e>
			(uint8_t) ADD_RESET_TX) != RFM95_OK)
	{
		return RFM95_ERROR;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e006      	b.n	8001008 <RFM95_resetBaseAddr+0x2c>
	}
	else {
		return RFM95_writeByteRes(RFM_Init, LR_REG_FIFORXBASEADDR,
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	210f      	movs	r1, #15
 8001000:	0018      	movs	r0, r3
 8001002:	f000 fba3 	bl	800174c <RFM95_writeByteRes>
 8001006:	0003      	movs	r3, r0
//	}
//	else
//	{
//		return RFM95_OK;
//	}
}
 8001008:	0018      	movs	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	b002      	add	sp, #8
 800100e:	bd80      	pop	{r7, pc}

08001010 <RFM95_setLNA>:

RFM95_StatusTypedef RFM95_setLNA(RFM95_HandleTypedef *RFM_Init)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	uint8_t dataWrite = (uint8_t) ((RFM_Init->LNA << 5) | BOOST_ON);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7f1b      	ldrb	r3, [r3, #28]
 800101c:	015b      	lsls	r3, r3, #5
 800101e:	b2da      	uxtb	r2, r3
 8001020:	200f      	movs	r0, #15
 8001022:	183b      	adds	r3, r7, r0
 8001024:	2103      	movs	r1, #3
 8001026:	430a      	orrs	r2, r1
 8001028:	701a      	strb	r2, [r3, #0]

	return RFM95_writeByteRes(RFM_Init, LR_REG_LNA, dataWrite);
 800102a:	183b      	adds	r3, r7, r0
 800102c:	781a      	ldrb	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	210c      	movs	r1, #12
 8001032:	0018      	movs	r0, r3
 8001034:	f000 fb8a 	bl	800174c <RFM95_writeByteRes>
 8001038:	0003      	movs	r3, r0
//	}
//	else
//	{
//		return RFM95_OK;
//	}
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	b004      	add	sp, #16
 8001040:	bd80      	pop	{r7, pc}

08001042 <RFM95_setPower>:

RFM95_StatusTypedef RFM95_setPower(RFM95_HandleTypedef *RFM_Init,
		uint8_t powerMode)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	000a      	movs	r2, r1
 800104c:	1cfb      	adds	r3, r7, #3
 800104e:	701a      	strb	r2, [r3, #0]
	uint8_t dataWrite = 0;
 8001050:	230f      	movs	r3, #15
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]

	if (powerMode == PW_PABOOST)
 8001058:	1cfb      	adds	r3, r7, #3
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b80      	cmp	r3, #128	; 0x80
 800105e:	d11f      	bne.n	80010a0 <RFM95_setPower+0x5e>
	{
		/*PA_BOOST*/
		if (RFM_Init->Power > 17)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7e5b      	ldrb	r3, [r3, #25]
 8001064:	2b11      	cmp	r3, #17
 8001066:	d903      	bls.n	8001070 <RFM95_setPower+0x2e>
		{
			RFM_Init->Power = 17;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2211      	movs	r2, #17
 800106c:	765a      	strb	r2, [r3, #25]
 800106e:	e006      	b.n	800107e <RFM95_setPower+0x3c>
		}
		else if (RFM_Init->Power < 2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7e5b      	ldrb	r3, [r3, #25]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d802      	bhi.n	800107e <RFM95_setPower+0x3c>
		{
			RFM_Init->Power = 2;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2202      	movs	r2, #2
 800107c:	765a      	strb	r2, [r3, #25]
		}
		dataWrite = (PW_PABOOST | RFM_Init->Power);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	7e5a      	ldrb	r2, [r3, #25]
 8001082:	200f      	movs	r0, #15
 8001084:	183b      	adds	r3, r7, r0
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	4249      	negs	r1, r1
 800108a:	430a      	orrs	r2, r1
 800108c:	701a      	strb	r2, [r3, #0]
		return RFM95_writeByteRes(RFM_Init, LR_REG_PACONFIG, dataWrite);
 800108e:	183b      	adds	r3, r7, r0
 8001090:	781a      	ldrb	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2109      	movs	r1, #9
 8001096:	0018      	movs	r0, r3
 8001098:	f000 fb58 	bl	800174c <RFM95_writeByteRes>
 800109c:	0003      	movs	r3, r0
 800109e:	e015      	b.n	80010cc <RFM95_setPower+0x8a>
//		}
	}
	else
	{
		/*RFO*/
		if (RFM_Init->Power > 14)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7e5b      	ldrb	r3, [r3, #25]
 80010a4:	2b0e      	cmp	r3, #14
 80010a6:	d902      	bls.n	80010ae <RFM95_setPower+0x6c>
		{
			RFM_Init->Power = 14;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	220e      	movs	r2, #14
 80010ac:	765a      	strb	r2, [r3, #25]
		}
		else if (RFM_Init->Power < 0)
		{
			RFM_Init->Power = 0;
		}
		dataWrite = (PW_RFO | RFM_Init->Power);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7e5a      	ldrb	r2, [r3, #25]
 80010b2:	200f      	movs	r0, #15
 80010b4:	183b      	adds	r3, r7, r0
 80010b6:	2170      	movs	r1, #112	; 0x70
 80010b8:	430a      	orrs	r2, r1
 80010ba:	701a      	strb	r2, [r3, #0]
		return RFM95_writeByteRes(RFM_Init, LR_REG_PACONFIG, dataWrite);
 80010bc:	183b      	adds	r3, r7, r0
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2109      	movs	r1, #9
 80010c4:	0018      	movs	r0, r3
 80010c6:	f000 fb41 	bl	800174c <RFM95_writeByteRes>
 80010ca:	0003      	movs	r3, r0
//		else
//		{
//			return RFM95_OK;
//		}
	}
}
 80010cc:	0018      	movs	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b004      	add	sp, #16
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <RFM95_setBandWidth>:

RFM95_StatusTypedef RFM95_setBandWidth(RFM95_HandleTypedef *RFM_Init)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	uint8_t buffer = 0;
 80010dc:	210e      	movs	r1, #14
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
	uint8_t dataWrite = 0;
 80010e4:	230f      	movs	r3, #15
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
	if (RFM95_readByteRes(RFM_Init, LR_REG_MODEMCONFIG1, &buffer) != RFM95_OK)
 80010ec:	187a      	adds	r2, r7, r1
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	211d      	movs	r1, #29
 80010f2:	0018      	movs	r0, r3
 80010f4:	f000 fa7d 	bl	80015f2 <RFM95_readByteRes>
 80010f8:	0003      	movs	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d001      	beq.n	8001102 <RFM95_setBandWidth+0x2e>
	{
		return RFM95_ERROR;
 80010fe:	2300      	movs	r3, #0
 8001100:	e015      	b.n	800112e <RFM95_setBandWidth+0x5a>
	}
	else
	{
		dataWrite = (uint8_t) (((RFM_Init->BandWidth) << 4)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7ddb      	ldrb	r3, [r3, #23]
 8001106:	011b      	lsls	r3, r3, #4
 8001108:	b2d9      	uxtb	r1, r3
				| (buffer & RESET_BANDWIDTH));
 800110a:	230e      	movs	r3, #14
 800110c:	18fb      	adds	r3, r7, r3
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	220f      	movs	r2, #15
 8001112:	4013      	ands	r3, r2
 8001114:	b2da      	uxtb	r2, r3
		dataWrite = (uint8_t) (((RFM_Init->BandWidth) << 4)
 8001116:	200f      	movs	r0, #15
 8001118:	183b      	adds	r3, r7, r0
 800111a:	430a      	orrs	r2, r1
 800111c:	701a      	strb	r2, [r3, #0]

		return RFM95_writeByteRes(RFM_Init, LR_REG_MODEMCONFIG1, dataWrite);
 800111e:	183b      	adds	r3, r7, r0
 8001120:	781a      	ldrb	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	211d      	movs	r1, #29
 8001126:	0018      	movs	r0, r3
 8001128:	f000 fb10 	bl	800174c <RFM95_writeByteRes>
 800112c:	0003      	movs	r3, r0
//		else
//		{
//			return RFM95_OK;
//		}
	}
}
 800112e:	0018      	movs	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	b004      	add	sp, #16
 8001134:	bd80      	pop	{r7, pc}

08001136 <RFM95_setSpredingFactor>:

RFM95_StatusTypedef RFM95_setSpredingFactor(RFM95_HandleTypedef *RFM_Init)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
	/*The spreading factor controls the chirp rate, and thus controls the speed of data transmission.
	 *Lower spreading factors mean faster chirps and therefore a higher data transmission rate.
	 *Lower For every increase in spreading factor, the chirp sweep rate is halved, and so the data transmission rate is halved.*/
	uint8_t buffer = 0;
 800113e:	210e      	movs	r1, #14
 8001140:	187b      	adds	r3, r7, r1
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
	uint8_t dataWrite = 0;
 8001146:	230f      	movs	r3, #15
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
	if (RFM95_readByteRes(RFM_Init, LR_REG_MODEMCONFIG2, &buffer) != RFM95_OK)
 800114e:	187a      	adds	r2, r7, r1
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	211e      	movs	r1, #30
 8001154:	0018      	movs	r0, r3
 8001156:	f000 fa4c 	bl	80015f2 <RFM95_readByteRes>
 800115a:	0003      	movs	r3, r0
 800115c:	2b01      	cmp	r3, #1
 800115e:	d001      	beq.n	8001164 <RFM95_setSpredingFactor+0x2e>
	{
		return RFM95_ERROR;
 8001160:	2300      	movs	r3, #0
 8001162:	e08a      	b.n	800127a <RFM95_setSpredingFactor+0x144>
	}
	else
	{
		if (RFM_Init->SpredingFactor == SF6)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7d9b      	ldrb	r3, [r3, #22]
 8001168:	2b06      	cmp	r3, #6
 800116a:	d15a      	bne.n	8001222 <RFM95_setSpredingFactor+0xec>

			/* Set SpreadingFactor = 6 in RegModemConfig2
			 * The header must be set to Implicit mode
			 * Write bits 2-0 of register address 0x31 to value "0b101"
			 * Write register address 0x37 to value 0x0C */
			dataWrite = (uint8_t) ((RFM_Init->SpredingFactor << 4)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7d9b      	ldrb	r3, [r3, #22]
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	b2d9      	uxtb	r1, r3
					| (buffer & RESET_SF));
 8001174:	230e      	movs	r3, #14
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	220f      	movs	r2, #15
 800117c:	4013      	ands	r3, r2
 800117e:	b2da      	uxtb	r2, r3
			dataWrite = (uint8_t) ((RFM_Init->SpredingFactor << 4)
 8001180:	200f      	movs	r0, #15
 8001182:	183b      	adds	r3, r7, r0
 8001184:	430a      	orrs	r2, r1
 8001186:	701a      	strb	r2, [r3, #0]
			if (RFM95_writeByteRes(RFM_Init, LR_REG_MODEMCONFIG2, dataWrite)
 8001188:	183b      	adds	r3, r7, r0
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	211e      	movs	r1, #30
 8001190:	0018      	movs	r0, r3
 8001192:	f000 fadb 	bl	800174c <RFM95_writeByteRes>
 8001196:	0003      	movs	r3, r0
 8001198:	2b01      	cmp	r3, #1
 800119a:	d001      	beq.n	80011a0 <RFM95_setSpredingFactor+0x6a>
					!= RFM95_OK)
			{
				return RFM95_ERROR;
 800119c:	2300      	movs	r3, #0
 800119e:	e06c      	b.n	800127a <RFM95_setSpredingFactor+0x144>
			}
			else
			{
				if (RFM95_readByteRes(RFM_Init, LR_REG_MODEMCONFIG1, &buffer)
 80011a0:	230e      	movs	r3, #14
 80011a2:	18fa      	adds	r2, r7, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	211d      	movs	r1, #29
 80011a8:	0018      	movs	r0, r3
 80011aa:	f000 fa22 	bl	80015f2 <RFM95_readByteRes>
 80011ae:	0003      	movs	r3, r0
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d001      	beq.n	80011b8 <RFM95_setSpredingFactor+0x82>
						!= RFM95_OK)
				{
					return RFM95_ERROR;
 80011b4:	2300      	movs	r3, #0
 80011b6:	e060      	b.n	800127a <RFM95_setSpredingFactor+0x144>
				}
				else
				{
					if (RFM95_setImplicitHeaderMode(RFM_Init) == RFM95_ERROR)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	0018      	movs	r0, r3
 80011bc:	f000 f8b1 	bl	8001322 <RFM95_setImplicitHeaderMode>
 80011c0:	1e03      	subs	r3, r0, #0
 80011c2:	d101      	bne.n	80011c8 <RFM95_setSpredingFactor+0x92>
					{
						return RFM95_ERROR;
 80011c4:	2300      	movs	r3, #0
 80011c6:	e058      	b.n	800127a <RFM95_setSpredingFactor+0x144>
					}
					else
					{
						if (RFM95_readByteRes(RFM_Init, LR_REG_DETECTOPTIMIZE,
 80011c8:	230e      	movs	r3, #14
 80011ca:	18fa      	adds	r2, r7, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2131      	movs	r1, #49	; 0x31
 80011d0:	0018      	movs	r0, r3
 80011d2:	f000 fa0e 	bl	80015f2 <RFM95_readByteRes>
 80011d6:	0003      	movs	r3, r0
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d001      	beq.n	80011e0 <RFM95_setSpredingFactor+0xaa>
								&buffer) != RFM95_OK)
						{
							return RFM95_ERROR;
 80011dc:	2300      	movs	r3, #0
 80011de:	e04c      	b.n	800127a <RFM95_setSpredingFactor+0x144>
						}
						else
						{
							dataWrite = (uint8_t) (0x05 | (buffer & 0xF8));
 80011e0:	230e      	movs	r3, #14
 80011e2:	18fb      	adds	r3, r7, r3
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b25b      	sxtb	r3, r3
 80011e8:	2207      	movs	r2, #7
 80011ea:	4393      	bics	r3, r2
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	2205      	movs	r2, #5
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b25a      	sxtb	r2, r3
 80011f4:	210f      	movs	r1, #15
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	701a      	strb	r2, [r3, #0]
							if (RFM95_writeByteRes(RFM_Init,
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	781a      	ldrb	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2131      	movs	r1, #49	; 0x31
 8001202:	0018      	movs	r0, r3
 8001204:	f000 faa2 	bl	800174c <RFM95_writeByteRes>
 8001208:	0003      	movs	r3, r0
 800120a:	2b01      	cmp	r3, #1
 800120c:	d001      	beq.n	8001212 <RFM95_setSpredingFactor+0xdc>
							LR_REG_DETECTOPTIMIZE, dataWrite) != RFM95_OK)
							{
								return RFM95_ERROR;
 800120e:	2300      	movs	r3, #0
 8001210:	e033      	b.n	800127a <RFM95_setSpredingFactor+0x144>
							}
							else
							{
								return RFM95_writeByteRes(RFM_Init,
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	220c      	movs	r2, #12
 8001216:	2137      	movs	r1, #55	; 0x37
 8001218:	0018      	movs	r0, r3
 800121a:	f000 fa97 	bl	800174c <RFM95_writeByteRes>
 800121e:	0003      	movs	r3, r0
 8001220:	e02b      	b.n	800127a <RFM95_setSpredingFactor+0x144>
			}

		}
		else
		{
			if (RFM95_writeByteRes(RFM_Init, LR_REG_DETECTOPTIMIZE, 0xC3)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	22c3      	movs	r2, #195	; 0xc3
 8001226:	2131      	movs	r1, #49	; 0x31
 8001228:	0018      	movs	r0, r3
 800122a:	f000 fa8f 	bl	800174c <RFM95_writeByteRes>
 800122e:	0003      	movs	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	d001      	beq.n	8001238 <RFM95_setSpredingFactor+0x102>
					!= RFM95_OK)
				return RFM95_ERROR;
 8001234:	2300      	movs	r3, #0
 8001236:	e020      	b.n	800127a <RFM95_setSpredingFactor+0x144>
			if (RFM95_writeByteRes(RFM_Init, LR_REG_DETECTIONTHRESHOLD,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	220a      	movs	r2, #10
 800123c:	2137      	movs	r1, #55	; 0x37
 800123e:	0018      	movs	r0, r3
 8001240:	f000 fa84 	bl	800174c <RFM95_writeByteRes>
 8001244:	0003      	movs	r3, r0
 8001246:	2b01      	cmp	r3, #1
 8001248:	d001      	beq.n	800124e <RFM95_setSpredingFactor+0x118>
					(uint8_t) 0x0A) != RFM95_OK)
				return RFM95_ERROR;
 800124a:	2300      	movs	r3, #0
 800124c:	e015      	b.n	800127a <RFM95_setSpredingFactor+0x144>
			dataWrite = (uint8_t) (RFM_Init->SpredingFactor << 4
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7d9b      	ldrb	r3, [r3, #22]
 8001252:	011b      	lsls	r3, r3, #4
 8001254:	b2d9      	uxtb	r1, r3
					| (buffer & RESET_SF));
 8001256:	230e      	movs	r3, #14
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	220f      	movs	r2, #15
 800125e:	4013      	ands	r3, r2
 8001260:	b2da      	uxtb	r2, r3
			dataWrite = (uint8_t) (RFM_Init->SpredingFactor << 4
 8001262:	200f      	movs	r0, #15
 8001264:	183b      	adds	r3, r7, r0
 8001266:	430a      	orrs	r2, r1
 8001268:	701a      	strb	r2, [r3, #0]
			return RFM95_writeByteRes(RFM_Init, LR_REG_MODEMCONFIG2, dataWrite);
 800126a:	183b      	adds	r3, r7, r0
 800126c:	781a      	ldrb	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	211e      	movs	r1, #30
 8001272:	0018      	movs	r0, r3
 8001274:	f000 fa6a 	bl	800174c <RFM95_writeByteRes>
 8001278:	0003      	movs	r3, r0
//			{
//				return RFM95_OK;
//			}
		}
	}
}
 800127a:	0018      	movs	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	b004      	add	sp, #16
 8001280:	bd80      	pop	{r7, pc}

08001282 <RFM95_setCodingRate>:

RFM95_StatusTypedef RFM95_setCodingRate(RFM95_HandleTypedef *RFM_Init)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
	uint8_t buffer = 0;
 800128a:	210e      	movs	r1, #14
 800128c:	187b      	adds	r3, r7, r1
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
	uint8_t dataWrite = 0;
 8001292:	230f      	movs	r3, #15
 8001294:	18fb      	adds	r3, r7, r3
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
	if (RFM95_readByteRes(RFM_Init, LR_REG_MODEMCONFIG1, &buffer) != RFM95_OK)
 800129a:	187a      	adds	r2, r7, r1
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	211d      	movs	r1, #29
 80012a0:	0018      	movs	r0, r3
 80012a2:	f000 f9a6 	bl	80015f2 <RFM95_readByteRes>
 80012a6:	0003      	movs	r3, r0
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d001      	beq.n	80012b0 <RFM95_setCodingRate+0x2e>
	{
		return RFM95_ERROR;
 80012ac:	2300      	movs	r3, #0
 80012ae:	e015      	b.n	80012dc <RFM95_setCodingRate+0x5a>
	}
	else
	{
		dataWrite =
				(uint8_t) ((RFM_Init->CodingRate << 1) | (buffer & RESET_CR));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7e1b      	ldrb	r3, [r3, #24]
 80012b4:	18db      	adds	r3, r3, r3
 80012b6:	b2d9      	uxtb	r1, r3
 80012b8:	230e      	movs	r3, #14
 80012ba:	18fb      	adds	r3, r7, r3
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	220e      	movs	r2, #14
 80012c0:	4393      	bics	r3, r2
 80012c2:	b2da      	uxtb	r2, r3
		dataWrite =
 80012c4:	200f      	movs	r0, #15
 80012c6:	183b      	adds	r3, r7, r0
 80012c8:	430a      	orrs	r2, r1
 80012ca:	701a      	strb	r2, [r3, #0]
		return RFM95_writeByteRes(RFM_Init, LR_REG_MODEMCONFIG1, dataWrite);
 80012cc:	183b      	adds	r3, r7, r0
 80012ce:	781a      	ldrb	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	211d      	movs	r1, #29
 80012d4:	0018      	movs	r0, r3
 80012d6:	f000 fa39 	bl	800174c <RFM95_writeByteRes>
 80012da:	0003      	movs	r3, r0
//		else
//		{
//			return RFM95_OK;
//		}
	}
}
 80012dc:	0018      	movs	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	b004      	add	sp, #16
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <RFM95_setPreamble>:

RFM95_StatusTypedef RFM95_setPreamble(RFM95_HandleTypedef *RFM_Init)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	uint8_t Prel[2] = { 0 };
 80012ec:	210c      	movs	r1, #12
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	2200      	movs	r2, #0
 80012f2:	801a      	strh	r2, [r3, #0]
	Prel[0] = (uint8_t) (RFM_Init->Preamble >> 8);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	8b5b      	ldrh	r3, [r3, #26]
 80012f8:	0a1b      	lsrs	r3, r3, #8
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	187b      	adds	r3, r7, r1
 8001300:	701a      	strb	r2, [r3, #0]
	Prel[1] = (uint8_t) (RFM_Init->Preamble >> 0);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	8b5b      	ldrh	r3, [r3, #26]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	187b      	adds	r3, r7, r1
 800130a:	705a      	strb	r2, [r3, #1]
	return RFM95_writeBurstRes(RFM_Init, LR_REG_PREAMBLEMSB, Prel, sizeof(Prel));
 800130c:	187a      	adds	r2, r7, r1
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	2302      	movs	r3, #2
 8001312:	2120      	movs	r1, #32
 8001314:	f000 f9a7 	bl	8001666 <RFM95_writeBurstRes>
 8001318:	0003      	movs	r3, r0
//	}
//	else
//	{
//		return RFM95_OK;
//	}
}
 800131a:	0018      	movs	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	b004      	add	sp, #16
 8001320:	bd80      	pop	{r7, pc}

08001322 <RFM95_setImplicitHeaderMode>:

RFM95_StatusTypedef RFM95_setImplicitHeaderMode(RFM95_HandleTypedef *RFM_Init)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b084      	sub	sp, #16
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
	uint8_t dataWrite = 0;
 800132a:	230f      	movs	r3, #15
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
	uint8_t buffer = 0;
 8001332:	210e      	movs	r1, #14
 8001334:	187b      	adds	r3, r7, r1
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
	if (RFM95_readByteRes(RFM_Init, LR_REG_MODEMCONFIG1, &buffer) != RFM95_OK)
 800133a:	187a      	adds	r2, r7, r1
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	211d      	movs	r1, #29
 8001340:	0018      	movs	r0, r3
 8001342:	f000 f956 	bl	80015f2 <RFM95_readByteRes>
 8001346:	0003      	movs	r3, r0
 8001348:	2b01      	cmp	r3, #1
 800134a:	d001      	beq.n	8001350 <RFM95_setImplicitHeaderMode+0x2e>
	{
		return RFM95_ERROR;
 800134c:	2300      	movs	r3, #0
 800134e:	e00f      	b.n	8001370 <RFM95_setImplicitHeaderMode+0x4e>
	}
	else
	{
		dataWrite = (buffer | EN_IMPLICITHEADERMODE);
 8001350:	230e      	movs	r3, #14
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	781a      	ldrb	r2, [r3, #0]
 8001356:	200f      	movs	r0, #15
 8001358:	183b      	adds	r3, r7, r0
 800135a:	2101      	movs	r1, #1
 800135c:	430a      	orrs	r2, r1
 800135e:	701a      	strb	r2, [r3, #0]
		return RFM95_writeByteRes(RFM_Init, LR_REG_MODEMCONFIG1, dataWrite);
 8001360:	183b      	adds	r3, r7, r0
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	211d      	movs	r1, #29
 8001368:	0018      	movs	r0, r3
 800136a:	f000 f9ef 	bl	800174c <RFM95_writeByteRes>
 800136e:	0003      	movs	r3, r0
//		else
//		{
//			return RFM95_OK;
//		}
	}
}
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b004      	add	sp, #16
 8001376:	bd80      	pop	{r7, pc}

08001378 <RFM95_Transmit>:

RFM95_StatusTypedef RFM95_Transmit(RFM95_HandleTypedef *RFM_Init,
		uint8_t *buffer, uint8_t size, uint16_t timeout)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	0019      	movs	r1, r3
 8001384:	1dfb      	adds	r3, r7, #7
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	1c0a      	adds	r2, r1, #0
 800138c:	801a      	strh	r2, [r3, #0]
	uint8_t pAddr = 0;
 800138e:	2316      	movs	r3, #22
 8001390:	18fb      	adds	r3, r7, r3
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
	uint8_t statusIrq = 0;
 8001396:	2315      	movs	r3, #21
 8001398:	18fb      	adds	r3, r7, r3
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
	uint8_t currentMode = 0;
 800139e:	2114      	movs	r1, #20
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]

	if (RFM95_readByteRes(RFM_Init, LR_REG_OPMODE, &currentMode) != RFM95_OK)
 80013a6:	187a      	adds	r2, r7, r1
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2101      	movs	r1, #1
 80013ac:	0018      	movs	r0, r3
 80013ae:	f000 f920 	bl	80015f2 <RFM95_readByteRes>
 80013b2:	0003      	movs	r3, r0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d001      	beq.n	80013bc <RFM95_Transmit+0x44>
	{
		return RFM95_ERROR;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e0af      	b.n	800151c <RFM95_Transmit+0x1a4>
	}

	if (RFM95_setMode(RFM_Init, STDBY_MODE | LORA_MODE) == RFM95_ERROR)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2181      	movs	r1, #129	; 0x81
 80013c0:	0018      	movs	r0, r3
 80013c2:	f7ff fd71 	bl	8000ea8 <RFM95_setMode>
 80013c6:	1e03      	subs	r3, r0, #0
 80013c8:	d101      	bne.n	80013ce <RFM95_Transmit+0x56>
	{
		return RFM95_ERROR;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e0a6      	b.n	800151c <RFM95_Transmit+0x1a4>
	}
	else if (RFM_Init->SpredingFactor == SF6)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	7d9b      	ldrb	r3, [r3, #22]
 80013d2:	2b06      	cmp	r3, #6
 80013d4:	d107      	bne.n	80013e6 <RFM95_Transmit+0x6e>
	{
		if (RFM95_setImplicitHeaderMode(RFM_Init) == RFM95_ERROR)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	0018      	movs	r0, r3
 80013da:	f7ff ffa2 	bl	8001322 <RFM95_setImplicitHeaderMode>
 80013de:	1e03      	subs	r3, r0, #0
 80013e0:	d131      	bne.n	8001446 <RFM95_Transmit+0xce>
		{
			return RFM95_ERROR;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e09a      	b.n	800151c <RFM95_Transmit+0x1a4>
		}
	}
	else if (RFM95_readByteRes(RFM_Init, LR_REG_FIFOTXBASEADDR, &pAddr)
 80013e6:	2316      	movs	r3, #22
 80013e8:	18fa      	adds	r2, r7, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	210e      	movs	r1, #14
 80013ee:	0018      	movs	r0, r3
 80013f0:	f000 f8ff 	bl	80015f2 <RFM95_readByteRes>
 80013f4:	0003      	movs	r3, r0
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d001      	beq.n	80013fe <RFM95_Transmit+0x86>
			!= RFM95_OK)
	{
		return RFM95_ERROR;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e08e      	b.n	800151c <RFM95_Transmit+0x1a4>
	}
	else if (RFM95_writeByteRes(RFM_Init, LR_REG_FIFOADDRPTR, pAddr)
 80013fe:	2316      	movs	r3, #22
 8001400:	18fb      	adds	r3, r7, r3
 8001402:	781a      	ldrb	r2, [r3, #0]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	210d      	movs	r1, #13
 8001408:	0018      	movs	r0, r3
 800140a:	f000 f99f 	bl	800174c <RFM95_writeByteRes>
 800140e:	0003      	movs	r3, r0
 8001410:	2b01      	cmp	r3, #1
 8001412:	d001      	beq.n	8001418 <RFM95_Transmit+0xa0>
			!= RFM95_OK)
	{
		return RFM95_ERROR;
 8001414:	2300      	movs	r3, #0
 8001416:	e081      	b.n	800151c <RFM95_Transmit+0x1a4>

	}
	else if (RFM95_writeByteRes(RFM_Init, LR_REG_PAYLOADLENGTH, 0x00)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	2122      	movs	r1, #34	; 0x22
 800141e:	0018      	movs	r0, r3
 8001420:	f000 f994 	bl	800174c <RFM95_writeByteRes>
 8001424:	0003      	movs	r3, r0
 8001426:	2b01      	cmp	r3, #1
 8001428:	d001      	beq.n	800142e <RFM95_Transmit+0xb6>
			!= RFM95_OK)
	{
		return RFM95_ERROR;
 800142a:	2300      	movs	r3, #0
 800142c:	e076      	b.n	800151c <RFM95_Transmit+0x1a4>
	}
	else if (RFM95_writeByteRes(RFM_Init, LR_REG_PAYLOADLENGTH, size)
 800142e:	1dfb      	adds	r3, r7, #7
 8001430:	781a      	ldrb	r2, [r3, #0]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2122      	movs	r1, #34	; 0x22
 8001436:	0018      	movs	r0, r3
 8001438:	f000 f988 	bl	800174c <RFM95_writeByteRes>
 800143c:	0003      	movs	r3, r0
 800143e:	2b01      	cmp	r3, #1
 8001440:	d001      	beq.n	8001446 <RFM95_Transmit+0xce>
			!= RFM95_OK)
	{
		return RFM95_ERROR;
 8001442:	2300      	movs	r3, #0
 8001444:	e06a      	b.n	800151c <RFM95_Transmit+0x1a4>
	}
	for (uint8_t i = 0; i < size; i++)
 8001446:	2317      	movs	r3, #23
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	e013      	b.n	8001478 <RFM95_Transmit+0x100>
	{
		if (RFM95_writeByteRes(RFM_Init, LR_REG_FIFO, *(buffer++)) != RFM95_OK)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	60ba      	str	r2, [r7, #8]
 8001456:	781a      	ldrb	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2100      	movs	r1, #0
 800145c:	0018      	movs	r0, r3
 800145e:	f000 f975 	bl	800174c <RFM95_writeByteRes>
 8001462:	0003      	movs	r3, r0
 8001464:	2b01      	cmp	r3, #1
 8001466:	d001      	beq.n	800146c <RFM95_Transmit+0xf4>
		{
			return RFM95_ERROR;
 8001468:	2300      	movs	r3, #0
 800146a:	e057      	b.n	800151c <RFM95_Transmit+0x1a4>
	for (uint8_t i = 0; i < size; i++)
 800146c:	2117      	movs	r1, #23
 800146e:	187b      	adds	r3, r7, r1
 8001470:	781a      	ldrb	r2, [r3, #0]
 8001472:	187b      	adds	r3, r7, r1
 8001474:	3201      	adds	r2, #1
 8001476:	701a      	strb	r2, [r3, #0]
 8001478:	2317      	movs	r3, #23
 800147a:	18fa      	adds	r2, r7, r3
 800147c:	1dfb      	adds	r3, r7, #7
 800147e:	7812      	ldrb	r2, [r2, #0]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d3e4      	bcc.n	8001450 <RFM95_Transmit+0xd8>
		}
	}

	if (RFM95_setMode(RFM_Init, TX_MODE | LORA_MODE) == RFM95_ERROR)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2183      	movs	r1, #131	; 0x83
 800148a:	0018      	movs	r0, r3
 800148c:	f7ff fd0c 	bl	8000ea8 <RFM95_setMode>
 8001490:	1e03      	subs	r3, r0, #0
 8001492:	d101      	bne.n	8001498 <RFM95_Transmit+0x120>
	{
		return RFM95_ERROR;
 8001494:	2300      	movs	r3, #0
 8001496:	e041      	b.n	800151c <RFM95_Transmit+0x1a4>
	}
	else
	{
		while (1)
		{
			if (RFM95_readByteRes(RFM_Init, LR_REG_IRQFLAGS, &statusIrq)
 8001498:	2315      	movs	r3, #21
 800149a:	18fa      	adds	r2, r7, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2112      	movs	r1, #18
 80014a0:	0018      	movs	r0, r3
 80014a2:	f000 f8a6 	bl	80015f2 <RFM95_readByteRes>
 80014a6:	0003      	movs	r3, r0
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d001      	beq.n	80014b0 <RFM95_Transmit+0x138>
					!= RFM95_OK)
			{
				return RFM95_ERROR;
 80014ac:	2300      	movs	r3, #0
 80014ae:	e035      	b.n	800151c <RFM95_Transmit+0x1a4>
			}
			else
			{
				if ((statusIrq & TX_FLAGS) != 0)
 80014b0:	2315      	movs	r3, #21
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	001a      	movs	r2, r3
 80014b8:	2308      	movs	r3, #8
 80014ba:	4013      	ands	r3, r2
 80014bc:	d019      	beq.n	80014f2 <RFM95_Transmit+0x17a>
				{
					if (RFM95_writeByteRes(RFM_Init, LR_REG_IRQFLAGS, TX_FLAGS)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2208      	movs	r2, #8
 80014c2:	2112      	movs	r1, #18
 80014c4:	0018      	movs	r0, r3
 80014c6:	f000 f941 	bl	800174c <RFM95_writeByteRes>
 80014ca:	0003      	movs	r3, r0
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d001      	beq.n	80014d4 <RFM95_Transmit+0x15c>
							!= RFM95_OK)
						return RFM95_ERROR;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e023      	b.n	800151c <RFM95_Transmit+0x1a4>
					if (RFM95_writeByteRes(RFM_Init, LR_REG_OPMODE, currentMode)
 80014d4:	2314      	movs	r3, #20
 80014d6:	18fb      	adds	r3, r7, r3
 80014d8:	781a      	ldrb	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2101      	movs	r1, #1
 80014de:	0018      	movs	r0, r3
 80014e0:	f000 f934 	bl	800174c <RFM95_writeByteRes>
 80014e4:	0003      	movs	r3, r0
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d001      	beq.n	80014ee <RFM95_Transmit+0x176>
							!= RFM95_OK)
					{
						return RFM95_ERROR;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e016      	b.n	800151c <RFM95_Transmit+0x1a4>
					}
					return RFM95_OK;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e014      	b.n	800151c <RFM95_Transmit+0x1a4>
				}
				else
				{
					if ((timeout--) <= 0)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	1d3a      	adds	r2, r7, #4
 80014f8:	1e59      	subs	r1, r3, #1
 80014fa:	8011      	strh	r1, [r2, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d109      	bne.n	8001514 <RFM95_Transmit+0x19c>
					{
						RFM95_writeByteRes(RFM_Init, LR_REG_OPMODE,
 8001500:	2314      	movs	r3, #20
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	781a      	ldrb	r2, [r3, #0]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2101      	movs	r1, #1
 800150a:	0018      	movs	r0, r3
 800150c:	f000 f91e 	bl	800174c <RFM95_writeByteRes>
								currentMode);
						return RFM95_TIMEOUT;
 8001510:	2302      	movs	r3, #2
 8001512:	e003      	b.n	800151c <RFM95_Transmit+0x1a4>
					}
				}
			}
			HAL_Delay(1);
 8001514:	2001      	movs	r0, #1
 8001516:	f001 faf9 	bl	8002b0c <HAL_Delay>
			if (RFM95_readByteRes(RFM_Init, LR_REG_IRQFLAGS, &statusIrq)
 800151a:	e7bd      	b.n	8001498 <RFM95_Transmit+0x120>
		}
	}
}
 800151c:	0018      	movs	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	b006      	add	sp, #24
 8001522:	bd80      	pop	{r7, pc}

08001524 <RFM95_setTimeout>:
//		}
	}
}

RFM95_StatusTypedef RFM95_setTimeout(RFM95_HandleTypedef *RFM_Init)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	if (RFM_Init->Timeout <= 255)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	8bdb      	ldrh	r3, [r3, #30]
 8001530:	2bff      	cmp	r3, #255	; 0xff
 8001532:	d809      	bhi.n	8001548 <RFM95_setTimeout+0x24>
	{
		return RFM95_writeByteRes(RFM_Init, LR_REG_SYMBTIMEOUTLSB,
				(uint8_t) (RFM_Init->Timeout));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	8bdb      	ldrh	r3, [r3, #30]
		return RFM95_writeByteRes(RFM_Init, LR_REG_SYMBTIMEOUTLSB,
 8001538:	b2da      	uxtb	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	211f      	movs	r1, #31
 800153e:	0018      	movs	r0, r3
 8001540:	f000 f904 	bl	800174c <RFM95_writeByteRes>
 8001544:	0003      	movs	r3, r0
 8001546:	e03c      	b.n	80015c2 <RFM95_setTimeout+0x9e>
//			return RFM95_OK;
//		}
	}
	else
	{
		uint8_t dataWrite = 0;
 8001548:	230f      	movs	r3, #15
 800154a:	18fb      	adds	r3, r7, r3
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
		uint8_t buffer = 0;
 8001550:	210e      	movs	r1, #14
 8001552:	187b      	adds	r3, r7, r1
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
		if (RFM95_readByteRes(RFM_Init, LR_REG_MODEMCONFIG2, &buffer)
 8001558:	187a      	adds	r2, r7, r1
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	211e      	movs	r1, #30
 800155e:	0018      	movs	r0, r3
 8001560:	f000 f847 	bl	80015f2 <RFM95_readByteRes>
 8001564:	0003      	movs	r3, r0
 8001566:	2b01      	cmp	r3, #1
 8001568:	d001      	beq.n	800156e <RFM95_setTimeout+0x4a>
				!= RFM95_OK)
		{
			return RFM95_ERROR;
 800156a:	2300      	movs	r3, #0
 800156c:	e029      	b.n	80015c2 <RFM95_setTimeout+0x9e>
		}
		dataWrite = (uint8_t) ((RFM_Init->Timeout >> 8) | buffer);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	8bdb      	ldrh	r3, [r3, #30]
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	b29b      	uxth	r3, r3
 8001576:	b2d9      	uxtb	r1, r3
 8001578:	230e      	movs	r3, #14
 800157a:	18fb      	adds	r3, r7, r3
 800157c:	781a      	ldrb	r2, [r3, #0]
 800157e:	200f      	movs	r0, #15
 8001580:	183b      	adds	r3, r7, r0
 8001582:	430a      	orrs	r2, r1
 8001584:	701a      	strb	r2, [r3, #0]
		if (RFM95_writeByteRes(RFM_Init, LR_REG_MODEMCONFIG2, dataWrite)
 8001586:	183b      	adds	r3, r7, r0
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	211e      	movs	r1, #30
 800158e:	0018      	movs	r0, r3
 8001590:	f000 f8dc 	bl	800174c <RFM95_writeByteRes>
 8001594:	0003      	movs	r3, r0
 8001596:	2b01      	cmp	r3, #1
 8001598:	d001      	beq.n	800159e <RFM95_setTimeout+0x7a>
				!= RFM95_OK)
		{
			return RFM95_ERROR;
 800159a:	2300      	movs	r3, #0
 800159c:	e011      	b.n	80015c2 <RFM95_setTimeout+0x9e>
		}
		dataWrite = (uint8_t) (RFM_Init->Timeout >> 0);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	8bda      	ldrh	r2, [r3, #30]
 80015a2:	210f      	movs	r1, #15
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	701a      	strb	r2, [r3, #0]
		if (RFM95_writeByteRes(RFM_Init, LR_REG_SYMBTIMEOUTLSB, dataWrite)
 80015a8:	187b      	adds	r3, r7, r1
 80015aa:	781a      	ldrb	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	211f      	movs	r1, #31
 80015b0:	0018      	movs	r0, r3
 80015b2:	f000 f8cb 	bl	800174c <RFM95_writeByteRes>
 80015b6:	0003      	movs	r3, r0
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d001      	beq.n	80015c0 <RFM95_setTimeout+0x9c>
				!= RFM95_OK)
		{
			return RFM95_ERROR;
 80015bc:	2300      	movs	r3, #0
 80015be:	e000      	b.n	80015c2 <RFM95_setTimeout+0x9e>
		}
		return RFM95_OK;
 80015c0:	2301      	movs	r3, #1
	}
}
 80015c2:	0018      	movs	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b004      	add	sp, #16
 80015c8:	bd80      	pop	{r7, pc}

080015ca <RFM95_setNSS>:

	return valueRSSI;
}

void RFM95_setNSS(RFM95_HandleTypedef *RFM_Init, GPIO_PinState PinState)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	000a      	movs	r2, r1
 80015d4:	1cfb      	adds	r3, r7, #3
 80015d6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RFM_Init->Module.NSS.Port, RFM_Init->Module.NSS.Pin,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6898      	ldr	r0, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	8999      	ldrh	r1, [r3, #12]
 80015e0:	1cfb      	adds	r3, r7, #3
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	001a      	movs	r2, r3
 80015e6:	f001 ff55 	bl	8003494 <HAL_GPIO_WritePin>
			PinState);
}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b002      	add	sp, #8
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <RFM95_readByteRes>:

RFM95_StatusTypedef RFM95_readByteRes(RFM95_HandleTypedef *RFM_Init,
		uint8_t addr, uint8_t *pBuffer)
{
 80015f2:	b590      	push	{r4, r7, lr}
 80015f4:	b085      	sub	sp, #20
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	240b      	movs	r4, #11
 80015fe:	193b      	adds	r3, r7, r4
 8001600:	1c0a      	adds	r2, r1, #0
 8001602:	701a      	strb	r2, [r3, #0]
	RFM95_setNSS(RFM_Init, GPIO_PIN_RESET);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2100      	movs	r1, #0
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff ffde 	bl	80015ca <RFM95_setNSS>

	if (HAL_SPI_Transmit(RFM_Init->Module.SPI, &addr, 1, TIMEOUT) != HAL_OK)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6918      	ldr	r0, [r3, #16]
 8001612:	23fa      	movs	r3, #250	; 0xfa
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	1939      	adds	r1, r7, r4
 8001618:	2201      	movs	r2, #1
 800161a:	f003 fcf1 	bl	8005000 <HAL_SPI_Transmit>
 800161e:	1e03      	subs	r3, r0, #0
 8001620:	d006      	beq.n	8001630 <RFM95_readByteRes+0x3e>
	{
		RFM95_setNSS(RFM_Init, GPIO_PIN_SET);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2101      	movs	r1, #1
 8001626:	0018      	movs	r0, r3
 8001628:	f7ff ffcf 	bl	80015ca <RFM95_setNSS>
		return RFM95_ERROR;
 800162c:	2300      	movs	r3, #0
 800162e:	e016      	b.n	800165e <RFM95_readByteRes+0x6c>
	}
	if (HAL_SPI_Receive(RFM_Init->Module.SPI, pBuffer, 1, TIMEOUT) != HAL_OK)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6918      	ldr	r0, [r3, #16]
 8001634:	23fa      	movs	r3, #250	; 0xfa
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f003 fe3e 	bl	80052bc <HAL_SPI_Receive>
 8001640:	1e03      	subs	r3, r0, #0
 8001642:	d006      	beq.n	8001652 <RFM95_readByteRes+0x60>
	{
		RFM95_setNSS(RFM_Init, GPIO_PIN_SET);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2101      	movs	r1, #1
 8001648:	0018      	movs	r0, r3
 800164a:	f7ff ffbe 	bl	80015ca <RFM95_setNSS>
		return RFM95_ERROR;
 800164e:	2300      	movs	r3, #0
 8001650:	e005      	b.n	800165e <RFM95_readByteRes+0x6c>
	}

	RFM95_setNSS(RFM_Init, GPIO_PIN_SET);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2101      	movs	r1, #1
 8001656:	0018      	movs	r0, r3
 8001658:	f7ff ffb7 	bl	80015ca <RFM95_setNSS>
	return RFM95_OK;
 800165c:	2301      	movs	r3, #1

}
 800165e:	0018      	movs	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	b005      	add	sp, #20
 8001664:	bd90      	pop	{r4, r7, pc}

08001666 <RFM95_writeBurstRes>:
	}
}

RFM95_StatusTypedef RFM95_writeBurstRes(RFM95_HandleTypedef *RFM_Init,
		uint8_t addr, uint8_t *pData, uint8_t size)
{
 8001666:	b590      	push	{r4, r7, lr}
 8001668:	b087      	sub	sp, #28
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	0008      	movs	r0, r1
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	0019      	movs	r1, r3
 8001674:	240b      	movs	r4, #11
 8001676:	193b      	adds	r3, r7, r4
 8001678:	1c02      	adds	r2, r0, #0
 800167a:	701a      	strb	r2, [r3, #0]
 800167c:	200a      	movs	r0, #10
 800167e:	183b      	adds	r3, r7, r0
 8001680:	1c0a      	adds	r2, r1, #0
 8001682:	701a      	strb	r2, [r3, #0]
	addr = (addr | BIT_WRITE);
 8001684:	0021      	movs	r1, r4
 8001686:	187b      	adds	r3, r7, r1
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	4252      	negs	r2, r2
 800168e:	4313      	orrs	r3, r2
 8001690:	b2da      	uxtb	r2, r3
 8001692:	187b      	adds	r3, r7, r1
 8001694:	701a      	strb	r2, [r3, #0]
	if (size > 0 && size <= 1)
 8001696:	183b      	adds	r3, r7, r0
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00d      	beq.n	80016ba <RFM95_writeBurstRes+0x54>
 800169e:	183b      	adds	r3, r7, r0
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d809      	bhi.n	80016ba <RFM95_writeBurstRes+0x54>
	{
		return RFM95_writeByteRes(RFM_Init, addr, *pData);
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	7819      	ldrb	r1, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	781a      	ldrb	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	0018      	movs	r0, r3
 80016b2:	f000 f84b 	bl	800174c <RFM95_writeByteRes>
 80016b6:	0003      	movs	r3, r0
 80016b8:	e044      	b.n	8001744 <RFM95_writeBurstRes+0xde>
	}
	else
	{
		RFM95_setNSS(RFM_Init, GPIO_PIN_RESET);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2100      	movs	r1, #0
 80016be:	0018      	movs	r0, r3
 80016c0:	f7ff ff83 	bl	80015ca <RFM95_setNSS>

		if (HAL_SPI_Transmit(RFM_Init->Module.SPI, &addr, 1, TIMEOUT) != HAL_OK)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6918      	ldr	r0, [r3, #16]
 80016c8:	23fa      	movs	r3, #250	; 0xfa
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	220b      	movs	r2, #11
 80016ce:	18b9      	adds	r1, r7, r2
 80016d0:	2201      	movs	r2, #1
 80016d2:	f003 fc95 	bl	8005000 <HAL_SPI_Transmit>
 80016d6:	1e03      	subs	r3, r0, #0
 80016d8:	d007      	beq.n	80016ea <RFM95_writeBurstRes+0x84>
		{
			RFM95_setNSS(RFM_Init->Module.SPI, GPIO_PIN_SET);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	2101      	movs	r1, #1
 80016e0:	0018      	movs	r0, r3
 80016e2:	f7ff ff72 	bl	80015ca <RFM95_setNSS>
			return RFM95_ERROR;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e02c      	b.n	8001744 <RFM95_writeBurstRes+0xde>
		}
		for (uint8_t i = 0; i < size; i++)
 80016ea:	2317      	movs	r3, #23
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
 80016f2:	e019      	b.n	8001728 <RFM95_writeBurstRes+0xc2>
		{

			if (HAL_SPI_Transmit(RFM_Init->Module.SPI, (pData++), 1, TIMEOUT)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6918      	ldr	r0, [r3, #16]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	1c4b      	adds	r3, r1, #1
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	23fa      	movs	r3, #250	; 0xfa
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	2201      	movs	r2, #1
 8001704:	f003 fc7c 	bl	8005000 <HAL_SPI_Transmit>
 8001708:	1e03      	subs	r3, r0, #0
 800170a:	d007      	beq.n	800171c <RFM95_writeBurstRes+0xb6>
					!= HAL_OK)
			{
				RFM95_setNSS(RFM_Init->Module.SPI, GPIO_PIN_SET);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	2101      	movs	r1, #1
 8001712:	0018      	movs	r0, r3
 8001714:	f7ff ff59 	bl	80015ca <RFM95_setNSS>
				return RFM95_ERROR;
 8001718:	2300      	movs	r3, #0
 800171a:	e013      	b.n	8001744 <RFM95_writeBurstRes+0xde>
		for (uint8_t i = 0; i < size; i++)
 800171c:	2117      	movs	r1, #23
 800171e:	187b      	adds	r3, r7, r1
 8001720:	781a      	ldrb	r2, [r3, #0]
 8001722:	187b      	adds	r3, r7, r1
 8001724:	3201      	adds	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	2317      	movs	r3, #23
 800172a:	18fa      	adds	r2, r7, r3
 800172c:	230a      	movs	r3, #10
 800172e:	18fb      	adds	r3, r7, r3
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d3dd      	bcc.n	80016f4 <RFM95_writeBurstRes+0x8e>
			}
		}
		RFM95_setNSS(RFM_Init, GPIO_PIN_SET);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2101      	movs	r1, #1
 800173c:	0018      	movs	r0, r3
 800173e:	f7ff ff44 	bl	80015ca <RFM95_setNSS>
		return RFM95_OK;
 8001742:	2301      	movs	r3, #1
	}

}
 8001744:	0018      	movs	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	b007      	add	sp, #28
 800174a:	bd90      	pop	{r4, r7, pc}

0800174c <RFM95_writeByteRes>:

RFM95_StatusTypedef RFM95_writeByteRes(RFM95_HandleTypedef *RFM_Init,
		uint8_t addr, uint8_t data)
{
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	0008      	movs	r0, r1
 8001756:	0011      	movs	r1, r2
 8001758:	1cfb      	adds	r3, r7, #3
 800175a:	1c02      	adds	r2, r0, #0
 800175c:	701a      	strb	r2, [r3, #0]
 800175e:	1cbb      	adds	r3, r7, #2
 8001760:	1c0a      	adds	r2, r1, #0
 8001762:	701a      	strb	r2, [r3, #0]
	uint8_t dataWrite = (addr | 0x80);
 8001764:	1cfb      	adds	r3, r7, #3
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2280      	movs	r2, #128	; 0x80
 800176a:	4252      	negs	r2, r2
 800176c:	4313      	orrs	r3, r2
 800176e:	b2da      	uxtb	r2, r3
 8001770:	240f      	movs	r4, #15
 8001772:	193b      	adds	r3, r7, r4
 8001774:	701a      	strb	r2, [r3, #0]
	RFM95_setNSS(RFM_Init, GPIO_PIN_RESET);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2100      	movs	r1, #0
 800177a:	0018      	movs	r0, r3
 800177c:	f7ff ff25 	bl	80015ca <RFM95_setNSS>
	if (HAL_SPI_Transmit(RFM_Init->Module.SPI, &dataWrite, 1, TIMEOUT)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6918      	ldr	r0, [r3, #16]
 8001784:	23fa      	movs	r3, #250	; 0xfa
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	1939      	adds	r1, r7, r4
 800178a:	2201      	movs	r2, #1
 800178c:	f003 fc38 	bl	8005000 <HAL_SPI_Transmit>
 8001790:	1e03      	subs	r3, r0, #0
 8001792:	d006      	beq.n	80017a2 <RFM95_writeByteRes+0x56>
			!= HAL_OK)
	{
		RFM95_setNSS(RFM_Init, GPIO_PIN_SET);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2101      	movs	r1, #1
 8001798:	0018      	movs	r0, r3
 800179a:	f7ff ff16 	bl	80015ca <RFM95_setNSS>
		return RFM95_ERROR;
 800179e:	2300      	movs	r3, #0
 80017a0:	e016      	b.n	80017d0 <RFM95_writeByteRes+0x84>
	}
	if (HAL_SPI_Transmit(RFM_Init->Module.SPI, &data, 1, TIMEOUT) != HAL_OK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6918      	ldr	r0, [r3, #16]
 80017a6:	23fa      	movs	r3, #250	; 0xfa
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	1cb9      	adds	r1, r7, #2
 80017ac:	2201      	movs	r2, #1
 80017ae:	f003 fc27 	bl	8005000 <HAL_SPI_Transmit>
 80017b2:	1e03      	subs	r3, r0, #0
 80017b4:	d006      	beq.n	80017c4 <RFM95_writeByteRes+0x78>
	{
		RFM95_setNSS(RFM_Init, GPIO_PIN_SET);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2101      	movs	r1, #1
 80017ba:	0018      	movs	r0, r3
 80017bc:	f7ff ff05 	bl	80015ca <RFM95_setNSS>
		return RFM95_ERROR;
 80017c0:	2300      	movs	r3, #0
 80017c2:	e005      	b.n	80017d0 <RFM95_writeByteRes+0x84>
	}

	RFM95_setNSS(RFM_Init, GPIO_PIN_SET);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2101      	movs	r1, #1
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7ff fefe 	bl	80015ca <RFM95_setNSS>
	return RFM95_OK;
 80017ce:	2301      	movs	r3, #1

}
 80017d0:	0018      	movs	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b005      	add	sp, #20
 80017d6:	bd90      	pop	{r4, r7, pc}

080017d8 <RFM95_receiveFromEXTI>:

RFM95_StatusTypedef RFM95_receiveFromEXTI(RFM95_HandleTypedef *RFM_Init,
		uint8_t *buffer, uint8_t size)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	1dfb      	adds	r3, r7, #7
 80017e4:	701a      	strb	r2, [r3, #0]
	uint8_t sizeMin = 0;
 80017e6:	2316      	movs	r3, #22
 80017e8:	18fb      	adds	r3, r7, r3
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
	uint8_t rxBuffer = 0;
 80017ee:	2315      	movs	r3, #21
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	2200      	movs	r2, #0
 80017f4:	701a      	strb	r2, [r3, #0]
	if (RFM95_writeByteRes(RFM_Init, LR_REG_IRQFLAGS, RX_FLAGS) != RFM95_OK)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2240      	movs	r2, #64	; 0x40
 80017fa:	2112      	movs	r1, #18
 80017fc:	0018      	movs	r0, r3
 80017fe:	f7ff ffa5 	bl	800174c <RFM95_writeByteRes>
 8001802:	0003      	movs	r3, r0
 8001804:	2b01      	cmp	r3, #1
 8001806:	d001      	beq.n	800180c <RFM95_receiveFromEXTI+0x34>
	{
		return RFM95_ERROR;
 8001808:	2300      	movs	r3, #0
 800180a:	e054      	b.n	80018b6 <RFM95_receiveFromEXTI+0xde>
	}
	if (RFM95_readByteRes(RFM_Init, LR_REG_RXNBBNYTES, &sizeMin) != RFM95_OK)
 800180c:	2316      	movs	r3, #22
 800180e:	18fa      	adds	r2, r7, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2113      	movs	r1, #19
 8001814:	0018      	movs	r0, r3
 8001816:	f7ff feec 	bl	80015f2 <RFM95_readByteRes>
 800181a:	0003      	movs	r3, r0
 800181c:	2b01      	cmp	r3, #1
 800181e:	d001      	beq.n	8001824 <RFM95_receiveFromEXTI+0x4c>
	{
		return RFM95_ERROR;
 8001820:	2300      	movs	r3, #0
 8001822:	e048      	b.n	80018b6 <RFM95_receiveFromEXTI+0xde>
	}
	if (RFM95_readByteRes(RFM_Init, LR_REG_FIFORXCURRENTADDR, &rxBuffer)
 8001824:	2315      	movs	r3, #21
 8001826:	18fa      	adds	r2, r7, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2110      	movs	r1, #16
 800182c:	0018      	movs	r0, r3
 800182e:	f7ff fee0 	bl	80015f2 <RFM95_readByteRes>
 8001832:	0003      	movs	r3, r0
 8001834:	2b01      	cmp	r3, #1
 8001836:	d001      	beq.n	800183c <RFM95_receiveFromEXTI+0x64>
			!= RFM95_OK)
	{
		return RFM95_ERROR;
 8001838:	2300      	movs	r3, #0
 800183a:	e03c      	b.n	80018b6 <RFM95_receiveFromEXTI+0xde>
	}
	if (RFM95_writeByteRes(RFM_Init, LR_REG_FIFOADDRPTR, rxBuffer) != RFM95_OK)
 800183c:	2315      	movs	r3, #21
 800183e:	18fb      	adds	r3, r7, r3
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	210d      	movs	r1, #13
 8001846:	0018      	movs	r0, r3
 8001848:	f7ff ff80 	bl	800174c <RFM95_writeByteRes>
 800184c:	0003      	movs	r3, r0
 800184e:	2b01      	cmp	r3, #1
 8001850:	d001      	beq.n	8001856 <RFM95_receiveFromEXTI+0x7e>
	{
		return RFM95_ERROR;
 8001852:	2300      	movs	r3, #0
 8001854:	e02f      	b.n	80018b6 <RFM95_receiveFromEXTI+0xde>
	}
	if (size >= sizeMin)
 8001856:	2116      	movs	r1, #22
 8001858:	187b      	adds	r3, r7, r1
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	1dfa      	adds	r2, r7, #7
 800185e:	7812      	ldrb	r2, [r2, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d304      	bcc.n	800186e <RFM95_receiveFromEXTI+0x96>
	{
		size = sizeMin;
 8001864:	1dfb      	adds	r3, r7, #7
 8001866:	187a      	adds	r2, r7, r1
 8001868:	7812      	ldrb	r2, [r2, #0]
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	e003      	b.n	8001876 <RFM95_receiveFromEXTI+0x9e>
	}
	else
	{
		size = size;
 800186e:	1dfb      	adds	r3, r7, #7
 8001870:	1dfa      	adds	r2, r7, #7
 8001872:	7812      	ldrb	r2, [r2, #0]
 8001874:	701a      	strb	r2, [r3, #0]
	}
	for (uint8_t i = 0; i < size; i++)
 8001876:	2317      	movs	r3, #23
 8001878:	18fb      	adds	r3, r7, r3
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
 800187e:	e012      	b.n	80018a6 <RFM95_receiveFromEXTI+0xce>
	{
		if (RFM95_readByteRes(RFM_Init, LR_REG_FIFO, buffer++) != RFM95_OK)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	001a      	movs	r2, r3
 800188a:	2100      	movs	r1, #0
 800188c:	f7ff feb1 	bl	80015f2 <RFM95_readByteRes>
 8001890:	0003      	movs	r3, r0
 8001892:	2b01      	cmp	r3, #1
 8001894:	d001      	beq.n	800189a <RFM95_receiveFromEXTI+0xc2>
		{
			return RFM95_ERROR;
 8001896:	2300      	movs	r3, #0
 8001898:	e00d      	b.n	80018b6 <RFM95_receiveFromEXTI+0xde>
	for (uint8_t i = 0; i < size; i++)
 800189a:	2117      	movs	r1, #23
 800189c:	187b      	adds	r3, r7, r1
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	3201      	adds	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	2317      	movs	r3, #23
 80018a8:	18fa      	adds	r2, r7, r3
 80018aa:	1dfb      	adds	r3, r7, #7
 80018ac:	7812      	ldrb	r2, [r2, #0]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d3e5      	bcc.n	8001880 <RFM95_receiveFromEXTI+0xa8>
		}

	}

	return RFM95_OK;
 80018b4:	2301      	movs	r3, #1
}
 80018b6:	0018      	movs	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b006      	add	sp, #24
 80018bc:	bd80      	pop	{r7, pc}

080018be <RFM95_enableAGC>:

RFM95_StatusTypedef RFM95_enableAGC(RFM95_HandleTypedef *RFM_Init)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b084      	sub	sp, #16
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
	uint8_t dataWrite = 0;
 80018c6:	210f      	movs	r1, #15
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
	if (RFM95_readByteRes(RFM_Init, LR_REG_MODEMCONFIG3, &dataWrite)
 80018ce:	187a      	adds	r2, r7, r1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2126      	movs	r1, #38	; 0x26
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff fe8c 	bl	80015f2 <RFM95_readByteRes>
 80018da:	0003      	movs	r3, r0
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d001      	beq.n	80018e4 <RFM95_enableAGC+0x26>
			!= RFM95_OK)
	{
		return RFM95_ERROR;
 80018e0:	2300      	movs	r3, #0
 80018e2:	e010      	b.n	8001906 <RFM95_enableAGC+0x48>
	}

	if (RFM95_writeByteRes(RFM_Init, LR_REG_MODEMCONFIG3,
 80018e4:	230f      	movs	r3, #15
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2203      	movs	r2, #3
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2126      	movs	r1, #38	; 0x26
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7ff ff29 	bl	800174c <RFM95_writeByteRes>
 80018fa:	0003      	movs	r3, r0
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d001      	beq.n	8001904 <RFM95_enableAGC+0x46>
			(uint8_t) (dataWrite | 0x03)) != RFM95_OK)
	{
		return RFM95_ERROR;
 8001900:	2300      	movs	r3, #0
 8001902:	e000      	b.n	8001906 <RFM95_enableAGC+0x48>
	}
	return RFM95_OK;
 8001904:	2301      	movs	r3, #1
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b004      	add	sp, #16
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <RFM95_checkLDRO>:
	}
	return RFM95_OK;
}

RFM95_StatusTypedef RFM95_checkLDRO(RFM95_HandleTypedef *RFM_Init)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	/*Using after set BW and SF*/
	uint32_t BW = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
	switch (RFM_Init->BandWidth)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7ddb      	ldrb	r3, [r3, #23]
 8001920:	2b09      	cmp	r3, #9
 8001922:	d822      	bhi.n	800196a <RFM95_checkLDRO+0x5a>
 8001924:	009a      	lsls	r2, r3, #2
 8001926:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <RFM95_checkLDRO+0xd8>)
 8001928:	18d3      	adds	r3, r2, r3
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	469f      	mov	pc, r3
	{
		case 0:
			BW = 7800;
 800192e:	4b2f      	ldr	r3, [pc, #188]	; (80019ec <RFM95_checkLDRO+0xdc>)
 8001930:	617b      	str	r3, [r7, #20]
			break;
 8001932:	e01a      	b.n	800196a <RFM95_checkLDRO+0x5a>
		case 1:
			BW = 10400;
 8001934:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <RFM95_checkLDRO+0xe0>)
 8001936:	617b      	str	r3, [r7, #20]
			break;
 8001938:	e017      	b.n	800196a <RFM95_checkLDRO+0x5a>
		case 2:
			BW = 15600;
 800193a:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <RFM95_checkLDRO+0xe4>)
 800193c:	617b      	str	r3, [r7, #20]
			break;
 800193e:	e014      	b.n	800196a <RFM95_checkLDRO+0x5a>
		case 3:
			BW = 20800;
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <RFM95_checkLDRO+0xe8>)
 8001942:	617b      	str	r3, [r7, #20]
			break;
 8001944:	e011      	b.n	800196a <RFM95_checkLDRO+0x5a>
		case 4:
			BW = 31250;
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <RFM95_checkLDRO+0xec>)
 8001948:	617b      	str	r3, [r7, #20]
			break;
 800194a:	e00e      	b.n	800196a <RFM95_checkLDRO+0x5a>
		case 5:
			BW = 41700;
 800194c:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <RFM95_checkLDRO+0xf0>)
 800194e:	617b      	str	r3, [r7, #20]
			break;
 8001950:	e00b      	b.n	800196a <RFM95_checkLDRO+0x5a>
		case 6:
			BW = 62500;
 8001952:	4b2c      	ldr	r3, [pc, #176]	; (8001a04 <RFM95_checkLDRO+0xf4>)
 8001954:	617b      	str	r3, [r7, #20]
			break;
 8001956:	e008      	b.n	800196a <RFM95_checkLDRO+0x5a>
		case 7:
			BW = 125000;
 8001958:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <RFM95_checkLDRO+0xf8>)
 800195a:	617b      	str	r3, [r7, #20]
			break;
 800195c:	e005      	b.n	800196a <RFM95_checkLDRO+0x5a>
		case 8:
			BW = 250000;
 800195e:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <RFM95_checkLDRO+0xfc>)
 8001960:	617b      	str	r3, [r7, #20]
			break;
 8001962:	e002      	b.n	800196a <RFM95_checkLDRO+0x5a>
		case 9:
			BW = 500000;
 8001964:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <RFM95_checkLDRO+0x100>)
 8001966:	617b      	str	r3, [r7, #20]
			break;
 8001968:	46c0      	nop			; (mov r8, r8)

	}
	uint32_t symbol = 1000 / ((BW) / (1L << (RFM_Init->SpredingFactor))); //ms
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7d9b      	ldrb	r3, [r3, #22]
 800196e:	001a      	movs	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	40d3      	lsrs	r3, r2
 8001974:	0019      	movs	r1, r3
 8001976:	23fa      	movs	r3, #250	; 0xfa
 8001978:	0098      	lsls	r0, r3, #2
 800197a:	f7fe fbd7 	bl	800012c <__udivsi3>
 800197e:	0003      	movs	r3, r0
 8001980:	613b      	str	r3, [r7, #16]
	bool statusLDO = (symbol > 16) ? 1 : 0;
 8001982:	230f      	movs	r3, #15
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	2110      	movs	r1, #16
 800198a:	4291      	cmp	r1, r2
 800198c:	4192      	sbcs	r2, r2
 800198e:	4252      	negs	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]
	uint8_t buffer = 0;
 8001992:	210e      	movs	r1, #14
 8001994:	187b      	adds	r3, r7, r1
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]

	if (RFM95_readByteRes(RFM_Init, LR_REG_MODEMCONFIG3, &buffer) != RFM95_OK)
 800199a:	187a      	adds	r2, r7, r1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2126      	movs	r1, #38	; 0x26
 80019a0:	0018      	movs	r0, r3
 80019a2:	f7ff fe26 	bl	80015f2 <RFM95_readByteRes>
 80019a6:	0003      	movs	r3, r0
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d001      	beq.n	80019b0 <RFM95_checkLDRO+0xa0>
	{
		return RFM95_ERROR;
 80019ac:	2300      	movs	r3, #0
 80019ae:	e016      	b.n	80019de <RFM95_checkLDRO+0xce>
	}
	if (RFM95_writeByteRes(RFM_Init, LR_REG_MODEMCONFIG3,
			(uint8_t) (buffer | (statusLDO << 3))) != RFM95_OK)
 80019b0:	230f      	movs	r3, #15
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	b25a      	sxtb	r2, r3
 80019ba:	230e      	movs	r3, #14
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b25b      	sxtb	r3, r3
 80019c2:	4313      	orrs	r3, r2
 80019c4:	b25b      	sxtb	r3, r3
	if (RFM95_writeByteRes(RFM_Init, LR_REG_MODEMCONFIG3,
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2126      	movs	r1, #38	; 0x26
 80019cc:	0018      	movs	r0, r3
 80019ce:	f7ff febd 	bl	800174c <RFM95_writeByteRes>
 80019d2:	0003      	movs	r3, r0
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d001      	beq.n	80019dc <RFM95_checkLDRO+0xcc>
	{
		return RFM95_ERROR;
 80019d8:	2300      	movs	r3, #0
 80019da:	e000      	b.n	80019de <RFM95_checkLDRO+0xce>
	}

	return RFM95_OK;
 80019dc:	2301      	movs	r3, #1
}
 80019de:	0018      	movs	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b006      	add	sp, #24
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	08007d94 	.word	0x08007d94
 80019ec:	00001e78 	.word	0x00001e78
 80019f0:	000028a0 	.word	0x000028a0
 80019f4:	00003cf0 	.word	0x00003cf0
 80019f8:	00005140 	.word	0x00005140
 80019fc:	00007a12 	.word	0x00007a12
 8001a00:	0000a2e4 	.word	0x0000a2e4
 8001a04:	0000f424 	.word	0x0000f424
 8001a08:	0001e848 	.word	0x0001e848
 8001a0c:	0003d090 	.word	0x0003d090
 8001a10:	0007a120 	.word	0x0007a120

08001a14 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 10000);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <_write+0x24>)
 8001a26:	68b9      	ldr	r1, [r7, #8]
 8001a28:	4804      	ldr	r0, [pc, #16]	; (8001a3c <_write+0x28>)
 8001a2a:	f004 f8d3 	bl	8005bd4 <HAL_UART_Transmit>
	return len;
 8001a2e:	687b      	ldr	r3, [r7, #4]
}
 8001a30:	0018      	movs	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b004      	add	sp, #16
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	00002710 	.word	0x00002710
 8001a3c:	200001c8 	.word	0x200001c8

08001a40 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	0002      	movs	r2, r0
 8001a48:	1dbb      	adds	r3, r7, #6
 8001a4a:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == GPIO_PIN_9)
 8001a4c:	1dbb      	adds	r3, r7, #6
 8001a4e:	881a      	ldrh	r2, [r3, #0]
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d111      	bne.n	8001a7c <HAL_GPIO_EXTI_Callback+0x3c>
	{
		memset(buffer, 0, 200);
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_GPIO_EXTI_Callback+0x44>)
 8001a5a:	22c8      	movs	r2, #200	; 0xc8
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f004 fe82 	bl	8006768 <memset>
		RFM95_receiveFromEXTI(&Node, buffer, sizeof(buffer));
 8001a64:	4907      	ldr	r1, [pc, #28]	; (8001a84 <HAL_GPIO_EXTI_Callback+0x44>)
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <HAL_GPIO_EXTI_Callback+0x48>)
 8001a68:	2296      	movs	r2, #150	; 0x96
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f7ff feb4 	bl	80017d8 <RFM95_receiveFromEXTI>
		pushQueue(&queue,buffer);
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <HAL_GPIO_EXTI_Callback+0x44>)
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_GPIO_EXTI_Callback+0x4c>)
 8001a74:	0011      	movs	r1, r2
 8001a76:	0018      	movs	r0, r3
 8001a78:	f000 fca7 	bl	80023ca <pushQueue>
	}
}
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b002      	add	sp, #8
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000098 	.word	0x20000098
 8001a88:	20000278 	.word	0x20000278
 8001a8c:	20000140 	.word	0x20000140

08001a90 <HAL_RTC_AlarmAEventCallback>:
//	  {
//	    Error_Handler();
//	  }
//}
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	alarm =1;
 8001a98:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <HAL_RTC_AlarmAEventCallback+0x18>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b002      	add	sp, #8
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	2000012e 	.word	0x2000012e

08001aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aae:	4c98      	ldr	r4, [pc, #608]	; (8001d10 <main+0x264>)
 8001ab0:	44a5      	add	sp, r4
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ab4:	f000 ffba 	bl	8002a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ab8:	f000 f938 	bl	8001d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001abc:	f000 fa46 	bl	8001f4c <MX_GPIO_Init>
  MX_RTC_Init();
 8001ac0:	f000 f9b2 	bl	8001e28 <MX_RTC_Init>
  MX_SPI1_Init();
 8001ac4:	f000 f9da 	bl	8001e7c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001ac8:	f000 fa10 	bl	8001eec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x478)
 8001acc:	4b91      	ldr	r3, [pc, #580]	; (8001d14 <main+0x268>)
 8001ace:	2101      	movs	r1, #1
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f003 f9e3 	bl	8004e9c <HAL_RTCEx_BKUPRead>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	238f      	movs	r3, #143	; 0x8f
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <main+0x38>
         {
           setTime();
 8001ae0:	f000 fd24 	bl	800252c <setTime>
         }
    initLoRa();
 8001ae4:	f000 fabc 	bl	8002060 <initLoRa>
    if(getFlagStart()!=true){
 8001ae8:	f000 fc2a 	bl	8002340 <getFlagStart>
 8001aec:	0003      	movs	r3, r0
 8001aee:	001a      	movs	r2, r3
 8001af0:	2301      	movs	r3, #1
 8001af2:	4053      	eors	r3, r2
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d100      	bne.n	8001afc <main+0x50>
 8001afa:	e108      	b.n	8001d0e <main+0x262>
    	  initAddrIntoFlash();
 8001afc:	f000 faf0 	bl	80020e0 <initAddrIntoFlash>
    	  nodeStart();
 8001b00:	f000 fb58 	bl	80021b4 <nodeStart>
    	  uint8_t time[3]={0};
 8001b04:	2481      	movs	r4, #129	; 0x81
 8001b06:	00a4      	lsls	r4, r4, #2
 8001b08:	193b      	adds	r3, r7, r4
 8001b0a:	4a83      	ldr	r2, [pc, #524]	; (8001d18 <main+0x26c>)
 8001b0c:	8812      	ldrh	r2, [r2, #0]
 8001b0e:	801a      	strh	r2, [r3, #0]
 8001b10:	2202      	movs	r2, #2
 8001b12:	2100      	movs	r1, #0
 8001b14:	5499      	strb	r1, [r3, r2]
    	  getTime(time);
 8001b16:	193b      	adds	r3, r7, r4
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f000 fd51 	bl	80025c0 <getTime>
    	  time[2]+=5;
 8001b1e:	193b      	adds	r3, r7, r4
 8001b20:	789b      	ldrb	r3, [r3, #2]
 8001b22:	3305      	adds	r3, #5
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	193b      	adds	r3, r7, r4
 8001b28:	709a      	strb	r2, [r3, #2]
    	  if(time[2]>=60){
 8001b2a:	193b      	adds	r3, r7, r4
 8001b2c:	789b      	ldrb	r3, [r3, #2]
 8001b2e:	2b3b      	cmp	r3, #59	; 0x3b
 8001b30:	d92b      	bls.n	8001b8a <main+0xde>
    		  time[2]=time[2]%10;
 8001b32:	193b      	adds	r3, r7, r4
 8001b34:	789b      	ldrb	r3, [r3, #2]
 8001b36:	210a      	movs	r1, #10
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f7fe fb7d 	bl	8000238 <__aeabi_uidivmod>
 8001b3e:	000b      	movs	r3, r1
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	193b      	adds	r3, r7, r4
 8001b44:	709a      	strb	r2, [r3, #2]
    		  time[1]+=1;
 8001b46:	193b      	adds	r3, r7, r4
 8001b48:	785b      	ldrb	r3, [r3, #1]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	193b      	adds	r3, r7, r4
 8001b50:	705a      	strb	r2, [r3, #1]
    		  if(time[1]>=60){
 8001b52:	193b      	adds	r3, r7, r4
 8001b54:	785b      	ldrb	r3, [r3, #1]
 8001b56:	2b3b      	cmp	r3, #59	; 0x3b
 8001b58:	d917      	bls.n	8001b8a <main+0xde>
    			  time[1]=time[1]%10;
 8001b5a:	193b      	adds	r3, r7, r4
 8001b5c:	785b      	ldrb	r3, [r3, #1]
 8001b5e:	210a      	movs	r1, #10
 8001b60:	0018      	movs	r0, r3
 8001b62:	f7fe fb69 	bl	8000238 <__aeabi_uidivmod>
 8001b66:	000b      	movs	r3, r1
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	0021      	movs	r1, r4
 8001b6c:	187b      	adds	r3, r7, r1
 8001b6e:	705a      	strb	r2, [r3, #1]
    			  time[0]+=1;
 8001b70:	187b      	adds	r3, r7, r1
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	3301      	adds	r3, #1
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	701a      	strb	r2, [r3, #0]
    			  if(time[0]>=24){
 8001b7c:	187b      	adds	r3, r7, r1
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b17      	cmp	r3, #23
 8001b82:	d902      	bls.n	8001b8a <main+0xde>
    				  time[0]=00;
 8001b84:	187b      	adds	r3, r7, r1
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
    			  }
    		  }
    	  }
    	  setAlarm(binaryToBCD(time[0]),binaryToBCD(time[1]),binaryToBCD(time[2]));
 8001b8a:	2681      	movs	r6, #129	; 0x81
 8001b8c:	00b6      	lsls	r6, r6, #2
 8001b8e:	19bb      	adds	r3, r7, r6
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	0018      	movs	r0, r3
 8001b94:	f000 fc8c 	bl	80024b0 <binaryToBCD>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	001c      	movs	r4, r3
 8001b9c:	19bb      	adds	r3, r7, r6
 8001b9e:	785b      	ldrb	r3, [r3, #1]
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f000 fc85 	bl	80024b0 <binaryToBCD>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	001d      	movs	r5, r3
 8001baa:	19bb      	adds	r3, r7, r6
 8001bac:	789b      	ldrb	r3, [r3, #2]
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f000 fc7e 	bl	80024b0 <binaryToBCD>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	001a      	movs	r2, r3
 8001bb8:	0029      	movs	r1, r5
 8001bba:	0020      	movs	r0, r4
 8001bbc:	f000 fd28 	bl	8002610 <setAlarm>
    	  while(1){
    		  uint8_t buffer[MAX_SIZE_DATA]={0};
 8001bc0:	4b56      	ldr	r3, [pc, #344]	; (8001d1c <main+0x270>)
 8001bc2:	2282      	movs	r2, #130	; 0x82
 8001bc4:	0092      	lsls	r2, r2, #2
 8001bc6:	4694      	mov	ip, r2
 8001bc8:	44bc      	add	ip, r7
 8001bca:	4463      	add	r3, ip
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	22fb      	movs	r2, #251	; 0xfb
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f004 fdc6 	bl	8006768 <memset>
    		  uint8_t data[MAX_SIZE_DATA-10]={0};
 8001bdc:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <main+0x274>)
 8001bde:	2282      	movs	r2, #130	; 0x82
 8001be0:	0092      	lsls	r2, r2, #2
 8001be2:	4694      	mov	ip, r2
 8001be4:	44bc      	add	ip, r7
 8001be6:	4463      	add	r3, ip
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	3304      	adds	r3, #4
 8001bee:	22f1      	movs	r2, #241	; 0xf1
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f004 fdb8 	bl	8006768 <memset>
    		  packetID_HandleTypedef bufferID ;
    		  if(isEmpty(&queue)!=true){
 8001bf8:	4b4a      	ldr	r3, [pc, #296]	; (8001d24 <main+0x278>)
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f000 fbd6 	bl	80023ac <isEmpty>
 8001c00:	0003      	movs	r3, r0
 8001c02:	001a      	movs	r2, r3
 8001c04:	2301      	movs	r3, #1
 8001c06:	4053      	eors	r3, r2
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d017      	beq.n	8001c3e <main+0x192>
    			  popQueue(&queue,buffer);
 8001c0e:	24f8      	movs	r4, #248	; 0xf8
 8001c10:	193a      	adds	r2, r7, r4
 8001c12:	4b44      	ldr	r3, [pc, #272]	; (8001d24 <main+0x278>)
 8001c14:	0011      	movs	r1, r2
 8001c16:	0018      	movs	r0, r3
 8001c18:	f000 fc0b 	bl	8002432 <popQueue>
    			  separatePacket(buffer,&bufferID,data);
 8001c1c:	003a      	movs	r2, r7
 8001c1e:	25fe      	movs	r5, #254	; 0xfe
 8001c20:	006d      	lsls	r5, r5, #1
 8001c22:	1979      	adds	r1, r7, r5
 8001c24:	193b      	adds	r3, r7, r4
 8001c26:	0018      	movs	r0, r3
 8001c28:	f000 fa6c 	bl	8002104 <separatePacket>
    			  if(checkIDNextwork(&bufferID)){
 8001c2c:	197b      	adds	r3, r7, r5
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f000 fb00 	bl	8002234 <checkIDNextwork>
 8001c34:	1e03      	subs	r3, r0, #0
 8001c36:	d002      	beq.n	8001c3e <main+0x192>
    				  setFlagStart();
 8001c38:	f000 fb98 	bl	800236c <setFlagStart>
 8001c3c:	e067      	b.n	8001d0e <main+0x262>
    				  break;
    			  }
    		  }
    		  if(alarm==1){
 8001c3e:	4b3a      	ldr	r3, [pc, #232]	; (8001d28 <main+0x27c>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d1bc      	bne.n	8001bc0 <main+0x114>
    			  uint8_t time[3]={0};
 8001c46:	24fc      	movs	r4, #252	; 0xfc
 8001c48:	0064      	lsls	r4, r4, #1
 8001c4a:	193b      	adds	r3, r7, r4
 8001c4c:	4a32      	ldr	r2, [pc, #200]	; (8001d18 <main+0x26c>)
 8001c4e:	8812      	ldrh	r2, [r2, #0]
 8001c50:	801a      	strh	r2, [r3, #0]
 8001c52:	2202      	movs	r2, #2
 8001c54:	2100      	movs	r1, #0
 8001c56:	5499      	strb	r1, [r3, r2]
    			  getTime(time);
 8001c58:	193b      	adds	r3, r7, r4
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f000 fcb0 	bl	80025c0 <getTime>
    			  time[2]+=5;
 8001c60:	193b      	adds	r3, r7, r4
 8001c62:	789b      	ldrb	r3, [r3, #2]
 8001c64:	3305      	adds	r3, #5
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	193b      	adds	r3, r7, r4
 8001c6a:	709a      	strb	r2, [r3, #2]
    			  nodeStart();
 8001c6c:	f000 faa2 	bl	80021b4 <nodeStart>
    			  if(time[2]>=60){
 8001c70:	193b      	adds	r3, r7, r4
 8001c72:	789b      	ldrb	r3, [r3, #2]
 8001c74:	2b3b      	cmp	r3, #59	; 0x3b
 8001c76:	d92b      	bls.n	8001cd0 <main+0x224>
    				  time[2]=time[2]%10;
 8001c78:	193b      	adds	r3, r7, r4
 8001c7a:	789b      	ldrb	r3, [r3, #2]
 8001c7c:	210a      	movs	r1, #10
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f7fe fada 	bl	8000238 <__aeabi_uidivmod>
 8001c84:	000b      	movs	r3, r1
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	193b      	adds	r3, r7, r4
 8001c8a:	709a      	strb	r2, [r3, #2]
    				  time[1]+=1;
 8001c8c:	193b      	adds	r3, r7, r4
 8001c8e:	785b      	ldrb	r3, [r3, #1]
 8001c90:	3301      	adds	r3, #1
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	193b      	adds	r3, r7, r4
 8001c96:	705a      	strb	r2, [r3, #1]
    				  if(time[1]>=60){
 8001c98:	193b      	adds	r3, r7, r4
 8001c9a:	785b      	ldrb	r3, [r3, #1]
 8001c9c:	2b3b      	cmp	r3, #59	; 0x3b
 8001c9e:	d917      	bls.n	8001cd0 <main+0x224>
    					  time[1]=time[1]%10;
 8001ca0:	193b      	adds	r3, r7, r4
 8001ca2:	785b      	ldrb	r3, [r3, #1]
 8001ca4:	210a      	movs	r1, #10
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f7fe fac6 	bl	8000238 <__aeabi_uidivmod>
 8001cac:	000b      	movs	r3, r1
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	0021      	movs	r1, r4
 8001cb2:	187b      	adds	r3, r7, r1
 8001cb4:	705a      	strb	r2, [r3, #1]
    					  time[0]+=1;
 8001cb6:	187b      	adds	r3, r7, r1
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	187b      	adds	r3, r7, r1
 8001cc0:	701a      	strb	r2, [r3, #0]
    					  if(time[0]>=24){
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b17      	cmp	r3, #23
 8001cc8:	d902      	bls.n	8001cd0 <main+0x224>
    						  time[0]=00;
 8001cca:	187b      	adds	r3, r7, r1
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
    					  }
    				  }
    			  }
    			  setAlarm(binaryToBCD(time[0]),binaryToBCD(time[1]),binaryToBCD(time[2]));
 8001cd0:	26fc      	movs	r6, #252	; 0xfc
 8001cd2:	0076      	lsls	r6, r6, #1
 8001cd4:	19bb      	adds	r3, r7, r6
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f000 fbe9 	bl	80024b0 <binaryToBCD>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	001c      	movs	r4, r3
 8001ce2:	19bb      	adds	r3, r7, r6
 8001ce4:	785b      	ldrb	r3, [r3, #1]
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f000 fbe2 	bl	80024b0 <binaryToBCD>
 8001cec:	0003      	movs	r3, r0
 8001cee:	001d      	movs	r5, r3
 8001cf0:	19bb      	adds	r3, r7, r6
 8001cf2:	789b      	ldrb	r3, [r3, #2]
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f000 fbdb 	bl	80024b0 <binaryToBCD>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	001a      	movs	r2, r3
 8001cfe:	0029      	movs	r1, r5
 8001d00:	0020      	movs	r0, r4
 8001d02:	f000 fc85 	bl	8002610 <setAlarm>
    			  alarm=0;
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <main+0x27c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
    	  while(1){
 8001d0c:	e758      	b.n	8001bc0 <main+0x114>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <main+0x262>
 8001d10:	fffffdf4 	.word	0xfffffdf4
 8001d14:	2000014c 	.word	0x2000014c
 8001d18:	08007d68 	.word	0x08007d68
 8001d1c:	fffffef0 	.word	0xfffffef0
 8001d20:	fffffdf8 	.word	0xfffffdf8
 8001d24:	20000140 	.word	0x20000140
 8001d28:	2000012e 	.word	0x2000012e

08001d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b09f      	sub	sp, #124	; 0x7c
 8001d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d32:	2440      	movs	r4, #64	; 0x40
 8001d34:	193b      	adds	r3, r7, r4
 8001d36:	0018      	movs	r0, r3
 8001d38:	2338      	movs	r3, #56	; 0x38
 8001d3a:	001a      	movs	r2, r3
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	f004 fd13 	bl	8006768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d42:	232c      	movs	r3, #44	; 0x2c
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	0018      	movs	r0, r3
 8001d48:	2314      	movs	r3, #20
 8001d4a:	001a      	movs	r2, r3
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	f004 fd0b 	bl	8006768 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	0018      	movs	r0, r3
 8001d56:	2328      	movs	r3, #40	; 0x28
 8001d58:	001a      	movs	r2, r3
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	f004 fd04 	bl	8006768 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d60:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <SystemClock_Config+0xf0>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a2e      	ldr	r2, [pc, #184]	; (8001e20 <SystemClock_Config+0xf4>)
 8001d66:	401a      	ands	r2, r3
 8001d68:	4b2c      	ldr	r3, [pc, #176]	; (8001e1c <SystemClock_Config+0xf0>)
 8001d6a:	2180      	movs	r1, #128	; 0x80
 8001d6c:	0109      	lsls	r1, r1, #4
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d72:	f001 fbc9 	bl	8003508 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001d76:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <SystemClock_Config+0xf8>)
 8001d78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d7a:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <SystemClock_Config+0xf8>)
 8001d7c:	4928      	ldr	r1, [pc, #160]	; (8001e20 <SystemClock_Config+0xf4>)
 8001d7e:	400a      	ands	r2, r1
 8001d80:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001d82:	193b      	adds	r3, r7, r4
 8001d84:	2214      	movs	r2, #20
 8001d86:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d88:	193b      	adds	r3, r7, r4
 8001d8a:	2280      	movs	r2, #128	; 0x80
 8001d8c:	0052      	lsls	r2, r2, #1
 8001d8e:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d90:	0021      	movs	r1, r4
 8001d92:	187b      	adds	r3, r7, r1
 8001d94:	2201      	movs	r2, #1
 8001d96:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001d98:	187b      	adds	r3, r7, r1
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	22a0      	movs	r2, #160	; 0xa0
 8001da2:	0212      	lsls	r2, r2, #8
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001da6:	187b      	adds	r3, r7, r1
 8001da8:	2200      	movs	r2, #0
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dac:	187b      	adds	r3, r7, r1
 8001dae:	0018      	movs	r0, r3
 8001db0:	f001 fbb8 	bl	8003524 <HAL_RCC_OscConfig>
 8001db4:	1e03      	subs	r3, r0, #0
 8001db6:	d001      	beq.n	8001dbc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001db8:	f000 f94c 	bl	8002054 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dbc:	212c      	movs	r1, #44	; 0x2c
 8001dbe:	187b      	adds	r3, r7, r1
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001dc4:	187b      	adds	r3, r7, r1
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dca:	187b      	adds	r3, r7, r1
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dd0:	187b      	adds	r3, r7, r1
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dd6:	187b      	adds	r3, r7, r1
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ddc:	187b      	adds	r3, r7, r1
 8001dde:	2100      	movs	r1, #0
 8001de0:	0018      	movs	r0, r3
 8001de2:	f001 ff73 	bl	8003ccc <HAL_RCC_ClockConfig>
 8001de6:	1e03      	subs	r3, r0, #0
 8001de8:	d001      	beq.n	8001dee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001dea:	f000 f933 	bl	8002054 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	2222      	movs	r2, #34	; 0x22
 8001df2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	2280      	movs	r2, #128	; 0x80
 8001dfe:	0252      	lsls	r2, r2, #9
 8001e00:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	0018      	movs	r0, r3
 8001e06:	f002 f985 	bl	8004114 <HAL_RCCEx_PeriphCLKConfig>
 8001e0a:	1e03      	subs	r3, r0, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001e0e:	f000 f921 	bl	8002054 <Error_Handler>
  }
}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b01f      	add	sp, #124	; 0x7c
 8001e18:	bd90      	pop	{r4, r7, pc}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	ffffe7ff 	.word	0xffffe7ff
 8001e24:	40021000 	.word	0x40021000

08001e28 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <MX_RTC_Init+0x4c>)
 8001e2e:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <MX_RTC_Init+0x50>)
 8001e30:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <MX_RTC_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e38:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <MX_RTC_Init+0x4c>)
 8001e3a:	227f      	movs	r2, #127	; 0x7f
 8001e3c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <MX_RTC_Init+0x4c>)
 8001e40:	22ff      	movs	r2, #255	; 0xff
 8001e42:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <MX_RTC_Init+0x4c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <MX_RTC_Init+0x4c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <MX_RTC_Init+0x4c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <MX_RTC_Init+0x4c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <MX_RTC_Init+0x4c>)
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f002 faf6 	bl	8004450 <HAL_RTC_Init>
 8001e64:	1e03      	subs	r3, r0, #0
 8001e66:	d001      	beq.n	8001e6c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001e68:	f000 f8f4 	bl	8002054 <Error_Handler>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	2000014c 	.word	0x2000014c
 8001e78:	40002800 	.word	0x40002800

08001e7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e80:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <MX_SPI1_Init+0x68>)
 8001e82:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <MX_SPI1_Init+0x6c>)
 8001e84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <MX_SPI1_Init+0x68>)
 8001e88:	2282      	movs	r2, #130	; 0x82
 8001e8a:	0052      	lsls	r2, r2, #1
 8001e8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <MX_SPI1_Init+0x68>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <MX_SPI1_Init+0x68>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <MX_SPI1_Init+0x68>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <MX_SPI1_Init+0x68>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <MX_SPI1_Init+0x68>)
 8001ea8:	2280      	movs	r2, #128	; 0x80
 8001eaa:	0092      	lsls	r2, r2, #2
 8001eac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <MX_SPI1_Init+0x68>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <MX_SPI1_Init+0x68>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <MX_SPI1_Init+0x68>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <MX_SPI1_Init+0x68>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <MX_SPI1_Init+0x68>)
 8001ec8:	2207      	movs	r2, #7
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <MX_SPI1_Init+0x68>)
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f003 f802 	bl	8004ed8 <HAL_SPI_Init>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d001      	beq.n	8001edc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ed8:	f000 f8bc 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001edc:	46c0      	nop			; (mov r8, r8)
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	20000170 	.word	0x20000170
 8001ee8:	40013000 	.word	0x40013000

08001eec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ef0:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <MX_USART2_UART_Init+0x58>)
 8001ef2:	4a15      	ldr	r2, [pc, #84]	; (8001f48 <MX_USART2_UART_Init+0x5c>)
 8001ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <MX_USART2_UART_Init+0x58>)
 8001ef8:	22e1      	movs	r2, #225	; 0xe1
 8001efa:	0252      	lsls	r2, r2, #9
 8001efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001efe:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <MX_USART2_UART_Init+0x58>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <MX_USART2_UART_Init+0x58>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <MX_USART2_UART_Init+0x58>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <MX_USART2_UART_Init+0x58>)
 8001f12:	220c      	movs	r2, #12
 8001f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <MX_USART2_UART_Init+0x58>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <MX_USART2_UART_Init+0x58>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <MX_USART2_UART_Init+0x58>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <MX_USART2_UART_Init+0x58>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <MX_USART2_UART_Init+0x58>)
 8001f30:	0018      	movs	r0, r3
 8001f32:	f003 fdfb 	bl	8005b2c <HAL_UART_Init>
 8001f36:	1e03      	subs	r3, r0, #0
 8001f38:	d001      	beq.n	8001f3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f3a:	f000 f88b 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	200001c8 	.word	0x200001c8
 8001f48:	40004400 	.word	0x40004400

08001f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f52:	240c      	movs	r4, #12
 8001f54:	193b      	adds	r3, r7, r4
 8001f56:	0018      	movs	r0, r3
 8001f58:	2314      	movs	r3, #20
 8001f5a:	001a      	movs	r2, r3
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	f004 fc03 	bl	8006768 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f62:	4b39      	ldr	r3, [pc, #228]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f66:	4b38      	ldr	r3, [pc, #224]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001f68:	2104      	movs	r1, #4
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f6e:	4b36      	ldr	r3, [pc, #216]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f72:	2204      	movs	r2, #4
 8001f74:	4013      	ands	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7a:	4b33      	ldr	r3, [pc, #204]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f7e:	4b32      	ldr	r3, [pc, #200]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001f80:	2101      	movs	r1, #1
 8001f82:	430a      	orrs	r2, r1
 8001f84:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f86:	4b30      	ldr	r3, [pc, #192]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f92:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f96:	4b2c      	ldr	r3, [pc, #176]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001f98:	2102      	movs	r1, #2
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	; (8002048 <MX_GPIO_Init+0xfc>)
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8001faa:	4b28      	ldr	r3, [pc, #160]	; (800204c <MX_GPIO_Init+0x100>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	2180      	movs	r1, #128	; 0x80
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f001 fa6f 	bl	8003494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8001fb6:	4b26      	ldr	r3, [pc, #152]	; (8002050 <MX_GPIO_Init+0x104>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2140      	movs	r1, #64	; 0x40
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f001 fa69 	bl	8003494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RS_Pin */
  GPIO_InitStruct.Pin = RS_Pin;
 8001fc2:	193b      	adds	r3, r7, r4
 8001fc4:	2280      	movs	r2, #128	; 0x80
 8001fc6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc8:	193b      	adds	r3, r7, r4
 8001fca:	2201      	movs	r2, #1
 8001fcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fce:	193b      	adds	r3, r7, r4
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	193b      	adds	r3, r7, r4
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RS_GPIO_Port, &GPIO_InitStruct);
 8001fda:	193b      	adds	r3, r7, r4
 8001fdc:	4a1b      	ldr	r2, [pc, #108]	; (800204c <MX_GPIO_Init+0x100>)
 8001fde:	0019      	movs	r1, r3
 8001fe0:	0010      	movs	r0, r2
 8001fe2:	f001 f8d9 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fe6:	193b      	adds	r3, r7, r4
 8001fe8:	2280      	movs	r2, #128	; 0x80
 8001fea:	0092      	lsls	r2, r2, #2
 8001fec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fee:	193b      	adds	r3, r7, r4
 8001ff0:	2288      	movs	r2, #136	; 0x88
 8001ff2:	0352      	lsls	r2, r2, #13
 8001ff4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ff6:	193b      	adds	r3, r7, r4
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	193a      	adds	r2, r7, r4
 8001ffe:	23a0      	movs	r3, #160	; 0xa0
 8002000:	05db      	lsls	r3, r3, #23
 8002002:	0011      	movs	r1, r2
 8002004:	0018      	movs	r0, r3
 8002006:	f001 f8c7 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 800200a:	0021      	movs	r1, r4
 800200c:	187b      	adds	r3, r7, r1
 800200e:	2240      	movs	r2, #64	; 0x40
 8002010:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002012:	187b      	adds	r3, r7, r1
 8002014:	2201      	movs	r2, #1
 8002016:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002018:	187b      	adds	r3, r7, r1
 800201a:	2201      	movs	r2, #1
 800201c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	187b      	adds	r3, r7, r1
 8002020:	2200      	movs	r2, #0
 8002022:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8002024:	187b      	adds	r3, r7, r1
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <MX_GPIO_Init+0x104>)
 8002028:	0019      	movs	r1, r3
 800202a:	0010      	movs	r0, r2
 800202c:	f001 f8b4 	bl	8003198 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002030:	2200      	movs	r2, #0
 8002032:	2100      	movs	r1, #0
 8002034:	2007      	movs	r0, #7
 8002036:	f000 fe39 	bl	8002cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800203a:	2007      	movs	r0, #7
 800203c:	f000 fe4b 	bl	8002cd6 <HAL_NVIC_EnableIRQ>

}
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b009      	add	sp, #36	; 0x24
 8002046:	bd90      	pop	{r4, r7, pc}
 8002048:	40021000 	.word	0x40021000
 800204c:	50000800 	.word	0x50000800
 8002050:	50000400 	.word	0x50000400

08002054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002058:	b672      	cpsid	i
}
 800205a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800205c:	e7fe      	b.n	800205c <Error_Handler+0x8>
	...

08002060 <initLoRa>:
extern SPI_HandleTypeDef hspi1 ;
packetID_HandleTypedef TableID[SIZE_TABLE_ID];
uint8_t tableCNT = 0;
extern uint8_t alarm ;
extern Queue_HandleTypedef queue ;
void initLoRa(){
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	Node.Module.NSS.Port = GPIOB;
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <initLoRa+0x68>)
 8002066:	4a19      	ldr	r2, [pc, #100]	; (80020cc <initLoRa+0x6c>)
 8002068:	609a      	str	r2, [r3, #8]
	Node.Module.NSS.Pin = GPIO_PIN_6;
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <initLoRa+0x68>)
 800206c:	2240      	movs	r2, #64	; 0x40
 800206e:	819a      	strh	r2, [r3, #12]
	Node.Module.Reset.Port = GPIOC;
 8002070:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <initLoRa+0x68>)
 8002072:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <initLoRa+0x70>)
 8002074:	601a      	str	r2, [r3, #0]
	Node.Module.Reset.Pin = GPIO_PIN_7;
 8002076:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <initLoRa+0x68>)
 8002078:	2280      	movs	r2, #128	; 0x80
 800207a:	809a      	strh	r2, [r3, #4]
	Node.Module.SPI = &hspi1;
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <initLoRa+0x68>)
 800207e:	4a15      	ldr	r2, [pc, #84]	; (80020d4 <initLoRa+0x74>)
 8002080:	611a      	str	r2, [r3, #16]
	Node.Frequency = 923;
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <initLoRa+0x68>)
 8002084:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <initLoRa+0x78>)
 8002086:	829a      	strh	r2, [r3, #20]
	Node.SpredingFactor = SF7;
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <initLoRa+0x68>)
 800208a:	2207      	movs	r2, #7
 800208c:	759a      	strb	r2, [r3, #22]
	Node.BandWidth = BW_125;
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <initLoRa+0x68>)
 8002090:	2207      	movs	r2, #7
 8002092:	75da      	strb	r2, [r3, #23]
	Node.CodingRate = CR_45;
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <initLoRa+0x68>)
 8002096:	2201      	movs	r2, #1
 8002098:	761a      	strb	r2, [r3, #24]
	Node.Power = PW_14DBM;
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <initLoRa+0x68>)
 800209c:	220c      	movs	r2, #12
 800209e:	765a      	strb	r2, [r3, #25]
	Node.Preamble = 8;
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <initLoRa+0x68>)
 80020a2:	2208      	movs	r2, #8
 80020a4:	835a      	strh	r2, [r3, #26]
	Node.LNA = LNA_G1;
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <initLoRa+0x68>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	771a      	strb	r2, [r3, #28]
	Node.Timeout = 1023;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <initLoRa+0x68>)
 80020ae:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <initLoRa+0x7c>)
 80020b0:	83da      	strh	r2, [r3, #30]
	RFM95_Init(&Node);
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <initLoRa+0x68>)
 80020b4:	0018      	movs	r0, r3
 80020b6:	f7fe fe2f 	bl	8000d18 <RFM95_Init>
	RFM95_enableReceive(&Node);
 80020ba:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <initLoRa+0x68>)
 80020bc:	0018      	movs	r0, r3
 80020be:	f7fe fed7 	bl	8000e70 <RFM95_enableReceive>
}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000278 	.word	0x20000278
 80020cc:	50000400 	.word	0x50000400
 80020d0:	50000800 	.word	0x50000800
 80020d4:	20000170 	.word	0x20000170
 80020d8:	0000039b 	.word	0x0000039b
 80020dc:	000003ff 	.word	0x000003ff

080020e0 <initAddrIntoFlash>:

void initAddrIntoFlash(){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
		  deletePage();
 80020e4:	f7fe fdd6 	bl	8000c94 <deletePage>
		  saveNodeID();
 80020e8:	f000 f8c8 	bl	800227c <saveNodeID>
		  savebroadcastID();
 80020ec:	f000 f8d6 	bl	800229c <savebroadcastID>
		  savePermitID();
 80020f0:	f000 f8e4 	bl	80022bc <savePermitID>
		  saveStartID();
 80020f4:	f000 f904 	bl	8002300 <saveStartID>
		  saveDataID();
 80020f8:	f000 f912 	bl	8002320 <saveDataID>

}
 80020fc:	46c0      	nop			; (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <separatePacket>:
			packetID->Packet,packetID->Type_mes,data);
}

void separatePacket(uint8_t *pbuffer,packetID_HandleTypedef *packetID,
		uint8_t *pdata)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
    char *sPtr = strtok((char*)pbuffer, ":");
 8002110:	4a26      	ldr	r2, [pc, #152]	; (80021ac <separatePacket+0xa8>)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	0011      	movs	r1, r2
 8002116:	0018      	movs	r0, r3
 8002118:	f004 fc24 	bl	8006964 <strtok>
 800211c:	0003      	movs	r3, r0
 800211e:	617b      	str	r3, [r7, #20]
    packetID->Network = atoi(sPtr);
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	0018      	movs	r0, r3
 8002124:	f004 fadc 	bl	80066e0 <atoi>
 8002128:	0003      	movs	r3, r0
 800212a:	b29a      	uxth	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	801a      	strh	r2, [r3, #0]
    sPtr = strtok(NULL, ":");
 8002130:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <separatePacket+0xa8>)
 8002132:	0019      	movs	r1, r3
 8002134:	2000      	movs	r0, #0
 8002136:	f004 fc15 	bl	8006964 <strtok>
 800213a:	0003      	movs	r3, r0
 800213c:	617b      	str	r3, [r7, #20]
    packetID->Sender = atoi(sPtr);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	0018      	movs	r0, r3
 8002142:	f004 facd 	bl	80066e0 <atoi>
 8002146:	0003      	movs	r3, r0
 8002148:	b29a      	uxth	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	805a      	strh	r2, [r3, #2]
    sPtr = strtok(NULL, ":");
 800214e:	4b17      	ldr	r3, [pc, #92]	; (80021ac <separatePacket+0xa8>)
 8002150:	0019      	movs	r1, r3
 8002152:	2000      	movs	r0, #0
 8002154:	f004 fc06 	bl	8006964 <strtok>
 8002158:	0003      	movs	r3, r0
 800215a:	617b      	str	r3, [r7, #20]
    packetID->Packet = atoi(sPtr);
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	0018      	movs	r0, r3
 8002160:	f004 fabe 	bl	80066e0 <atoi>
 8002164:	0003      	movs	r3, r0
 8002166:	b29a      	uxth	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	809a      	strh	r2, [r3, #4]
    sPtr = strtok(NULL, ":");
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <separatePacket+0xa8>)
 800216e:	0019      	movs	r1, r3
 8002170:	2000      	movs	r0, #0
 8002172:	f004 fbf7 	bl	8006964 <strtok>
 8002176:	0003      	movs	r3, r0
 8002178:	617b      	str	r3, [r7, #20]
    packetID->Type_mes = atoi(sPtr);
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	0018      	movs	r0, r3
 800217e:	f004 faaf 	bl	80066e0 <atoi>
 8002182:	0003      	movs	r3, r0
 8002184:	b29a      	uxth	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	80da      	strh	r2, [r3, #6]
    sPtr = strtok(NULL, "");
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <separatePacket+0xac>)
 800218c:	0019      	movs	r1, r3
 800218e:	2000      	movs	r0, #0
 8002190:	f004 fbe8 	bl	8006964 <strtok>
 8002194:	0003      	movs	r3, r0
 8002196:	617b      	str	r3, [r7, #20]
    strcpy((char*)pdata, sPtr);
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	0011      	movs	r1, r2
 800219e:	0018      	movs	r0, r3
 80021a0:	f004 fbc4 	bl	800692c <strcpy>
}
 80021a4:	46c0      	nop			; (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b006      	add	sp, #24
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	08007d7c 	.word	0x08007d7c
 80021b0:	08007d80 	.word	0x08007d80

080021b4 <nodeStart>:
		TableID[tableCNT].Network=packetID->Network;
	}
	tableCNT++;
}

void nodeStart(){
 80021b4:	b5b0      	push	{r4, r5, r7, lr}
 80021b6:	b0c4      	sub	sp, #272	; 0x110
 80021b8:	af04      	add	r7, sp, #16
	char buffer[MAX_SIZE_DATA]={0};
 80021ba:	4b18      	ldr	r3, [pc, #96]	; (800221c <nodeStart+0x68>)
 80021bc:	1c7a      	adds	r2, r7, #1
 80021be:	32ff      	adds	r2, #255	; 0xff
 80021c0:	4694      	mov	ip, r2
 80021c2:	4463      	add	r3, ip
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	3304      	adds	r3, #4
 80021ca:	22fb      	movs	r2, #251	; 0xfb
 80021cc:	2100      	movs	r1, #0
 80021ce:	0018      	movs	r0, r3
 80021d0:	f004 faca 	bl	8006768 <memset>
	sprintf(buffer,"%d:%d:%d:%d:%s",getNodeID(),0xFFFF,
 80021d4:	f000 f840 	bl	8002258 <getNodeID>
 80021d8:	0003      	movs	r3, r0
 80021da:	001d      	movs	r5, r3
			UNDEFINE_NEXTWORK,getStartID(),"Hello World");
 80021dc:	f000 f87e 	bl	80022dc <getStartID>
 80021e0:	0003      	movs	r3, r0
	sprintf(buffer,"%d:%d:%d:%d:%s",getNodeID(),0xFFFF,
 80021e2:	001c      	movs	r4, r3
 80021e4:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <nodeStart+0x6c>)
 80021e6:	490f      	ldr	r1, [pc, #60]	; (8002224 <nodeStart+0x70>)
 80021e8:	0038      	movs	r0, r7
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <nodeStart+0x74>)
 80021ec:	9302      	str	r3, [sp, #8]
 80021ee:	9401      	str	r4, [sp, #4]
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <nodeStart+0x6c>)
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	0013      	movs	r3, r2
 80021f6:	002a      	movs	r2, r5
 80021f8:	f004 fb78 	bl	80068ec <siprintf>
	RFM95_Transmit(&Node, (uint8_t *)buffer, strlen(buffer), 5000);
 80021fc:	003b      	movs	r3, r7
 80021fe:	0018      	movs	r0, r3
 8002200:	f7fd ff82 	bl	8000108 <strlen>
 8002204:	0003      	movs	r3, r0
 8002206:	b2da      	uxtb	r2, r3
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <nodeStart+0x78>)
 800220a:	0039      	movs	r1, r7
 800220c:	4808      	ldr	r0, [pc, #32]	; (8002230 <nodeStart+0x7c>)
 800220e:	f7ff f8b3 	bl	8001378 <RFM95_Transmit>
}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	46bd      	mov	sp, r7
 8002216:	b040      	add	sp, #256	; 0x100
 8002218:	bdb0      	pop	{r4, r5, r7, pc}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	ffffff00 	.word	0xffffff00
 8002220:	0000ffff 	.word	0x0000ffff
 8002224:	08007d6c 	.word	0x08007d6c
 8002228:	08007d84 	.word	0x08007d84
 800222c:	00001388 	.word	0x00001388
 8002230:	20000278 	.word	0x20000278

08002234 <checkIDNextwork>:

bool checkIDNextwork(packetID_HandleTypedef *packetID){
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	if(packetID->Type_mes==PERMIT_ID){
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	88db      	ldrh	r3, [r3, #6]
 8002240:	4a04      	ldr	r2, [pc, #16]	; (8002254 <checkIDNextwork+0x20>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d101      	bne.n	800224a <checkIDNextwork+0x16>
//		saveGWayID(packetID->Network);
		return true;
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <checkIDNextwork+0x18>
	}
	return false;
 800224a:	2300      	movs	r3, #0
}
 800224c:	0018      	movs	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	b002      	add	sp, #8
 8002252:	bd80      	pop	{r7, pc}
 8002254:	0000d111 	.word	0x0000d111

08002258 <getNodeID>:

uint16_t getNodeID(){
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
	 return flashReadNumber(MEM_NODE_ID);
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <getNodeID+0x20>)
 800225e:	0018      	movs	r0, r3
 8002260:	f7fe fd02 	bl	8000c68 <flashReadNumber>
 8002264:	1c03      	adds	r3, r0, #0
 8002266:	1c18      	adds	r0, r3, #0
 8002268:	f7fe f86e 	bl	8000348 <__aeabi_f2uiz>
 800226c:	0003      	movs	r3, r0
 800226e:	b29b      	uxth	r3, r3
}
 8002270:	0018      	movs	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	08003f80 	.word	0x08003f80

0800227c <saveNodeID>:
void saveNodeID(){
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
	flashWriteNumber(MEM_NODE_ID,NODE_ID);
 8002280:	4a04      	ldr	r2, [pc, #16]	; (8002294 <saveNodeID+0x18>)
 8002282:	4b05      	ldr	r3, [pc, #20]	; (8002298 <saveNodeID+0x1c>)
 8002284:	1c11      	adds	r1, r2, #0
 8002286:	0018      	movs	r0, r3
 8002288:	f7fe fcd6 	bl	8000c38 <flashWriteNumber>
}
 800228c:	46c0      	nop			; (mov r8, r8)
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	47212500 	.word	0x47212500
 8002298:	08003f80 	.word	0x08003f80

0800229c <savebroadcastID>:
uint16_t getbroadcastID(){
	 return flashReadNumber(MEM_BROADCAST_ID);
}
void savebroadcastID(){
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
	flashWriteNumber(MEM_BROADCAST_ID,BROADCAST_ID);
 80022a0:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <savebroadcastID+0x18>)
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <savebroadcastID+0x1c>)
 80022a4:	1c11      	adds	r1, r2, #0
 80022a6:	0018      	movs	r0, r3
 80022a8:	f7fe fcc6 	bl	8000c38 <flashWriteNumber>
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	47522200 	.word	0x47522200
 80022b8:	08003f88 	.word	0x08003f88

080022bc <savePermitID>:
uint16_t getPermitID(){
	 return flashReadNumber(MEM_PERMIT_ID);
}
void savePermitID(){
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
	flashWriteNumber(MEM_PERMIT_ID,PERMIT_ID);
 80022c0:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <savePermitID+0x18>)
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <savePermitID+0x1c>)
 80022c4:	1c11      	adds	r1, r2, #0
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7fe fcb6 	bl	8000c38 <flashWriteNumber>
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	47511100 	.word	0x47511100
 80022d8:	08003f8c 	.word	0x08003f8c

080022dc <getStartID>:
uint16_t getStartID(){
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
	 return flashReadNumber(MEM_START_ID);
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <getStartID+0x20>)
 80022e2:	0018      	movs	r0, r3
 80022e4:	f7fe fcc0 	bl	8000c68 <flashReadNumber>
 80022e8:	1c03      	adds	r3, r0, #0
 80022ea:	1c18      	adds	r0, r3, #0
 80022ec:	f7fe f82c 	bl	8000348 <__aeabi_f2uiz>
 80022f0:	0003      	movs	r3, r0
 80022f2:	b29b      	uxth	r3, r3
}
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	08003f90 	.word	0x08003f90

08002300 <saveStartID>:
void saveStartID(){
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
	flashWriteNumber(MEM_START_ID,START_ID);
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <saveStartID+0x18>)
 8002306:	4b05      	ldr	r3, [pc, #20]	; (800231c <saveStartID+0x1c>)
 8002308:	1c11      	adds	r1, r2, #0
 800230a:	0018      	movs	r0, r3
 800230c:	f7fe fc94 	bl	8000c38 <flashWriteNumber>
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	47544400 	.word	0x47544400
 800231c:	08003f90 	.word	0x08003f90

08002320 <saveDataID>:
uint16_t getDataID(){
	 return flashReadNumber(MEM_DATA_ID);
}
void saveDataID(){
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	flashWriteNumber(MEM_DATA_ID,DATA_ID);
 8002324:	4a04      	ldr	r2, [pc, #16]	; (8002338 <saveDataID+0x18>)
 8002326:	4b05      	ldr	r3, [pc, #20]	; (800233c <saveDataID+0x1c>)
 8002328:	1c11      	adds	r1, r2, #0
 800232a:	0018      	movs	r0, r3
 800232c:	f7fe fc84 	bl	8000c38 <flashWriteNumber>
}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	47533300 	.word	0x47533300
 800233c:	08003f94 	.word	0x08003f94

08002340 <getFlagStart>:
	 return flashReadNumber(MEM_GETWAY_ID);
}
void saveGWayID(uint16_t getwayID){
	flashWriteNumber(MEM_GETWAY_ID,getwayID);
}
bool getFlagStart(){
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
	if(flashReadNumber(MEM_FLAG_START)!=1){
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <getFlagStart+0x28>)
 8002346:	0018      	movs	r0, r3
 8002348:	f7fe fc8e 	bl	8000c68 <flashReadNumber>
 800234c:	1c03      	adds	r3, r0, #0
 800234e:	21fe      	movs	r1, #254	; 0xfe
 8002350:	0589      	lsls	r1, r1, #22
 8002352:	1c18      	adds	r0, r3, #0
 8002354:	f7fd ff82 	bl	800025c <__aeabi_fcmpeq>
 8002358:	1e03      	subs	r3, r0, #0
 800235a:	d101      	bne.n	8002360 <getFlagStart+0x20>
		return false;
 800235c:	2300      	movs	r3, #0
 800235e:	e000      	b.n	8002362 <getFlagStart+0x22>
	}else{
		return true;
 8002360:	2301      	movs	r3, #1
	}
}
 8002362:	0018      	movs	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	08003f98 	.word	0x08003f98

0800236c <setFlagStart>:
void setFlagStart(){
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
	flashWriteNumber(MEM_FLAG_START,FLAG_START);
 8002370:	22fe      	movs	r2, #254	; 0xfe
 8002372:	0592      	lsls	r2, r2, #22
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <setFlagStart+0x18>)
 8002376:	1c11      	adds	r1, r2, #0
 8002378:	0018      	movs	r0, r3
 800237a:	f7fe fc5d 	bl	8000c38 <flashWriteNumber>
}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	08003f98 	.word	0x08003f98

08002388 <initQueue>:




void initQueue(Queue_HandleTypedef *queue)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	queue->Front = queue->Rear = NULL ;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	601a      	str	r2, [r3, #0]
	queue->cnt = 0;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	721a      	strb	r2, [r3, #8]
}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b002      	add	sp, #8
 80023aa:	bd80      	pop	{r7, pc}

080023ac <isEmpty>:

bool isEmpty(Queue_HandleTypedef *queue)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	if(queue->cnt == 0){
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7a1b      	ldrb	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <isEmpty+0x14>
		return true ;
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <isEmpty+0x16>
	}else {
		return false ;
 80023c0:	2300      	movs	r3, #0
	}
}
 80023c2:	0018      	movs	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b002      	add	sp, #8
 80023c8:	bd80      	pop	{r7, pc}

080023ca <pushQueue>:

void pushQueue(Queue_HandleTypedef *queue,item x)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b084      	sub	sp, #16
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
	struct Node *temp = (struct Node*)malloc(strlen((char*)x));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	0018      	movs	r0, r3
 80023d8:	f7fd fe96 	bl	8000108 <strlen>
 80023dc:	0003      	movs	r3, r0
 80023de:	0018      	movs	r0, r3
 80023e0:	f004 f9ae 	bl	8006740 <malloc>
 80023e4:	0003      	movs	r3, r0
 80023e6:	60fb      	str	r3, [r7, #12]
	temp->Data = x ;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	601a      	str	r2, [r3, #0]
	temp->Next = NULL;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	605a      	str	r2, [r3, #4]
	if(isEmpty(queue))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	0018      	movs	r0, r3
 80023f8:	f7ff ffd8 	bl	80023ac <isEmpty>
 80023fc:	1e03      	subs	r3, r0, #0
 80023fe:	d007      	beq.n	8002410 <pushQueue+0x46>
	{
		queue->Front=queue->Rear=temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	e006      	b.n	800241e <pushQueue+0x54>
	}else {
		queue->Rear->Next = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	605a      	str	r2, [r3, #4]
		queue->Rear = temp;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	605a      	str	r2, [r3, #4]
	}
	queue->cnt ++;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	7a1b      	ldrb	r3, [r3, #8]
 8002422:	3301      	adds	r3, #1
 8002424:	b2da      	uxtb	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	721a      	strb	r2, [r3, #8]
}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	46bd      	mov	sp, r7
 800242e:	b004      	add	sp, #16
 8002430:	bd80      	pop	{r7, pc}

08002432 <popQueue>:

uint8_t popQueue(Queue_HandleTypedef *queue,item buffer)
{
 8002432:	b590      	push	{r4, r7, lr}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
	if(isEmpty(queue))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	0018      	movs	r0, r3
 8002440:	f7ff ffb4 	bl	80023ac <isEmpty>
 8002444:	1e03      	subs	r3, r0, #0
 8002446:	d001      	beq.n	800244c <popQueue+0x1a>
	{
		return 0;
 8002448:	2300      	movs	r3, #0
 800244a:	e02d      	b.n	80024a8 <popQueue+0x76>
	}else {
		strncpy((char*)buffer,(char*)queue->Front->Data,strlen((char*)queue->Front->Data));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681c      	ldr	r4, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0018      	movs	r0, r3
 800245a:	f7fd fe55 	bl	8000108 <strlen>
 800245e:	0002      	movs	r2, r0
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	0021      	movs	r1, r4
 8002464:	0018      	movs	r0, r3
 8002466:	f004 fa69 	bl	800693c <strncpy>
		if(queue->cnt==1){
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	7a1b      	ldrb	r3, [r3, #8]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d109      	bne.n	8002486 <popQueue+0x54>
			free(queue->Front);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	0018      	movs	r0, r3
 8002478:	f004 f96c 	bl	8006754 <free>
			initQueue(queue);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	0018      	movs	r0, r3
 8002480:	f7ff ff82 	bl	8002388 <initQueue>
 8002484:	e00f      	b.n	80024a6 <popQueue+0x74>
		}else {
			free(queue->Front);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0018      	movs	r0, r3
 800248c:	f004 f962 	bl	8006754 <free>
			queue->Front = queue->Front->Next;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	601a      	str	r2, [r3, #0]
			queue->cnt --;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	7a1b      	ldrb	r3, [r3, #8]
 800249e:	3b01      	subs	r3, #1
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	721a      	strb	r2, [r3, #8]
		}


	}
	return 1;
 80024a6:	2301      	movs	r3, #1
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b003      	add	sp, #12
 80024ae:	bd90      	pop	{r4, r7, pc}

080024b0 <binaryToBCD>:
#include "stm32l0xx.h"

extern RTC_HandleTypeDef hrtc;


uint8_t binaryToBCD(uint8_t binary){
 80024b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	0002      	movs	r2, r0
 80024b8:	1dfb      	adds	r3, r7, #7
 80024ba:	701a      	strb	r2, [r3, #0]
	if(binary<=9){
 80024bc:	1dfb      	adds	r3, r7, #7
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b09      	cmp	r3, #9
 80024c2:	d802      	bhi.n	80024ca <binaryToBCD+0x1a>
		return binary;
 80024c4:	1dfb      	adds	r3, r7, #7
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	e02b      	b.n	8002522 <binaryToBCD+0x72>
	}else {
		uint8_t fistNumber=0;
 80024ca:	250f      	movs	r5, #15
 80024cc:	197b      	adds	r3, r7, r5
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
		uint8_t endNumber=0;
 80024d2:	260e      	movs	r6, #14
 80024d4:	19bb      	adds	r3, r7, r6
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
		uint8_t BCDNumber=0;
 80024da:	210d      	movs	r1, #13
 80024dc:	187b      	adds	r3, r7, r1
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
		fistNumber = (binary/10);
 80024e2:	197c      	adds	r4, r7, r5
 80024e4:	1dfb      	adds	r3, r7, #7
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	210a      	movs	r1, #10
 80024ea:	0018      	movs	r0, r3
 80024ec:	f7fd fe1e 	bl	800012c <__udivsi3>
 80024f0:	0003      	movs	r3, r0
 80024f2:	7023      	strb	r3, [r4, #0]
		endNumber = (binary%10);
 80024f4:	19bc      	adds	r4, r7, r6
 80024f6:	1dfb      	adds	r3, r7, #7
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	210a      	movs	r1, #10
 80024fc:	0018      	movs	r0, r3
 80024fe:	f7fd fe9b 	bl	8000238 <__aeabi_uidivmod>
 8002502:	000b      	movs	r3, r1
 8002504:	7023      	strb	r3, [r4, #0]
		BCDNumber = (fistNumber<<4)|endNumber;
 8002506:	197b      	adds	r3, r7, r5
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	b25a      	sxtb	r2, r3
 800250e:	19bb      	adds	r3, r7, r6
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	b25b      	sxtb	r3, r3
 8002514:	4313      	orrs	r3, r2
 8002516:	b25a      	sxtb	r2, r3
 8002518:	210d      	movs	r1, #13
 800251a:	187b      	adds	r3, r7, r1
 800251c:	701a      	strb	r2, [r3, #0]
		return BCDNumber;
 800251e:	187b      	adds	r3, r7, r1
 8002520:	781b      	ldrb	r3, [r3, #0]
	}
}
 8002522:	0018      	movs	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	b005      	add	sp, #20
 8002528:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800252c <setTime>:

bool setTime(void){
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime = {0};
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	0018      	movs	r0, r3
 8002536:	2314      	movs	r3, #20
 8002538:	001a      	movs	r2, r3
 800253a:	2100      	movs	r1, #0
 800253c:	f004 f914 	bl	8006768 <memset>
	  RTC_DateTypeDef sDate = {0};
 8002540:	003b      	movs	r3, r7
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
	/** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x15;
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	2215      	movs	r2, #21
 800254a:	701a      	strb	r2, [r3, #0]
	  sTime.Minutes = 0x09;
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	2209      	movs	r2, #9
 8002550:	705a      	strb	r2, [r3, #1]
	  sTime.Seconds = 0x00;
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	2200      	movs	r2, #0
 8002556:	709a      	strb	r2, [r3, #2]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002558:	1d3b      	adds	r3, r7, #4
 800255a:	2200      	movs	r2, #0
 800255c:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	2200      	movs	r2, #0
 8002562:	611a      	str	r2, [r3, #16]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002564:	1d39      	adds	r1, r7, #4
 8002566:	4b15      	ldr	r3, [pc, #84]	; (80025bc <setTime+0x90>)
 8002568:	2201      	movs	r2, #1
 800256a:	0018      	movs	r0, r3
 800256c:	f002 f80c 	bl	8004588 <HAL_RTC_SetTime>
 8002570:	1e03      	subs	r3, r0, #0
 8002572:	d001      	beq.n	8002578 <setTime+0x4c>
	  {
	    return false;
 8002574:	2300      	movs	r3, #0
 8002576:	e01d      	b.n	80025b4 <setTime+0x88>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002578:	003b      	movs	r3, r7
 800257a:	2201      	movs	r2, #1
 800257c:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_APRIL;
 800257e:	003b      	movs	r3, r7
 8002580:	2204      	movs	r2, #4
 8002582:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x3;
 8002584:	003b      	movs	r3, r7
 8002586:	2203      	movs	r2, #3
 8002588:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x23;
 800258a:	003b      	movs	r3, r7
 800258c:	2223      	movs	r2, #35	; 0x23
 800258e:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002590:	0039      	movs	r1, r7
 8002592:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <setTime+0x90>)
 8002594:	2201      	movs	r2, #1
 8002596:	0018      	movs	r0, r3
 8002598:	f002 f8fe 	bl	8004798 <HAL_RTC_SetDate>
 800259c:	1e03      	subs	r3, r0, #0
 800259e:	d001      	beq.n	80025a4 <setTime+0x78>
	  {
		  return false;
 80025a0:	2300      	movs	r3, #0
 80025a2:	e007      	b.n	80025b4 <setTime+0x88>
	  }

	  /* USER CODE BEGIN Check_RTC_BKUP */
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x478);  // backup register
 80025a4:	238f      	movs	r3, #143	; 0x8f
 80025a6:	00da      	lsls	r2, r3, #3
 80025a8:	4b04      	ldr	r3, [pc, #16]	; (80025bc <setTime+0x90>)
 80025aa:	2101      	movs	r1, #1
 80025ac:	0018      	movs	r0, r3
 80025ae:	f002 fc5d 	bl	8004e6c <HAL_RTCEx_BKUPWrite>
	  /* USER CODE END Check_RTC_BKUP */
	  return true;
 80025b2:	2301      	movs	r3, #1

}
 80025b4:	0018      	movs	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b006      	add	sp, #24
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	2000014c 	.word	0x2000014c

080025c0 <getTime>:
void getTime(uint8_t *data)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b089      	sub	sp, #36	; 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  RTC_DateTypeDef gDate;
  RTC_TimeTypeDef gTime;

  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80025c8:	2408      	movs	r4, #8
 80025ca:	1939      	adds	r1, r7, r4
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <getTime+0x4c>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	0018      	movs	r0, r3
 80025d2:	f002 f883 	bl	80046dc <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80025d6:	231c      	movs	r3, #28
 80025d8:	18f9      	adds	r1, r7, r3
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <getTime+0x4c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	0018      	movs	r0, r3
 80025e0:	f002 f96e 	bl	80048c0 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  *data = gTime.Hours;
 80025e4:	0021      	movs	r1, r4
 80025e6:	187b      	adds	r3, r7, r1
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	701a      	strb	r2, [r3, #0]
  *(data+1)=gTime.Minutes;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3301      	adds	r3, #1
 80025f2:	187a      	adds	r2, r7, r1
 80025f4:	7852      	ldrb	r2, [r2, #1]
 80025f6:	701a      	strb	r2, [r3, #0]
  *(data+2)=gTime.Seconds;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3302      	adds	r3, #2
 80025fc:	187a      	adds	r2, r7, r1
 80025fe:	7892      	ldrb	r2, [r2, #2]
 8002600:	701a      	strb	r2, [r3, #0]
}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	46bd      	mov	sp, r7
 8002606:	b009      	add	sp, #36	; 0x24
 8002608:	bd90      	pop	{r4, r7, pc}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	2000014c 	.word	0x2000014c

08002610 <setAlarm>:
bool setAlarm(uint8_t Hours,uint8_t Minutes , uint8_t Seconds  ){
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b08d      	sub	sp, #52	; 0x34
 8002614:	af00      	add	r7, sp, #0
 8002616:	0004      	movs	r4, r0
 8002618:	0008      	movs	r0, r1
 800261a:	0011      	movs	r1, r2
 800261c:	1dfb      	adds	r3, r7, #7
 800261e:	1c22      	adds	r2, r4, #0
 8002620:	701a      	strb	r2, [r3, #0]
 8002622:	1dbb      	adds	r3, r7, #6
 8002624:	1c02      	adds	r2, r0, #0
 8002626:	701a      	strb	r2, [r3, #0]
 8002628:	1d7b      	adds	r3, r7, #5
 800262a:	1c0a      	adds	r2, r1, #0
 800262c:	701a      	strb	r2, [r3, #0]
		RTC_AlarmTypeDef sAlarm = {0};
 800262e:	2408      	movs	r4, #8
 8002630:	193b      	adds	r3, r7, r4
 8002632:	0018      	movs	r0, r3
 8002634:	2328      	movs	r3, #40	; 0x28
 8002636:	001a      	movs	r2, r3
 8002638:	2100      	movs	r1, #0
 800263a:	f004 f895 	bl	8006768 <memset>
	  sAlarm.AlarmTime.Hours = Hours;
 800263e:	0021      	movs	r1, r4
 8002640:	187b      	adds	r3, r7, r1
 8002642:	1dfa      	adds	r2, r7, #7
 8002644:	7812      	ldrb	r2, [r2, #0]
 8002646:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = Minutes;
 8002648:	187b      	adds	r3, r7, r1
 800264a:	1dba      	adds	r2, r7, #6
 800264c:	7812      	ldrb	r2, [r2, #0]
 800264e:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = Seconds;
 8002650:	187b      	adds	r3, r7, r1
 8002652:	1d7a      	adds	r2, r7, #5
 8002654:	7812      	ldrb	r2, [r2, #0]
 8002656:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002658:	0008      	movs	r0, r1
 800265a:	183b      	adds	r3, r7, r0
 800265c:	2200      	movs	r2, #0
 800265e:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002660:	183b      	adds	r3, r7, r0
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002666:	183b      	adds	r3, r7, r0
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800266c:	183b      	adds	r3, r7, r0
 800266e:	2200      	movs	r2, #0
 8002670:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002672:	183b      	adds	r3, r7, r0
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002678:	183b      	adds	r3, r7, r0
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x3;
 800267e:	183b      	adds	r3, r7, r0
 8002680:	2220      	movs	r2, #32
 8002682:	2103      	movs	r1, #3
 8002684:	5499      	strb	r1, [r3, r2]
	  sAlarm.Alarm = RTC_ALARM_A;
 8002686:	0001      	movs	r1, r0
 8002688:	187b      	adds	r3, r7, r1
 800268a:	2280      	movs	r2, #128	; 0x80
 800268c:	0052      	lsls	r2, r2, #1
 800268e:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002690:	1879      	adds	r1, r7, r1
 8002692:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <setAlarm+0xa0>)
 8002694:	2201      	movs	r2, #1
 8002696:	0018      	movs	r0, r3
 8002698:	f002 f962 	bl	8004960 <HAL_RTC_SetAlarm_IT>
 800269c:	1e03      	subs	r3, r0, #0
 800269e:	d001      	beq.n	80026a4 <setAlarm+0x94>
	  {
		  return false;
 80026a0:	2300      	movs	r3, #0
 80026a2:	e000      	b.n	80026a6 <setAlarm+0x96>
	  }
	  return true;
 80026a4:	2301      	movs	r3, #1
}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b00d      	add	sp, #52	; 0x34
 80026ac:	bd90      	pop	{r4, r7, pc}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	2000014c 	.word	0x2000014c

080026b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <HAL_MspInit+0x24>)
 80026ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_MspInit+0x24>)
 80026be:	2101      	movs	r1, #1
 80026c0:	430a      	orrs	r2, r1
 80026c2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <HAL_MspInit+0x24>)
 80026c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <HAL_MspInit+0x24>)
 80026ca:	2180      	movs	r1, #128	; 0x80
 80026cc:	0549      	lsls	r1, r1, #21
 80026ce:	430a      	orrs	r2, r1
 80026d0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000

080026dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <HAL_RTC_MspInit+0x38>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d10e      	bne.n	800270c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <HAL_RTC_MspInit+0x3c>)
 80026f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026f2:	4b09      	ldr	r3, [pc, #36]	; (8002718 <HAL_RTC_MspInit+0x3c>)
 80026f4:	2180      	movs	r1, #128	; 0x80
 80026f6:	02c9      	lsls	r1, r1, #11
 80026f8:	430a      	orrs	r2, r1
 80026fa:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 80026fc:	2200      	movs	r2, #0
 80026fe:	2101      	movs	r1, #1
 8002700:	2002      	movs	r0, #2
 8002702:	f000 fad3 	bl	8002cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002706:	2002      	movs	r0, #2
 8002708:	f000 fae5 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800270c:	46c0      	nop			; (mov r8, r8)
 800270e:	46bd      	mov	sp, r7
 8002710:	b002      	add	sp, #8
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40002800 	.word	0x40002800
 8002718:	40021000 	.word	0x40021000

0800271c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b089      	sub	sp, #36	; 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	240c      	movs	r4, #12
 8002726:	193b      	adds	r3, r7, r4
 8002728:	0018      	movs	r0, r3
 800272a:	2314      	movs	r3, #20
 800272c:	001a      	movs	r2, r3
 800272e:	2100      	movs	r1, #0
 8002730:	f004 f81a 	bl	8006768 <memset>
  if(hspi->Instance==SPI1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a18      	ldr	r2, [pc, #96]	; (800279c <HAL_SPI_MspInit+0x80>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d129      	bne.n	8002792 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800273e:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <HAL_SPI_MspInit+0x84>)
 8002740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <HAL_SPI_MspInit+0x84>)
 8002744:	2180      	movs	r1, #128	; 0x80
 8002746:	0149      	lsls	r1, r1, #5
 8002748:	430a      	orrs	r2, r1
 800274a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <HAL_SPI_MspInit+0x84>)
 800274e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002750:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <HAL_SPI_MspInit+0x84>)
 8002752:	2101      	movs	r1, #1
 8002754:	430a      	orrs	r2, r1
 8002756:	62da      	str	r2, [r3, #44]	; 0x2c
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <HAL_SPI_MspInit+0x84>)
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	2201      	movs	r2, #1
 800275e:	4013      	ands	r3, r2
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002764:	0021      	movs	r1, r4
 8002766:	187b      	adds	r3, r7, r1
 8002768:	22e0      	movs	r2, #224	; 0xe0
 800276a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	187b      	adds	r3, r7, r1
 800276e:	2202      	movs	r2, #2
 8002770:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	187b      	adds	r3, r7, r1
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002778:	187b      	adds	r3, r7, r1
 800277a:	2203      	movs	r2, #3
 800277c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800277e:	187b      	adds	r3, r7, r1
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002784:	187a      	adds	r2, r7, r1
 8002786:	23a0      	movs	r3, #160	; 0xa0
 8002788:	05db      	lsls	r3, r3, #23
 800278a:	0011      	movs	r1, r2
 800278c:	0018      	movs	r0, r3
 800278e:	f000 fd03 	bl	8003198 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	46bd      	mov	sp, r7
 8002796:	b009      	add	sp, #36	; 0x24
 8002798:	bd90      	pop	{r4, r7, pc}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	40013000 	.word	0x40013000
 80027a0:	40021000 	.word	0x40021000

080027a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b089      	sub	sp, #36	; 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	240c      	movs	r4, #12
 80027ae:	193b      	adds	r3, r7, r4
 80027b0:	0018      	movs	r0, r3
 80027b2:	2314      	movs	r3, #20
 80027b4:	001a      	movs	r2, r3
 80027b6:	2100      	movs	r1, #0
 80027b8:	f003 ffd6 	bl	8006768 <memset>
  if(huart->Instance==USART2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a18      	ldr	r2, [pc, #96]	; (8002824 <HAL_UART_MspInit+0x80>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d129      	bne.n	800281a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027c6:	4b18      	ldr	r3, [pc, #96]	; (8002828 <HAL_UART_MspInit+0x84>)
 80027c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027ca:	4b17      	ldr	r3, [pc, #92]	; (8002828 <HAL_UART_MspInit+0x84>)
 80027cc:	2180      	movs	r1, #128	; 0x80
 80027ce:	0289      	lsls	r1, r1, #10
 80027d0:	430a      	orrs	r2, r1
 80027d2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_UART_MspInit+0x84>)
 80027d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d8:	4b13      	ldr	r3, [pc, #76]	; (8002828 <HAL_UART_MspInit+0x84>)
 80027da:	2101      	movs	r1, #1
 80027dc:	430a      	orrs	r2, r1
 80027de:	62da      	str	r2, [r3, #44]	; 0x2c
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <HAL_UART_MspInit+0x84>)
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	2201      	movs	r2, #1
 80027e6:	4013      	ands	r3, r2
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027ec:	0021      	movs	r1, r4
 80027ee:	187b      	adds	r3, r7, r1
 80027f0:	220c      	movs	r2, #12
 80027f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f4:	187b      	adds	r3, r7, r1
 80027f6:	2202      	movs	r2, #2
 80027f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002800:	187b      	adds	r3, r7, r1
 8002802:	2203      	movs	r2, #3
 8002804:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002806:	187b      	adds	r3, r7, r1
 8002808:	2204      	movs	r2, #4
 800280a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280c:	187a      	adds	r2, r7, r1
 800280e:	23a0      	movs	r3, #160	; 0xa0
 8002810:	05db      	lsls	r3, r3, #23
 8002812:	0011      	movs	r1, r2
 8002814:	0018      	movs	r0, r3
 8002816:	f000 fcbf 	bl	8003198 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	46bd      	mov	sp, r7
 800281e:	b009      	add	sp, #36	; 0x24
 8002820:	bd90      	pop	{r4, r7, pc}
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	40004400 	.word	0x40004400
 8002828:	40021000 	.word	0x40021000

0800282c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002830:	e7fe      	b.n	8002830 <NMI_Handler+0x4>

08002832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002836:	e7fe      	b.n	8002836 <HardFault_Handler+0x4>

08002838 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002850:	f000 f940 	bl	8002ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002854:	46c0      	nop			; (mov r8, r8)
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <RTC_IRQHandler+0x14>)
 8002862:	0018      	movs	r0, r3
 8002864:	f002 f9de 	bl	8004c24 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	2000014c 	.word	0x2000014c

08002874 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	0018      	movs	r0, r3
 800287e:	f000 fe27 	bl	80034d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
	return 1;
 800288c:	2301      	movs	r3, #1
}
 800288e:	0018      	movs	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <_kill>:

int _kill(int pid, int sig)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800289e:	f003 ff25 	bl	80066ec <__errno>
 80028a2:	0003      	movs	r3, r0
 80028a4:	2216      	movs	r2, #22
 80028a6:	601a      	str	r2, [r3, #0]
	return -1;
 80028a8:	2301      	movs	r3, #1
 80028aa:	425b      	negs	r3, r3
}
 80028ac:	0018      	movs	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b002      	add	sp, #8
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <_exit>:

void _exit (int status)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028bc:	2301      	movs	r3, #1
 80028be:	425a      	negs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	0011      	movs	r1, r2
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7ff ffe5 	bl	8002894 <_kill>
	while (1) {}		/* Make sure we hang here */
 80028ca:	e7fe      	b.n	80028ca <_exit+0x16>

080028cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	e00a      	b.n	80028f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028de:	e000      	b.n	80028e2 <_read+0x16>
 80028e0:	bf00      	nop
 80028e2:	0001      	movs	r1, r0
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	60ba      	str	r2, [r7, #8]
 80028ea:	b2ca      	uxtb	r2, r1
 80028ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3301      	adds	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	dbf0      	blt.n	80028de <_read+0x12>
	}

return len;
 80028fc:	687b      	ldr	r3, [r7, #4]
}
 80028fe:	0018      	movs	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	b006      	add	sp, #24
 8002904:	bd80      	pop	{r7, pc}

08002906 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
	return -1;
 800290e:	2301      	movs	r3, #1
 8002910:	425b      	negs	r3, r3
}
 8002912:	0018      	movs	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	b002      	add	sp, #8
 8002918:	bd80      	pop	{r7, pc}

0800291a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2280      	movs	r2, #128	; 0x80
 8002928:	0192      	lsls	r2, r2, #6
 800292a:	605a      	str	r2, [r3, #4]
	return 0;
 800292c:	2300      	movs	r3, #0
}
 800292e:	0018      	movs	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	b002      	add	sp, #8
 8002934:	bd80      	pop	{r7, pc}

08002936 <_isatty>:

int _isatty(int file)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
	return 1;
 800293e:	2301      	movs	r3, #1
}
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	b002      	add	sp, #8
 8002946:	bd80      	pop	{r7, pc}

08002948 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
	return 0;
 8002954:	2300      	movs	r3, #0
}
 8002956:	0018      	movs	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	b004      	add	sp, #16
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002968:	4a14      	ldr	r2, [pc, #80]	; (80029bc <_sbrk+0x5c>)
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <_sbrk+0x60>)
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <_sbrk+0x64>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <_sbrk+0x64>)
 800297e:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <_sbrk+0x68>)
 8002980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <_sbrk+0x64>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	18d3      	adds	r3, r2, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	429a      	cmp	r2, r3
 800298e:	d207      	bcs.n	80029a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002990:	f003 feac 	bl	80066ec <__errno>
 8002994:	0003      	movs	r3, r0
 8002996:	220c      	movs	r2, #12
 8002998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800299a:	2301      	movs	r3, #1
 800299c:	425b      	negs	r3, r3
 800299e:	e009      	b.n	80029b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <_sbrk+0x64>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029a6:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <_sbrk+0x64>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	18d2      	adds	r2, r2, r3
 80029ae:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <_sbrk+0x64>)
 80029b0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80029b2:	68fb      	ldr	r3, [r7, #12]
}
 80029b4:	0018      	movs	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	b006      	add	sp, #24
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20005000 	.word	0x20005000
 80029c0:	00000400 	.word	0x00000400
 80029c4:	20000130 	.word	0x20000130
 80029c8:	200002c8 	.word	0x200002c8

080029cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d0:	46c0      	nop			; (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80029d8:	480d      	ldr	r0, [pc, #52]	; (8002a10 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80029da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029dc:	f7ff fff6 	bl	80029cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029e0:	480c      	ldr	r0, [pc, #48]	; (8002a14 <LoopForever+0x6>)
  ldr r1, =_edata
 80029e2:	490d      	ldr	r1, [pc, #52]	; (8002a18 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029e4:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <LoopForever+0xe>)
  movs r3, #0
 80029e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029e8:	e002      	b.n	80029f0 <LoopCopyDataInit>

080029ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ee:	3304      	adds	r3, #4

080029f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f4:	d3f9      	bcc.n	80029ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029f6:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029f8:	4c0a      	ldr	r4, [pc, #40]	; (8002a24 <LoopForever+0x16>)
  movs r3, #0
 80029fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029fc:	e001      	b.n	8002a02 <LoopFillZerobss>

080029fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a00:	3204      	adds	r2, #4

08002a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a04:	d3fb      	bcc.n	80029fe <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002a06:	f003 fe77 	bl	80066f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a0a:	f7ff f84f 	bl	8001aac <main>

08002a0e <LoopForever>:

LoopForever:
    b LoopForever
 8002a0e:	e7fe      	b.n	8002a0e <LoopForever>
   ldr   r0, =_estack
 8002a10:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002a1c:	08008084 	.word	0x08008084
  ldr r2, =_sbss
 8002a20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002a24:	200002c4 	.word	0x200002c4

08002a28 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a28:	e7fe      	b.n	8002a28 <ADC1_COMP_IRQHandler>
	...

08002a2c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a32:	1dfb      	adds	r3, r7, #7
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_Init+0x3c>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <HAL_Init+0x3c>)
 8002a3e:	2140      	movs	r1, #64	; 0x40
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a44:	2003      	movs	r0, #3
 8002a46:	f000 f811 	bl	8002a6c <HAL_InitTick>
 8002a4a:	1e03      	subs	r3, r0, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002a4e:	1dfb      	adds	r3, r7, #7
 8002a50:	2201      	movs	r2, #1
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e001      	b.n	8002a5a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a56:	f7ff fe2d 	bl	80026b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a5a:	1dfb      	adds	r3, r7, #7
 8002a5c:	781b      	ldrb	r3, [r3, #0]
}
 8002a5e:	0018      	movs	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b002      	add	sp, #8
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	40022000 	.word	0x40022000

08002a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a74:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <HAL_InitTick+0x5c>)
 8002a76:	681c      	ldr	r4, [r3, #0]
 8002a78:	4b14      	ldr	r3, [pc, #80]	; (8002acc <HAL_InitTick+0x60>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	0019      	movs	r1, r3
 8002a7e:	23fa      	movs	r3, #250	; 0xfa
 8002a80:	0098      	lsls	r0, r3, #2
 8002a82:	f7fd fb53 	bl	800012c <__udivsi3>
 8002a86:	0003      	movs	r3, r0
 8002a88:	0019      	movs	r1, r3
 8002a8a:	0020      	movs	r0, r4
 8002a8c:	f7fd fb4e 	bl	800012c <__udivsi3>
 8002a90:	0003      	movs	r3, r0
 8002a92:	0018      	movs	r0, r3
 8002a94:	f000 f92f 	bl	8002cf6 <HAL_SYSTICK_Config>
 8002a98:	1e03      	subs	r3, r0, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e00f      	b.n	8002ac0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d80b      	bhi.n	8002abe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	425b      	negs	r3, r3
 8002aac:	2200      	movs	r2, #0
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f000 f8fc 	bl	8002cac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_InitTick+0x64>)
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	e000      	b.n	8002ac0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b003      	add	sp, #12
 8002ac6:	bd90      	pop	{r4, r7, pc}
 8002ac8:	20000000 	.word	0x20000000
 8002acc:	20000008 	.word	0x20000008
 8002ad0:	20000004 	.word	0x20000004

08002ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_IncTick+0x1c>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	001a      	movs	r2, r3
 8002ade:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_IncTick+0x20>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	18d2      	adds	r2, r2, r3
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <HAL_IncTick+0x20>)
 8002ae6:	601a      	str	r2, [r3, #0]
}
 8002ae8:	46c0      	nop			; (mov r8, r8)
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	20000008 	.word	0x20000008
 8002af4:	20000298 	.word	0x20000298

08002af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  return uwTick;
 8002afc:	4b02      	ldr	r3, [pc, #8]	; (8002b08 <HAL_GetTick+0x10>)
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	0018      	movs	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	20000298 	.word	0x20000298

08002b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b14:	f7ff fff0 	bl	8002af8 <HAL_GetTick>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	3301      	adds	r3, #1
 8002b24:	d005      	beq.n	8002b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b26:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <HAL_Delay+0x44>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	001a      	movs	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	189b      	adds	r3, r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	f7ff ffe0 	bl	8002af8 <HAL_GetTick>
 8002b38:	0002      	movs	r2, r0
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d8f7      	bhi.n	8002b34 <HAL_Delay+0x28>
  {
  }
}
 8002b44:	46c0      	nop			; (mov r8, r8)
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b004      	add	sp, #16
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	20000008 	.word	0x20000008

08002b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	0002      	movs	r2, r0
 8002b5c:	1dfb      	adds	r3, r7, #7
 8002b5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b60:	1dfb      	adds	r3, r7, #7
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b7f      	cmp	r3, #127	; 0x7f
 8002b66:	d809      	bhi.n	8002b7c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b68:	1dfb      	adds	r3, r7, #7
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	001a      	movs	r2, r3
 8002b6e:	231f      	movs	r3, #31
 8002b70:	401a      	ands	r2, r3
 8002b72:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <__NVIC_EnableIRQ+0x30>)
 8002b74:	2101      	movs	r1, #1
 8002b76:	4091      	lsls	r1, r2
 8002b78:	000a      	movs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]
  }
}
 8002b7c:	46c0      	nop			; (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b002      	add	sp, #8
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	e000e100 	.word	0xe000e100

08002b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b88:	b590      	push	{r4, r7, lr}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	0002      	movs	r2, r0
 8002b90:	6039      	str	r1, [r7, #0]
 8002b92:	1dfb      	adds	r3, r7, #7
 8002b94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b96:	1dfb      	adds	r3, r7, #7
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8002b9c:	d828      	bhi.n	8002bf0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b9e:	4a2f      	ldr	r2, [pc, #188]	; (8002c5c <__NVIC_SetPriority+0xd4>)
 8002ba0:	1dfb      	adds	r3, r7, #7
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	b25b      	sxtb	r3, r3
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	33c0      	adds	r3, #192	; 0xc0
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	589b      	ldr	r3, [r3, r2]
 8002bae:	1dfa      	adds	r2, r7, #7
 8002bb0:	7812      	ldrb	r2, [r2, #0]
 8002bb2:	0011      	movs	r1, r2
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	400a      	ands	r2, r1
 8002bb8:	00d2      	lsls	r2, r2, #3
 8002bba:	21ff      	movs	r1, #255	; 0xff
 8002bbc:	4091      	lsls	r1, r2
 8002bbe:	000a      	movs	r2, r1
 8002bc0:	43d2      	mvns	r2, r2
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	019b      	lsls	r3, r3, #6
 8002bca:	22ff      	movs	r2, #255	; 0xff
 8002bcc:	401a      	ands	r2, r3
 8002bce:	1dfb      	adds	r3, r7, #7
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	4003      	ands	r3, r0
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bdc:	481f      	ldr	r0, [pc, #124]	; (8002c5c <__NVIC_SetPriority+0xd4>)
 8002bde:	1dfb      	adds	r3, r7, #7
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	b25b      	sxtb	r3, r3
 8002be4:	089b      	lsrs	r3, r3, #2
 8002be6:	430a      	orrs	r2, r1
 8002be8:	33c0      	adds	r3, #192	; 0xc0
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002bee:	e031      	b.n	8002c54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bf0:	4a1b      	ldr	r2, [pc, #108]	; (8002c60 <__NVIC_SetPriority+0xd8>)
 8002bf2:	1dfb      	adds	r3, r7, #7
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	230f      	movs	r3, #15
 8002bfa:	400b      	ands	r3, r1
 8002bfc:	3b08      	subs	r3, #8
 8002bfe:	089b      	lsrs	r3, r3, #2
 8002c00:	3306      	adds	r3, #6
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	18d3      	adds	r3, r2, r3
 8002c06:	3304      	adds	r3, #4
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	1dfa      	adds	r2, r7, #7
 8002c0c:	7812      	ldrb	r2, [r2, #0]
 8002c0e:	0011      	movs	r1, r2
 8002c10:	2203      	movs	r2, #3
 8002c12:	400a      	ands	r2, r1
 8002c14:	00d2      	lsls	r2, r2, #3
 8002c16:	21ff      	movs	r1, #255	; 0xff
 8002c18:	4091      	lsls	r1, r2
 8002c1a:	000a      	movs	r2, r1
 8002c1c:	43d2      	mvns	r2, r2
 8002c1e:	401a      	ands	r2, r3
 8002c20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	019b      	lsls	r3, r3, #6
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	401a      	ands	r2, r3
 8002c2a:	1dfb      	adds	r3, r7, #7
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	0018      	movs	r0, r3
 8002c30:	2303      	movs	r3, #3
 8002c32:	4003      	ands	r3, r0
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c38:	4809      	ldr	r0, [pc, #36]	; (8002c60 <__NVIC_SetPriority+0xd8>)
 8002c3a:	1dfb      	adds	r3, r7, #7
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	001c      	movs	r4, r3
 8002c40:	230f      	movs	r3, #15
 8002c42:	4023      	ands	r3, r4
 8002c44:	3b08      	subs	r3, #8
 8002c46:	089b      	lsrs	r3, r3, #2
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	3306      	adds	r3, #6
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	18c3      	adds	r3, r0, r3
 8002c50:	3304      	adds	r3, #4
 8002c52:	601a      	str	r2, [r3, #0]
}
 8002c54:	46c0      	nop			; (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b003      	add	sp, #12
 8002c5a:	bd90      	pop	{r4, r7, pc}
 8002c5c:	e000e100 	.word	0xe000e100
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	1e5a      	subs	r2, r3, #1
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	045b      	lsls	r3, r3, #17
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d301      	bcc.n	8002c7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e010      	b.n	8002c9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <SysTick_Config+0x44>)
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	3a01      	subs	r2, #1
 8002c82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c84:	2301      	movs	r3, #1
 8002c86:	425b      	negs	r3, r3
 8002c88:	2103      	movs	r1, #3
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f7ff ff7c 	bl	8002b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <SysTick_Config+0x44>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c96:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <SysTick_Config+0x44>)
 8002c98:	2207      	movs	r2, #7
 8002c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b002      	add	sp, #8
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	e000e010 	.word	0xe000e010

08002cac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	210f      	movs	r1, #15
 8002cb8:	187b      	adds	r3, r7, r1
 8002cba:	1c02      	adds	r2, r0, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	b25b      	sxtb	r3, r3
 8002cc6:	0011      	movs	r1, r2
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7ff ff5d 	bl	8002b88 <__NVIC_SetPriority>
}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b004      	add	sp, #16
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	0002      	movs	r2, r0
 8002cde:	1dfb      	adds	r3, r7, #7
 8002ce0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce2:	1dfb      	adds	r3, r7, #7
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	b25b      	sxtb	r3, r3
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f7ff ff33 	bl	8002b54 <__NVIC_EnableIRQ>
}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b002      	add	sp, #8
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f7ff ffaf 	bl	8002c64 <SysTick_Config>
 8002d06:	0003      	movs	r3, r0
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b002      	add	sp, #8
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8002d10:	b5b0      	push	{r4, r5, r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d1c:	2317      	movs	r3, #23
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002d24:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <HAL_FLASH_Program+0x70>)
 8002d26:	7c1b      	ldrb	r3, [r3, #16]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_FLASH_Program+0x20>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e022      	b.n	8002d76 <HAL_FLASH_Program+0x66>
 8002d30:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <HAL_FLASH_Program+0x70>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002d36:	2517      	movs	r5, #23
 8002d38:	197c      	adds	r4, r7, r5
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_FLASH_Program+0x74>)
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f000 f895 	bl	8002e6c <FLASH_WaitForLastOperation>
 8002d42:	0003      	movs	r3, r0
 8002d44:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8002d46:	0029      	movs	r1, r5
 8002d48:	187b      	adds	r3, r7, r1
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10c      	bne.n	8002d6a <HAL_FLASH_Program+0x5a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_FLASH_Program+0x70>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002d5c:	187c      	adds	r4, r7, r1
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_FLASH_Program+0x74>)
 8002d60:	0018      	movs	r0, r3
 8002d62:	f000 f883 	bl	8002e6c <FLASH_WaitForLastOperation>
 8002d66:	0003      	movs	r3, r0
 8002d68:	7023      	strb	r3, [r4, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002d6a:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_FLASH_Program+0x70>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	741a      	strb	r2, [r3, #16]

  return status;
 8002d70:	2317      	movs	r3, #23
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	781b      	ldrb	r3, [r3, #0]
}
 8002d76:	0018      	movs	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b006      	add	sp, #24
 8002d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	2000029c 	.word	0x2000029c
 8002d84:	0000c350 	.word	0x0000c350

08002d88 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  /* Unlocking FLASH_PECR register access*/
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8002d8e:	4b23      	ldr	r3, [pc, #140]	; (8002e1c <HAL_FLASH_Unlock+0x94>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d11a      	bne.n	8002dd0 <HAL_FLASH_Unlock+0x48>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002da0:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8002da2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002da4:	b672      	cpsid	i
}
 8002da6:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 8002da8:	4b1c      	ldr	r3, [pc, #112]	; (8002e1c <HAL_FLASH_Unlock+0x94>)
 8002daa:	4a1d      	ldr	r2, [pc, #116]	; (8002e20 <HAL_FLASH_Unlock+0x98>)
 8002dac:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8002dae:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <HAL_FLASH_Unlock+0x94>)
 8002db0:	4a1c      	ldr	r2, [pc, #112]	; (8002e24 <HAL_FLASH_Unlock+0x9c>)
 8002db2:	60da      	str	r2, [r3, #12]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f383 8810 	msr	PRIMASK, r3
}
 8002dbe:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8002dc0:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <HAL_FLASH_Unlock+0x94>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_FLASH_Unlock+0x48>
    {
      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e021      	b.n	8002e14 <HAL_FLASH_Unlock+0x8c>
    }
  }

  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8002dd0:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <HAL_FLASH_Unlock+0x94>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d11a      	bne.n	8002e12 <HAL_FLASH_Unlock+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8002de0:	607b      	str	r3, [r7, #4]
  return(result);
 8002de2:	687b      	ldr	r3, [r7, #4]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8002de4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002de6:	b672      	cpsid	i
}
 8002de8:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8002dea:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <HAL_FLASH_Unlock+0x94>)
 8002dec:	4a0e      	ldr	r2, [pc, #56]	; (8002e28 <HAL_FLASH_Unlock+0xa0>)
 8002dee:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 8002df0:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <HAL_FLASH_Unlock+0x94>)
 8002df2:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <HAL_FLASH_Unlock+0xa4>)
 8002df4:	611a      	str	r2, [r3, #16]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f383 8810 	msr	PRIMASK, r3
}
 8002e00:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_FLASH_Unlock+0x94>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d101      	bne.n	8002e12 <HAL_FLASH_Unlock+0x8a>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_FLASH_Unlock+0x8c>
    }
  }

  return HAL_OK; 
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	0018      	movs	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b006      	add	sp, #24
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40022000 	.word	0x40022000
 8002e20:	89abcdef 	.word	0x89abcdef
 8002e24:	02030405 	.word	0x02030405
 8002e28:	8c9daebf 	.word	0x8c9daebf
 8002e2c:	13141516 	.word	0x13141516

08002e30 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8002e34:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <HAL_FLASH_Lock+0x24>)
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <HAL_FLASH_Lock+0x24>)
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	605a      	str	r2, [r3, #4]
  
  /* Set the PELOCK Bit to lock the PECR Register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <HAL_FLASH_Lock+0x24>)
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <HAL_FLASH_Lock+0x24>)
 8002e46:	2101      	movs	r1, #1
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]

  return HAL_OK;  
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	0018      	movs	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40022000 	.word	0x40022000

08002e58 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002e5c:	4b02      	ldr	r3, [pc, #8]	; (8002e68 <HAL_FLASH_GetError+0x10>)
 8002e5e:	695b      	ldr	r3, [r3, #20]
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	2000029c 	.word	0x2000029c

08002e6c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002e74:	f7ff fe40 	bl	8002af8 <HAL_GetTick>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002e7c:	e00f      	b.n	8002e9e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3301      	adds	r3, #1
 8002e82:	d00c      	beq.n	8002e9e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d007      	beq.n	8002e9a <FLASH_WaitForLastOperation+0x2e>
 8002e8a:	f7ff fe35 	bl	8002af8 <HAL_GetTick>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d201      	bcs.n	8002e9e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e052      	b.n	8002f44 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002e9e:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <FLASH_WaitForLastOperation+0xe0>)
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d0e9      	beq.n	8002e7e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002eaa:	4b28      	ldr	r3, [pc, #160]	; (8002f4c <FLASH_WaitForLastOperation+0xe0>)
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d102      	bne.n	8002ebc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002eb6:	4b25      	ldr	r3, [pc, #148]	; (8002f4c <FLASH_WaitForLastOperation+0xe0>)
 8002eb8:	2202      	movs	r2, #2
 8002eba:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8002ebc:	4b23      	ldr	r3, [pc, #140]	; (8002f4c <FLASH_WaitForLastOperation+0xe0>)
 8002ebe:	699a      	ldr	r2, [r3, #24]
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d035      	beq.n	8002f3a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8002ece:	4b1f      	ldr	r3, [pc, #124]	; (8002f4c <FLASH_WaitForLastOperation+0xe0>)
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d02c      	beq.n	8002f3a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8002ee0:	4b1a      	ldr	r3, [pc, #104]	; (8002f4c <FLASH_WaitForLastOperation+0xe0>)
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	2380      	movs	r3, #128	; 0x80
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d023      	beq.n	8002f3a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8002ef2:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <FLASH_WaitForLastOperation+0xe0>)
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8002efc:	2380      	movs	r3, #128	; 0x80
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d01a      	beq.n	8002f3a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <FLASH_WaitForLastOperation+0xe0>)
 8002f06:	699a      	ldr	r2, [r3, #24]
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	019b      	lsls	r3, r3, #6
 8002f0c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	019b      	lsls	r3, r3, #6
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d011      	beq.n	8002f3a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8002f16:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <FLASH_WaitForLastOperation+0xe0>)
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	029b      	lsls	r3, r3, #10
 8002f1e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	029b      	lsls	r3, r3, #10
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d008      	beq.n	8002f3a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8002f28:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <FLASH_WaitForLastOperation+0xe0>)
 8002f2a:	699a      	ldr	r2, [r3, #24]
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	025b      	lsls	r3, r3, #9
 8002f30:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	025b      	lsls	r3, r3, #9
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d103      	bne.n	8002f42 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 8002f3a:	f000 f809 	bl	8002f50 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	0018      	movs	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b004      	add	sp, #16
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40022000 	.word	0x40022000

08002f50 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002f5a:	4b49      	ldr	r3, [pc, #292]	; (8003080 <FLASH_SetErrorCode+0x130>)
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	401a      	ands	r2, r3
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d10a      	bne.n	8002f82 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002f6c:	4b45      	ldr	r3, [pc, #276]	; (8003084 <FLASH_SetErrorCode+0x134>)
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	2202      	movs	r2, #2
 8002f72:	431a      	orrs	r2, r3
 8002f74:	4b43      	ldr	r3, [pc, #268]	; (8003084 <FLASH_SetErrorCode+0x134>)
 8002f76:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2280      	movs	r2, #128	; 0x80
 8002f7c:	0052      	lsls	r2, r2, #1
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8002f82:	4b3f      	ldr	r3, [pc, #252]	; (8003080 <FLASH_SetErrorCode+0x130>)
 8002f84:	699a      	ldr	r2, [r3, #24]
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d10a      	bne.n	8002faa <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002f94:	4b3b      	ldr	r3, [pc, #236]	; (8003084 <FLASH_SetErrorCode+0x134>)
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	4b39      	ldr	r3, [pc, #228]	; (8003084 <FLASH_SetErrorCode+0x134>)
 8002f9e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2280      	movs	r2, #128	; 0x80
 8002fa4:	0092      	lsls	r2, r2, #2
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8002faa:	4b35      	ldr	r3, [pc, #212]	; (8003080 <FLASH_SetErrorCode+0x130>)
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	2380      	movs	r3, #128	; 0x80
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d10a      	bne.n	8002fd2 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8002fbc:	4b31      	ldr	r3, [pc, #196]	; (8003084 <FLASH_SetErrorCode+0x134>)
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	4b2f      	ldr	r3, [pc, #188]	; (8003084 <FLASH_SetErrorCode+0x134>)
 8002fc6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2280      	movs	r2, #128	; 0x80
 8002fcc:	00d2      	lsls	r2, r2, #3
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002fd2:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <FLASH_SetErrorCode+0x130>)
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	2380      	movs	r3, #128	; 0x80
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	401a      	ands	r2, r3
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d10a      	bne.n	8002ffa <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002fe4:	4b27      	ldr	r3, [pc, #156]	; (8003084 <FLASH_SetErrorCode+0x134>)
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	2204      	movs	r2, #4
 8002fea:	431a      	orrs	r2, r3
 8002fec:	4b25      	ldr	r3, [pc, #148]	; (8003084 <FLASH_SetErrorCode+0x134>)
 8002fee:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2280      	movs	r2, #128	; 0x80
 8002ff4:	0112      	lsls	r2, r2, #4
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8002ffa:	4b21      	ldr	r3, [pc, #132]	; (8003080 <FLASH_SetErrorCode+0x130>)
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	2380      	movs	r3, #128	; 0x80
 8003000:	019b      	lsls	r3, r3, #6
 8003002:	401a      	ands	r2, r3
 8003004:	2380      	movs	r3, #128	; 0x80
 8003006:	019b      	lsls	r3, r3, #6
 8003008:	429a      	cmp	r2, r3
 800300a:	d10a      	bne.n	8003022 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800300c:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <FLASH_SetErrorCode+0x134>)
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	2210      	movs	r2, #16
 8003012:	431a      	orrs	r2, r3
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <FLASH_SetErrorCode+0x134>)
 8003016:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2280      	movs	r2, #128	; 0x80
 800301c:	0192      	lsls	r2, r2, #6
 800301e:	4313      	orrs	r3, r2
 8003020:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8003022:	4b17      	ldr	r3, [pc, #92]	; (8003080 <FLASH_SetErrorCode+0x130>)
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	029b      	lsls	r3, r3, #10
 800302a:	401a      	ands	r2, r3
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	029b      	lsls	r3, r3, #10
 8003030:	429a      	cmp	r2, r3
 8003032:	d109      	bne.n	8003048 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <FLASH_SetErrorCode+0x134>)
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	2220      	movs	r2, #32
 800303a:	431a      	orrs	r2, r3
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <FLASH_SetErrorCode+0x134>)
 800303e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2220      	movs	r2, #32
 8003044:	4313      	orrs	r3, r2
 8003046:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8003048:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <FLASH_SetErrorCode+0x130>)
 800304a:	699a      	ldr	r2, [r3, #24]
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	025b      	lsls	r3, r3, #9
 8003050:	401a      	ands	r2, r3
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	025b      	lsls	r3, r3, #9
 8003056:	429a      	cmp	r2, r3
 8003058:	d10a      	bne.n	8003070 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <FLASH_SetErrorCode+0x134>)
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	2240      	movs	r2, #64	; 0x40
 8003060:	431a      	orrs	r2, r3
 8003062:	4b08      	ldr	r3, [pc, #32]	; (8003084 <FLASH_SetErrorCode+0x134>)
 8003064:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2280      	movs	r2, #128	; 0x80
 800306a:	0252      	lsls	r2, r2, #9
 800306c:	4313      	orrs	r3, r2
 800306e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003070:	4b03      	ldr	r3, [pc, #12]	; (8003080 <FLASH_SetErrorCode+0x130>)
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	619a      	str	r2, [r3, #24]
}  
 8003076:	46c0      	nop			; (mov r8, r8)
 8003078:	46bd      	mov	sp, r7
 800307a:	b002      	add	sp, #8
 800307c:	bd80      	pop	{r7, pc}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	40022000 	.word	0x40022000
 8003084:	2000029c 	.word	0x2000029c

08003088 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003088:	b5b0      	push	{r4, r5, r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003092:	230f      	movs	r3, #15
 8003094:	18fb      	adds	r3, r7, r3
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800309e:	4b29      	ldr	r3, [pc, #164]	; (8003144 <HAL_FLASHEx_Erase+0xbc>)
 80030a0:	7c1b      	ldrb	r3, [r3, #16]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_FLASHEx_Erase+0x22>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e048      	b.n	800313c <HAL_FLASHEx_Erase+0xb4>
 80030aa:	4b26      	ldr	r3, [pc, #152]	; (8003144 <HAL_FLASHEx_Erase+0xbc>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030b0:	250f      	movs	r5, #15
 80030b2:	197c      	adds	r4, r7, r5
 80030b4:	4b24      	ldr	r3, [pc, #144]	; (8003148 <HAL_FLASHEx_Erase+0xc0>)
 80030b6:	0018      	movs	r0, r3
 80030b8:	f7ff fed8 	bl	8002e6c <FLASH_WaitForLastOperation>
 80030bc:	0003      	movs	r3, r0
 80030be:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80030c0:	197b      	adds	r3, r7, r5
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d133      	bne.n	8003130 <HAL_FLASHEx_Erase+0xa8>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2201      	movs	r2, #1
 80030cc:	4252      	negs	r2, r2
 80030ce:	601a      	str	r2, [r3, #0]
    assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_SIZE - 1U));

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress; 
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	e022      	b.n	800311e <HAL_FLASHEx_Erase+0x96>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	0018      	movs	r0, r3
 80030dc:	f000 f83a 	bl	8003154 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030e0:	250f      	movs	r5, #15
 80030e2:	197c      	adds	r4, r7, r5
 80030e4:	4b18      	ldr	r3, [pc, #96]	; (8003148 <HAL_FLASHEx_Erase+0xc0>)
 80030e6:	0018      	movs	r0, r3
 80030e8:	f7ff fec0 	bl	8002e6c <FLASH_WaitForLastOperation>
 80030ec:	0003      	movs	r3, r0
 80030ee:	7023      	strb	r3, [r4, #0]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 80030f0:	4b16      	ldr	r3, [pc, #88]	; (800314c <HAL_FLASHEx_Erase+0xc4>)
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	4b15      	ldr	r3, [pc, #84]	; (800314c <HAL_FLASHEx_Erase+0xc4>)
 80030f6:	2108      	movs	r1, #8
 80030f8:	438a      	bics	r2, r1
 80030fa:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 80030fc:	4b13      	ldr	r3, [pc, #76]	; (800314c <HAL_FLASHEx_Erase+0xc4>)
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	4b12      	ldr	r3, [pc, #72]	; (800314c <HAL_FLASHEx_Erase+0xc4>)
 8003102:	4913      	ldr	r1, [pc, #76]	; (8003150 <HAL_FLASHEx_Erase+0xc8>)
 8003104:	400a      	ands	r2, r1
 8003106:	605a      	str	r2, [r3, #4]

      if (status != HAL_OK) 
 8003108:	197b      	adds	r3, r7, r5
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_FLASHEx_Erase+0x90>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	601a      	str	r2, [r3, #0]
        break;
 8003116:	e00b      	b.n	8003130 <HAL_FLASHEx_Erase+0xa8>
        address += FLASH_PAGE_SIZE)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	3380      	adds	r3, #128	; 0x80
 800311c:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	01da      	lsls	r2, r3, #7
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	18d3      	adds	r3, r2, r3
    for(address = pEraseInit->PageAddress; 
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	429a      	cmp	r2, r3
 800312e:	d3d3      	bcc.n	80030d8 <HAL_FLASHEx_Erase+0x50>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <HAL_FLASHEx_Erase+0xbc>)
 8003132:	2200      	movs	r2, #0
 8003134:	741a      	strb	r2, [r3, #16]

  return status;
 8003136:	230f      	movs	r3, #15
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	781b      	ldrb	r3, [r3, #0]
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	b004      	add	sp, #16
 8003142:	bdb0      	pop	{r4, r5, r7, pc}
 8003144:	2000029c 	.word	0x2000029c
 8003148:	0000c350 	.word	0x0000c350
 800314c:	40022000 	.word	0x40022000
 8003150:	fffffdff 	.word	0xfffffdff

08003154 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load 
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <FLASH_PageErase+0x3c>)
 800315e:	2200      	movs	r2, #0
 8003160:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <FLASH_PageErase+0x40>)
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <FLASH_PageErase+0x40>)
 8003168:	2180      	movs	r1, #128	; 0x80
 800316a:	0089      	lsls	r1, r1, #2
 800316c:	430a      	orrs	r2, r1
 800316e:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8003170:	4b08      	ldr	r3, [pc, #32]	; (8003194 <FLASH_PageErase+0x40>)
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	4b07      	ldr	r3, [pc, #28]	; (8003194 <FLASH_PageErase+0x40>)
 8003176:	2108      	movs	r1, #8
 8003178:	430a      	orrs	r2, r1
 800317a:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	227f      	movs	r2, #127	; 0x7f
 8003180:	4393      	bics	r3, r2
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	46bd      	mov	sp, r7
 800318a:	b002      	add	sp, #8
 800318c:	bd80      	pop	{r7, pc}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	2000029c 	.word	0x2000029c
 8003194:	40022000 	.word	0x40022000

08003198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80031ae:	e155      	b.n	800345c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2101      	movs	r1, #1
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4091      	lsls	r1, r2
 80031ba:	000a      	movs	r2, r1
 80031bc:	4013      	ands	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d100      	bne.n	80031c8 <HAL_GPIO_Init+0x30>
 80031c6:	e146      	b.n	8003456 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	2203      	movs	r2, #3
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d005      	beq.n	80031e0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2203      	movs	r2, #3
 80031da:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d130      	bne.n	8003242 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	2203      	movs	r2, #3
 80031ec:	409a      	lsls	r2, r3
 80031ee:	0013      	movs	r3, r2
 80031f0:	43da      	mvns	r2, r3
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	409a      	lsls	r2, r3
 8003202:	0013      	movs	r3, r2
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003216:	2201      	movs	r2, #1
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	409a      	lsls	r2, r3
 800321c:	0013      	movs	r3, r2
 800321e:	43da      	mvns	r2, r3
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4013      	ands	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	091b      	lsrs	r3, r3, #4
 800322c:	2201      	movs	r2, #1
 800322e:	401a      	ands	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	409a      	lsls	r2, r3
 8003234:	0013      	movs	r3, r2
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2203      	movs	r2, #3
 8003248:	4013      	ands	r3, r2
 800324a:	2b03      	cmp	r3, #3
 800324c:	d017      	beq.n	800327e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	2203      	movs	r2, #3
 800325a:	409a      	lsls	r2, r3
 800325c:	0013      	movs	r3, r2
 800325e:	43da      	mvns	r2, r3
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4013      	ands	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	409a      	lsls	r2, r3
 8003270:	0013      	movs	r3, r2
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2203      	movs	r2, #3
 8003284:	4013      	ands	r3, r2
 8003286:	2b02      	cmp	r3, #2
 8003288:	d123      	bne.n	80032d2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	08da      	lsrs	r2, r3, #3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3208      	adds	r2, #8
 8003292:	0092      	lsls	r2, r2, #2
 8003294:	58d3      	ldr	r3, [r2, r3]
 8003296:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2207      	movs	r2, #7
 800329c:	4013      	ands	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	220f      	movs	r2, #15
 80032a2:	409a      	lsls	r2, r3
 80032a4:	0013      	movs	r3, r2
 80032a6:	43da      	mvns	r2, r3
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2107      	movs	r1, #7
 80032b6:	400b      	ands	r3, r1
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	409a      	lsls	r2, r3
 80032bc:	0013      	movs	r3, r2
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	08da      	lsrs	r2, r3, #3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3208      	adds	r2, #8
 80032cc:	0092      	lsls	r2, r2, #2
 80032ce:	6939      	ldr	r1, [r7, #16]
 80032d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	2203      	movs	r2, #3
 80032de:	409a      	lsls	r2, r3
 80032e0:	0013      	movs	r3, r2
 80032e2:	43da      	mvns	r2, r3
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4013      	ands	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2203      	movs	r2, #3
 80032f0:	401a      	ands	r2, r3
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	409a      	lsls	r2, r3
 80032f8:	0013      	movs	r3, r2
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	23c0      	movs	r3, #192	; 0xc0
 800330c:	029b      	lsls	r3, r3, #10
 800330e:	4013      	ands	r3, r2
 8003310:	d100      	bne.n	8003314 <HAL_GPIO_Init+0x17c>
 8003312:	e0a0      	b.n	8003456 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003314:	4b57      	ldr	r3, [pc, #348]	; (8003474 <HAL_GPIO_Init+0x2dc>)
 8003316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003318:	4b56      	ldr	r3, [pc, #344]	; (8003474 <HAL_GPIO_Init+0x2dc>)
 800331a:	2101      	movs	r1, #1
 800331c:	430a      	orrs	r2, r1
 800331e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003320:	4a55      	ldr	r2, [pc, #340]	; (8003478 <HAL_GPIO_Init+0x2e0>)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	089b      	lsrs	r3, r3, #2
 8003326:	3302      	adds	r3, #2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	589b      	ldr	r3, [r3, r2]
 800332c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2203      	movs	r2, #3
 8003332:	4013      	ands	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	220f      	movs	r2, #15
 8003338:	409a      	lsls	r2, r3
 800333a:	0013      	movs	r3, r2
 800333c:	43da      	mvns	r2, r3
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4013      	ands	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	23a0      	movs	r3, #160	; 0xa0
 8003348:	05db      	lsls	r3, r3, #23
 800334a:	429a      	cmp	r2, r3
 800334c:	d01f      	beq.n	800338e <HAL_GPIO_Init+0x1f6>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4a      	ldr	r2, [pc, #296]	; (800347c <HAL_GPIO_Init+0x2e4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d019      	beq.n	800338a <HAL_GPIO_Init+0x1f2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a49      	ldr	r2, [pc, #292]	; (8003480 <HAL_GPIO_Init+0x2e8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d013      	beq.n	8003386 <HAL_GPIO_Init+0x1ee>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a48      	ldr	r2, [pc, #288]	; (8003484 <HAL_GPIO_Init+0x2ec>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00d      	beq.n	8003382 <HAL_GPIO_Init+0x1ea>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a47      	ldr	r2, [pc, #284]	; (8003488 <HAL_GPIO_Init+0x2f0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d007      	beq.n	800337e <HAL_GPIO_Init+0x1e6>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a46      	ldr	r2, [pc, #280]	; (800348c <HAL_GPIO_Init+0x2f4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d101      	bne.n	800337a <HAL_GPIO_Init+0x1e2>
 8003376:	2305      	movs	r3, #5
 8003378:	e00a      	b.n	8003390 <HAL_GPIO_Init+0x1f8>
 800337a:	2306      	movs	r3, #6
 800337c:	e008      	b.n	8003390 <HAL_GPIO_Init+0x1f8>
 800337e:	2304      	movs	r3, #4
 8003380:	e006      	b.n	8003390 <HAL_GPIO_Init+0x1f8>
 8003382:	2303      	movs	r3, #3
 8003384:	e004      	b.n	8003390 <HAL_GPIO_Init+0x1f8>
 8003386:	2302      	movs	r3, #2
 8003388:	e002      	b.n	8003390 <HAL_GPIO_Init+0x1f8>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <HAL_GPIO_Init+0x1f8>
 800338e:	2300      	movs	r3, #0
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	2103      	movs	r1, #3
 8003394:	400a      	ands	r2, r1
 8003396:	0092      	lsls	r2, r2, #2
 8003398:	4093      	lsls	r3, r2
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033a0:	4935      	ldr	r1, [pc, #212]	; (8003478 <HAL_GPIO_Init+0x2e0>)
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	089b      	lsrs	r3, r3, #2
 80033a6:	3302      	adds	r3, #2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ae:	4b38      	ldr	r3, [pc, #224]	; (8003490 <HAL_GPIO_Init+0x2f8>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	43da      	mvns	r2, r3
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	2380      	movs	r3, #128	; 0x80
 80033c4:	035b      	lsls	r3, r3, #13
 80033c6:	4013      	ands	r3, r2
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80033d2:	4b2f      	ldr	r3, [pc, #188]	; (8003490 <HAL_GPIO_Init+0x2f8>)
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80033d8:	4b2d      	ldr	r3, [pc, #180]	; (8003490 <HAL_GPIO_Init+0x2f8>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	43da      	mvns	r2, r3
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4013      	ands	r3, r2
 80033e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	2380      	movs	r3, #128	; 0x80
 80033ee:	039b      	lsls	r3, r3, #14
 80033f0:	4013      	ands	r3, r2
 80033f2:	d003      	beq.n	80033fc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033fc:	4b24      	ldr	r3, [pc, #144]	; (8003490 <HAL_GPIO_Init+0x2f8>)
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003402:	4b23      	ldr	r3, [pc, #140]	; (8003490 <HAL_GPIO_Init+0x2f8>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	43da      	mvns	r2, r3
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4013      	ands	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	029b      	lsls	r3, r3, #10
 800341a:	4013      	ands	r3, r2
 800341c:	d003      	beq.n	8003426 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003426:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <HAL_GPIO_Init+0x2f8>)
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800342c:	4b18      	ldr	r3, [pc, #96]	; (8003490 <HAL_GPIO_Init+0x2f8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	43da      	mvns	r2, r3
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4013      	ands	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	025b      	lsls	r3, r3, #9
 8003444:	4013      	ands	r3, r2
 8003446:	d003      	beq.n	8003450 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003450:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <HAL_GPIO_Init+0x2f8>)
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	3301      	adds	r3, #1
 800345a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	40da      	lsrs	r2, r3
 8003464:	1e13      	subs	r3, r2, #0
 8003466:	d000      	beq.n	800346a <HAL_GPIO_Init+0x2d2>
 8003468:	e6a2      	b.n	80031b0 <HAL_GPIO_Init+0x18>
  }
}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	b006      	add	sp, #24
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40021000 	.word	0x40021000
 8003478:	40010000 	.word	0x40010000
 800347c:	50000400 	.word	0x50000400
 8003480:	50000800 	.word	0x50000800
 8003484:	50000c00 	.word	0x50000c00
 8003488:	50001000 	.word	0x50001000
 800348c:	50001c00 	.word	0x50001c00
 8003490:	40010400 	.word	0x40010400

08003494 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	0008      	movs	r0, r1
 800349e:	0011      	movs	r1, r2
 80034a0:	1cbb      	adds	r3, r7, #2
 80034a2:	1c02      	adds	r2, r0, #0
 80034a4:	801a      	strh	r2, [r3, #0]
 80034a6:	1c7b      	adds	r3, r7, #1
 80034a8:	1c0a      	adds	r2, r1, #0
 80034aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034ac:	1c7b      	adds	r3, r7, #1
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d004      	beq.n	80034be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034b4:	1cbb      	adds	r3, r7, #2
 80034b6:	881a      	ldrh	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80034bc:	e003      	b.n	80034c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80034be:	1cbb      	adds	r3, r7, #2
 80034c0:	881a      	ldrh	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	46bd      	mov	sp, r7
 80034ca:	b002      	add	sp, #8
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	0002      	movs	r2, r0
 80034d8:	1dbb      	adds	r3, r7, #6
 80034da:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	1dba      	adds	r2, r7, #6
 80034e2:	8812      	ldrh	r2, [r2, #0]
 80034e4:	4013      	ands	r3, r2
 80034e6:	d008      	beq.n	80034fa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034e8:	4b06      	ldr	r3, [pc, #24]	; (8003504 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80034ea:	1dba      	adds	r2, r7, #6
 80034ec:	8812      	ldrh	r2, [r2, #0]
 80034ee:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034f0:	1dbb      	adds	r3, r7, #6
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	0018      	movs	r0, r3
 80034f6:	f7fe faa3 	bl	8001a40 <HAL_GPIO_EXTI_Callback>
  }
}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b002      	add	sp, #8
 8003500:	bd80      	pop	{r7, pc}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	40010400 	.word	0x40010400

08003508 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <HAL_PWR_EnableBkUpAccess+0x18>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4b03      	ldr	r3, [pc, #12]	; (8003520 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003512:	2180      	movs	r1, #128	; 0x80
 8003514:	0049      	lsls	r1, r1, #1
 8003516:	430a      	orrs	r2, r1
 8003518:	601a      	str	r2, [r3, #0]
}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40007000 	.word	0x40007000

08003524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003524:	b5b0      	push	{r4, r5, r7, lr}
 8003526:	b08a      	sub	sp, #40	; 0x28
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	f000 fbbf 	bl	8003cb6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003538:	4bc9      	ldr	r3, [pc, #804]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	220c      	movs	r2, #12
 800353e:	4013      	ands	r3, r2
 8003540:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003542:	4bc7      	ldr	r3, [pc, #796]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	2380      	movs	r3, #128	; 0x80
 8003548:	025b      	lsls	r3, r3, #9
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2201      	movs	r2, #1
 8003554:	4013      	ands	r3, r2
 8003556:	d100      	bne.n	800355a <HAL_RCC_OscConfig+0x36>
 8003558:	e07e      	b.n	8003658 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	2b08      	cmp	r3, #8
 800355e:	d007      	beq.n	8003570 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	2b0c      	cmp	r3, #12
 8003564:	d112      	bne.n	800358c <HAL_RCC_OscConfig+0x68>
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	025b      	lsls	r3, r3, #9
 800356c:	429a      	cmp	r2, r3
 800356e:	d10d      	bne.n	800358c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003570:	4bbb      	ldr	r3, [pc, #748]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	2380      	movs	r3, #128	; 0x80
 8003576:	029b      	lsls	r3, r3, #10
 8003578:	4013      	ands	r3, r2
 800357a:	d100      	bne.n	800357e <HAL_RCC_OscConfig+0x5a>
 800357c:	e06b      	b.n	8003656 <HAL_RCC_OscConfig+0x132>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d167      	bne.n	8003656 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	f000 fb95 	bl	8003cb6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	025b      	lsls	r3, r3, #9
 8003594:	429a      	cmp	r2, r3
 8003596:	d107      	bne.n	80035a8 <HAL_RCC_OscConfig+0x84>
 8003598:	4bb1      	ldr	r3, [pc, #708]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	4bb0      	ldr	r3, [pc, #704]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 800359e:	2180      	movs	r1, #128	; 0x80
 80035a0:	0249      	lsls	r1, r1, #9
 80035a2:	430a      	orrs	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	e027      	b.n	80035f8 <HAL_RCC_OscConfig+0xd4>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	23a0      	movs	r3, #160	; 0xa0
 80035ae:	02db      	lsls	r3, r3, #11
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d10e      	bne.n	80035d2 <HAL_RCC_OscConfig+0xae>
 80035b4:	4baa      	ldr	r3, [pc, #680]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4ba9      	ldr	r3, [pc, #676]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80035ba:	2180      	movs	r1, #128	; 0x80
 80035bc:	02c9      	lsls	r1, r1, #11
 80035be:	430a      	orrs	r2, r1
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	4ba7      	ldr	r3, [pc, #668]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4ba6      	ldr	r3, [pc, #664]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80035c8:	2180      	movs	r1, #128	; 0x80
 80035ca:	0249      	lsls	r1, r1, #9
 80035cc:	430a      	orrs	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	e012      	b.n	80035f8 <HAL_RCC_OscConfig+0xd4>
 80035d2:	4ba3      	ldr	r3, [pc, #652]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	4ba2      	ldr	r3, [pc, #648]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80035d8:	49a2      	ldr	r1, [pc, #648]	; (8003864 <HAL_RCC_OscConfig+0x340>)
 80035da:	400a      	ands	r2, r1
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	4ba0      	ldr	r3, [pc, #640]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	025b      	lsls	r3, r3, #9
 80035e6:	4013      	ands	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4b9c      	ldr	r3, [pc, #624]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4b9b      	ldr	r3, [pc, #620]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80035f2:	499d      	ldr	r1, [pc, #628]	; (8003868 <HAL_RCC_OscConfig+0x344>)
 80035f4:	400a      	ands	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d015      	beq.n	800362c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7ff fa7a 	bl	8002af8 <HAL_GetTick>
 8003604:	0003      	movs	r3, r0
 8003606:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003608:	e009      	b.n	800361e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800360a:	f7ff fa75 	bl	8002af8 <HAL_GetTick>
 800360e:	0002      	movs	r2, r0
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b64      	cmp	r3, #100	; 0x64
 8003616:	d902      	bls.n	800361e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	f000 fb4c 	bl	8003cb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800361e:	4b90      	ldr	r3, [pc, #576]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	029b      	lsls	r3, r3, #10
 8003626:	4013      	ands	r3, r2
 8003628:	d0ef      	beq.n	800360a <HAL_RCC_OscConfig+0xe6>
 800362a:	e015      	b.n	8003658 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7ff fa64 	bl	8002af8 <HAL_GetTick>
 8003630:	0003      	movs	r3, r0
 8003632:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003636:	f7ff fa5f 	bl	8002af8 <HAL_GetTick>
 800363a:	0002      	movs	r2, r0
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b64      	cmp	r3, #100	; 0x64
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e336      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003648:	4b85      	ldr	r3, [pc, #532]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	029b      	lsls	r3, r3, #10
 8003650:	4013      	ands	r3, r2
 8003652:	d1f0      	bne.n	8003636 <HAL_RCC_OscConfig+0x112>
 8003654:	e000      	b.n	8003658 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003656:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2202      	movs	r2, #2
 800365e:	4013      	ands	r3, r2
 8003660:	d100      	bne.n	8003664 <HAL_RCC_OscConfig+0x140>
 8003662:	e099      	b.n	8003798 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	2220      	movs	r2, #32
 800366e:	4013      	ands	r3, r2
 8003670:	d009      	beq.n	8003686 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003672:	4b7b      	ldr	r3, [pc, #492]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	4b7a      	ldr	r3, [pc, #488]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 8003678:	2120      	movs	r1, #32
 800367a:	430a      	orrs	r2, r1
 800367c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	2220      	movs	r2, #32
 8003682:	4393      	bics	r3, r2
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	2b04      	cmp	r3, #4
 800368a:	d005      	beq.n	8003698 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	2b0c      	cmp	r3, #12
 8003690:	d13e      	bne.n	8003710 <HAL_RCC_OscConfig+0x1ec>
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d13b      	bne.n	8003710 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003698:	4b71      	ldr	r3, [pc, #452]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2204      	movs	r2, #4
 800369e:	4013      	ands	r3, r2
 80036a0:	d004      	beq.n	80036ac <HAL_RCC_OscConfig+0x188>
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e304      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ac:	4b6c      	ldr	r3, [pc, #432]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4a6e      	ldr	r2, [pc, #440]	; (800386c <HAL_RCC_OscConfig+0x348>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	0019      	movs	r1, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	021a      	lsls	r2, r3, #8
 80036bc:	4b68      	ldr	r3, [pc, #416]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80036c2:	4b67      	ldr	r3, [pc, #412]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2209      	movs	r2, #9
 80036c8:	4393      	bics	r3, r2
 80036ca:	0019      	movs	r1, r3
 80036cc:	4b64      	ldr	r3, [pc, #400]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80036ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d0:	430a      	orrs	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036d4:	f000 fc42 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 80036d8:	0001      	movs	r1, r0
 80036da:	4b61      	ldr	r3, [pc, #388]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	220f      	movs	r2, #15
 80036e2:	4013      	ands	r3, r2
 80036e4:	4a62      	ldr	r2, [pc, #392]	; (8003870 <HAL_RCC_OscConfig+0x34c>)
 80036e6:	5cd3      	ldrb	r3, [r2, r3]
 80036e8:	000a      	movs	r2, r1
 80036ea:	40da      	lsrs	r2, r3
 80036ec:	4b61      	ldr	r3, [pc, #388]	; (8003874 <HAL_RCC_OscConfig+0x350>)
 80036ee:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80036f0:	4b61      	ldr	r3, [pc, #388]	; (8003878 <HAL_RCC_OscConfig+0x354>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2513      	movs	r5, #19
 80036f6:	197c      	adds	r4, r7, r5
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7ff f9b7 	bl	8002a6c <HAL_InitTick>
 80036fe:	0003      	movs	r3, r0
 8003700:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003702:	197b      	adds	r3, r7, r5
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d046      	beq.n	8003798 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800370a:	197b      	adds	r3, r7, r5
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	e2d2      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	2b00      	cmp	r3, #0
 8003714:	d027      	beq.n	8003766 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003716:	4b52      	ldr	r3, [pc, #328]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2209      	movs	r2, #9
 800371c:	4393      	bics	r3, r2
 800371e:	0019      	movs	r1, r3
 8003720:	4b4f      	ldr	r3, [pc, #316]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 8003722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003724:	430a      	orrs	r2, r1
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7ff f9e6 	bl	8002af8 <HAL_GetTick>
 800372c:	0003      	movs	r3, r0
 800372e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003732:	f7ff f9e1 	bl	8002af8 <HAL_GetTick>
 8003736:	0002      	movs	r2, r0
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e2b8      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003744:	4b46      	ldr	r3, [pc, #280]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2204      	movs	r2, #4
 800374a:	4013      	ands	r3, r2
 800374c:	d0f1      	beq.n	8003732 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374e:	4b44      	ldr	r3, [pc, #272]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	4a46      	ldr	r2, [pc, #280]	; (800386c <HAL_RCC_OscConfig+0x348>)
 8003754:	4013      	ands	r3, r2
 8003756:	0019      	movs	r1, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	021a      	lsls	r2, r3, #8
 800375e:	4b40      	ldr	r3, [pc, #256]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 8003760:	430a      	orrs	r2, r1
 8003762:	605a      	str	r2, [r3, #4]
 8003764:	e018      	b.n	8003798 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003766:	4b3e      	ldr	r3, [pc, #248]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 800376c:	2101      	movs	r1, #1
 800376e:	438a      	bics	r2, r1
 8003770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003772:	f7ff f9c1 	bl	8002af8 <HAL_GetTick>
 8003776:	0003      	movs	r3, r0
 8003778:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800377c:	f7ff f9bc 	bl	8002af8 <HAL_GetTick>
 8003780:	0002      	movs	r2, r0
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e293      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800378e:	4b34      	ldr	r3, [pc, #208]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2204      	movs	r2, #4
 8003794:	4013      	ands	r3, r2
 8003796:	d1f1      	bne.n	800377c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2210      	movs	r2, #16
 800379e:	4013      	ands	r3, r2
 80037a0:	d100      	bne.n	80037a4 <HAL_RCC_OscConfig+0x280>
 80037a2:	e0a2      	b.n	80038ea <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d140      	bne.n	800382c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037aa:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4013      	ands	r3, r2
 80037b4:	d005      	beq.n	80037c2 <HAL_RCC_OscConfig+0x29e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e279      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037c2:	4b27      	ldr	r3, [pc, #156]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4a2d      	ldr	r2, [pc, #180]	; (800387c <HAL_RCC_OscConfig+0x358>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	0019      	movs	r1, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d0:	4b23      	ldr	r3, [pc, #140]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037d6:	4b22      	ldr	r3, [pc, #136]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	0a19      	lsrs	r1, r3, #8
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	061a      	lsls	r2, r3, #24
 80037e4:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	0b5b      	lsrs	r3, r3, #13
 80037f0:	3301      	adds	r3, #1
 80037f2:	2280      	movs	r2, #128	; 0x80
 80037f4:	0212      	lsls	r2, r2, #8
 80037f6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	091b      	lsrs	r3, r3, #4
 80037fe:	210f      	movs	r1, #15
 8003800:	400b      	ands	r3, r1
 8003802:	491b      	ldr	r1, [pc, #108]	; (8003870 <HAL_RCC_OscConfig+0x34c>)
 8003804:	5ccb      	ldrb	r3, [r1, r3]
 8003806:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003808:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <HAL_RCC_OscConfig+0x350>)
 800380a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800380c:	4b1a      	ldr	r3, [pc, #104]	; (8003878 <HAL_RCC_OscConfig+0x354>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2513      	movs	r5, #19
 8003812:	197c      	adds	r4, r7, r5
 8003814:	0018      	movs	r0, r3
 8003816:	f7ff f929 	bl	8002a6c <HAL_InitTick>
 800381a:	0003      	movs	r3, r0
 800381c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800381e:	197b      	adds	r3, r7, r5
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d061      	beq.n	80038ea <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8003826:	197b      	adds	r3, r7, r5
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	e244      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d040      	beq.n	80038b6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003834:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_RCC_OscConfig+0x33c>)
 800383a:	2180      	movs	r1, #128	; 0x80
 800383c:	0049      	lsls	r1, r1, #1
 800383e:	430a      	orrs	r2, r1
 8003840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003842:	f7ff f959 	bl	8002af8 <HAL_GetTick>
 8003846:	0003      	movs	r3, r0
 8003848:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800384a:	e019      	b.n	8003880 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800384c:	f7ff f954 	bl	8002af8 <HAL_GetTick>
 8003850:	0002      	movs	r2, r0
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d912      	bls.n	8003880 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e22b      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	40021000 	.word	0x40021000
 8003864:	fffeffff 	.word	0xfffeffff
 8003868:	fffbffff 	.word	0xfffbffff
 800386c:	ffffe0ff 	.word	0xffffe0ff
 8003870:	08007dbc 	.word	0x08007dbc
 8003874:	20000000 	.word	0x20000000
 8003878:	20000004 	.word	0x20000004
 800387c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003880:	4bca      	ldr	r3, [pc, #808]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4013      	ands	r3, r2
 800388a:	d0df      	beq.n	800384c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800388c:	4bc7      	ldr	r3, [pc, #796]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	4ac7      	ldr	r2, [pc, #796]	; (8003bb0 <HAL_RCC_OscConfig+0x68c>)
 8003892:	4013      	ands	r3, r2
 8003894:	0019      	movs	r1, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800389a:	4bc4      	ldr	r3, [pc, #784]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 800389c:	430a      	orrs	r2, r1
 800389e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038a0:	4bc2      	ldr	r3, [pc, #776]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	021b      	lsls	r3, r3, #8
 80038a6:	0a19      	lsrs	r1, r3, #8
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	061a      	lsls	r2, r3, #24
 80038ae:	4bbf      	ldr	r3, [pc, #764]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 80038b0:	430a      	orrs	r2, r1
 80038b2:	605a      	str	r2, [r3, #4]
 80038b4:	e019      	b.n	80038ea <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038b6:	4bbd      	ldr	r3, [pc, #756]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4bbc      	ldr	r3, [pc, #752]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 80038bc:	49bd      	ldr	r1, [pc, #756]	; (8003bb4 <HAL_RCC_OscConfig+0x690>)
 80038be:	400a      	ands	r2, r1
 80038c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c2:	f7ff f919 	bl	8002af8 <HAL_GetTick>
 80038c6:	0003      	movs	r3, r0
 80038c8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038cc:	f7ff f914 	bl	8002af8 <HAL_GetTick>
 80038d0:	0002      	movs	r2, r0
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e1eb      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80038de:	4bb3      	ldr	r3, [pc, #716]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4013      	ands	r3, r2
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2208      	movs	r2, #8
 80038f0:	4013      	ands	r3, r2
 80038f2:	d036      	beq.n	8003962 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d019      	beq.n	8003930 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038fc:	4bab      	ldr	r3, [pc, #684]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 80038fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003900:	4baa      	ldr	r3, [pc, #680]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003902:	2101      	movs	r1, #1
 8003904:	430a      	orrs	r2, r1
 8003906:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003908:	f7ff f8f6 	bl	8002af8 <HAL_GetTick>
 800390c:	0003      	movs	r3, r0
 800390e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003912:	f7ff f8f1 	bl	8002af8 <HAL_GetTick>
 8003916:	0002      	movs	r2, r0
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e1c8      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003924:	4ba1      	ldr	r3, [pc, #644]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003928:	2202      	movs	r2, #2
 800392a:	4013      	ands	r3, r2
 800392c:	d0f1      	beq.n	8003912 <HAL_RCC_OscConfig+0x3ee>
 800392e:	e018      	b.n	8003962 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003930:	4b9e      	ldr	r3, [pc, #632]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003932:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003934:	4b9d      	ldr	r3, [pc, #628]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003936:	2101      	movs	r1, #1
 8003938:	438a      	bics	r2, r1
 800393a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393c:	f7ff f8dc 	bl	8002af8 <HAL_GetTick>
 8003940:	0003      	movs	r3, r0
 8003942:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003946:	f7ff f8d7 	bl	8002af8 <HAL_GetTick>
 800394a:	0002      	movs	r2, r0
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e1ae      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003958:	4b94      	ldr	r3, [pc, #592]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 800395a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395c:	2202      	movs	r2, #2
 800395e:	4013      	ands	r3, r2
 8003960:	d1f1      	bne.n	8003946 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2204      	movs	r2, #4
 8003968:	4013      	ands	r3, r2
 800396a:	d100      	bne.n	800396e <HAL_RCC_OscConfig+0x44a>
 800396c:	e0ae      	b.n	8003acc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800396e:	2023      	movs	r0, #35	; 0x23
 8003970:	183b      	adds	r3, r7, r0
 8003972:	2200      	movs	r2, #0
 8003974:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003976:	4b8d      	ldr	r3, [pc, #564]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	055b      	lsls	r3, r3, #21
 800397e:	4013      	ands	r3, r2
 8003980:	d109      	bne.n	8003996 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003982:	4b8a      	ldr	r3, [pc, #552]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003986:	4b89      	ldr	r3, [pc, #548]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003988:	2180      	movs	r1, #128	; 0x80
 800398a:	0549      	lsls	r1, r1, #21
 800398c:	430a      	orrs	r2, r1
 800398e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003990:	183b      	adds	r3, r7, r0
 8003992:	2201      	movs	r2, #1
 8003994:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003996:	4b88      	ldr	r3, [pc, #544]	; (8003bb8 <HAL_RCC_OscConfig+0x694>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	4013      	ands	r3, r2
 80039a0:	d11a      	bne.n	80039d8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039a2:	4b85      	ldr	r3, [pc, #532]	; (8003bb8 <HAL_RCC_OscConfig+0x694>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	4b84      	ldr	r3, [pc, #528]	; (8003bb8 <HAL_RCC_OscConfig+0x694>)
 80039a8:	2180      	movs	r1, #128	; 0x80
 80039aa:	0049      	lsls	r1, r1, #1
 80039ac:	430a      	orrs	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039b0:	f7ff f8a2 	bl	8002af8 <HAL_GetTick>
 80039b4:	0003      	movs	r3, r0
 80039b6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ba:	f7ff f89d 	bl	8002af8 <HAL_GetTick>
 80039be:	0002      	movs	r2, r0
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b64      	cmp	r3, #100	; 0x64
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e174      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039cc:	4b7a      	ldr	r3, [pc, #488]	; (8003bb8 <HAL_RCC_OscConfig+0x694>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4013      	ands	r3, r2
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	2380      	movs	r3, #128	; 0x80
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d107      	bne.n	80039f4 <HAL_RCC_OscConfig+0x4d0>
 80039e4:	4b71      	ldr	r3, [pc, #452]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 80039e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039e8:	4b70      	ldr	r3, [pc, #448]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 80039ea:	2180      	movs	r1, #128	; 0x80
 80039ec:	0049      	lsls	r1, r1, #1
 80039ee:	430a      	orrs	r2, r1
 80039f0:	651a      	str	r2, [r3, #80]	; 0x50
 80039f2:	e031      	b.n	8003a58 <HAL_RCC_OscConfig+0x534>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10c      	bne.n	8003a16 <HAL_RCC_OscConfig+0x4f2>
 80039fc:	4b6b      	ldr	r3, [pc, #428]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 80039fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a00:	4b6a      	ldr	r3, [pc, #424]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003a02:	496c      	ldr	r1, [pc, #432]	; (8003bb4 <HAL_RCC_OscConfig+0x690>)
 8003a04:	400a      	ands	r2, r1
 8003a06:	651a      	str	r2, [r3, #80]	; 0x50
 8003a08:	4b68      	ldr	r3, [pc, #416]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003a0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a0c:	4b67      	ldr	r3, [pc, #412]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003a0e:	496b      	ldr	r1, [pc, #428]	; (8003bbc <HAL_RCC_OscConfig+0x698>)
 8003a10:	400a      	ands	r2, r1
 8003a12:	651a      	str	r2, [r3, #80]	; 0x50
 8003a14:	e020      	b.n	8003a58 <HAL_RCC_OscConfig+0x534>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	23a0      	movs	r3, #160	; 0xa0
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d10e      	bne.n	8003a40 <HAL_RCC_OscConfig+0x51c>
 8003a22:	4b62      	ldr	r3, [pc, #392]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003a24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a26:	4b61      	ldr	r3, [pc, #388]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003a28:	2180      	movs	r1, #128	; 0x80
 8003a2a:	00c9      	lsls	r1, r1, #3
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	651a      	str	r2, [r3, #80]	; 0x50
 8003a30:	4b5e      	ldr	r3, [pc, #376]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003a32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a34:	4b5d      	ldr	r3, [pc, #372]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003a36:	2180      	movs	r1, #128	; 0x80
 8003a38:	0049      	lsls	r1, r1, #1
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	651a      	str	r2, [r3, #80]	; 0x50
 8003a3e:	e00b      	b.n	8003a58 <HAL_RCC_OscConfig+0x534>
 8003a40:	4b5a      	ldr	r3, [pc, #360]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003a42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a44:	4b59      	ldr	r3, [pc, #356]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003a46:	495b      	ldr	r1, [pc, #364]	; (8003bb4 <HAL_RCC_OscConfig+0x690>)
 8003a48:	400a      	ands	r2, r1
 8003a4a:	651a      	str	r2, [r3, #80]	; 0x50
 8003a4c:	4b57      	ldr	r3, [pc, #348]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003a4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a50:	4b56      	ldr	r3, [pc, #344]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003a52:	495a      	ldr	r1, [pc, #360]	; (8003bbc <HAL_RCC_OscConfig+0x698>)
 8003a54:	400a      	ands	r2, r1
 8003a56:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d015      	beq.n	8003a8c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a60:	f7ff f84a 	bl	8002af8 <HAL_GetTick>
 8003a64:	0003      	movs	r3, r0
 8003a66:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a68:	e009      	b.n	8003a7e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a6a:	f7ff f845 	bl	8002af8 <HAL_GetTick>
 8003a6e:	0002      	movs	r2, r0
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	4a52      	ldr	r2, [pc, #328]	; (8003bc0 <HAL_RCC_OscConfig+0x69c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e11b      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a7e:	4b4b      	ldr	r3, [pc, #300]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003a80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4013      	ands	r3, r2
 8003a88:	d0ef      	beq.n	8003a6a <HAL_RCC_OscConfig+0x546>
 8003a8a:	e014      	b.n	8003ab6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8c:	f7ff f834 	bl	8002af8 <HAL_GetTick>
 8003a90:	0003      	movs	r3, r0
 8003a92:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a94:	e009      	b.n	8003aaa <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a96:	f7ff f82f 	bl	8002af8 <HAL_GetTick>
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	4a47      	ldr	r2, [pc, #284]	; (8003bc0 <HAL_RCC_OscConfig+0x69c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e105      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003aaa:	4b40      	ldr	r3, [pc, #256]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003aac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003aae:	2380      	movs	r3, #128	; 0x80
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	d1ef      	bne.n	8003a96 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ab6:	2323      	movs	r3, #35	; 0x23
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d105      	bne.n	8003acc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac0:	4b3a      	ldr	r3, [pc, #232]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ac4:	4b39      	ldr	r3, [pc, #228]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003ac6:	493f      	ldr	r1, [pc, #252]	; (8003bc4 <HAL_RCC_OscConfig+0x6a0>)
 8003ac8:	400a      	ands	r2, r1
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d049      	beq.n	8003b6a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d026      	beq.n	8003b2c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003ade:	4b33      	ldr	r3, [pc, #204]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	4b32      	ldr	r3, [pc, #200]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	609a      	str	r2, [r3, #8]
 8003aea:	4b30      	ldr	r3, [pc, #192]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aee:	4b2f      	ldr	r3, [pc, #188]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003af0:	2101      	movs	r1, #1
 8003af2:	430a      	orrs	r2, r1
 8003af4:	635a      	str	r2, [r3, #52]	; 0x34
 8003af6:	4b34      	ldr	r3, [pc, #208]	; (8003bc8 <HAL_RCC_OscConfig+0x6a4>)
 8003af8:	6a1a      	ldr	r2, [r3, #32]
 8003afa:	4b33      	ldr	r3, [pc, #204]	; (8003bc8 <HAL_RCC_OscConfig+0x6a4>)
 8003afc:	2180      	movs	r1, #128	; 0x80
 8003afe:	0189      	lsls	r1, r1, #6
 8003b00:	430a      	orrs	r2, r1
 8003b02:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b04:	f7fe fff8 	bl	8002af8 <HAL_GetTick>
 8003b08:	0003      	movs	r3, r0
 8003b0a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b0e:	f7fe fff3 	bl	8002af8 <HAL_GetTick>
 8003b12:	0002      	movs	r2, r0
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e0ca      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b20:	4b22      	ldr	r3, [pc, #136]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2202      	movs	r2, #2
 8003b26:	4013      	ands	r3, r2
 8003b28:	d0f1      	beq.n	8003b0e <HAL_RCC_OscConfig+0x5ea>
 8003b2a:	e01e      	b.n	8003b6a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003b2c:	4b1f      	ldr	r3, [pc, #124]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003b32:	2101      	movs	r1, #1
 8003b34:	438a      	bics	r2, r1
 8003b36:	609a      	str	r2, [r3, #8]
 8003b38:	4b23      	ldr	r3, [pc, #140]	; (8003bc8 <HAL_RCC_OscConfig+0x6a4>)
 8003b3a:	6a1a      	ldr	r2, [r3, #32]
 8003b3c:	4b22      	ldr	r3, [pc, #136]	; (8003bc8 <HAL_RCC_OscConfig+0x6a4>)
 8003b3e:	4923      	ldr	r1, [pc, #140]	; (8003bcc <HAL_RCC_OscConfig+0x6a8>)
 8003b40:	400a      	ands	r2, r1
 8003b42:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7fe ffd8 	bl	8002af8 <HAL_GetTick>
 8003b48:	0003      	movs	r3, r0
 8003b4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b4e:	f7fe ffd3 	bl	8002af8 <HAL_GetTick>
 8003b52:	0002      	movs	r2, r0
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e0aa      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b60:	4b12      	ldr	r3, [pc, #72]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	2202      	movs	r2, #2
 8003b66:	4013      	ands	r3, r2
 8003b68:	d1f1      	bne.n	8003b4e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d100      	bne.n	8003b74 <HAL_RCC_OscConfig+0x650>
 8003b72:	e09f      	b.n	8003cb4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	2b0c      	cmp	r3, #12
 8003b78:	d100      	bne.n	8003b7c <HAL_RCC_OscConfig+0x658>
 8003b7a:	e078      	b.n	8003c6e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d159      	bne.n	8003c38 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b84:	4b09      	ldr	r3, [pc, #36]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4b08      	ldr	r3, [pc, #32]	; (8003bac <HAL_RCC_OscConfig+0x688>)
 8003b8a:	4911      	ldr	r1, [pc, #68]	; (8003bd0 <HAL_RCC_OscConfig+0x6ac>)
 8003b8c:	400a      	ands	r2, r1
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fe ffb2 	bl	8002af8 <HAL_GetTick>
 8003b94:	0003      	movs	r3, r0
 8003b96:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003b98:	e01c      	b.n	8003bd4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b9a:	f7fe ffad 	bl	8002af8 <HAL_GetTick>
 8003b9e:	0002      	movs	r2, r0
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d915      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e084      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	ffff1fff 	.word	0xffff1fff
 8003bb4:	fffffeff 	.word	0xfffffeff
 8003bb8:	40007000 	.word	0x40007000
 8003bbc:	fffffbff 	.word	0xfffffbff
 8003bc0:	00001388 	.word	0x00001388
 8003bc4:	efffffff 	.word	0xefffffff
 8003bc8:	40010000 	.word	0x40010000
 8003bcc:	ffffdfff 	.word	0xffffdfff
 8003bd0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003bd4:	4b3a      	ldr	r3, [pc, #232]	; (8003cc0 <HAL_RCC_OscConfig+0x79c>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	2380      	movs	r3, #128	; 0x80
 8003bda:	049b      	lsls	r3, r3, #18
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d1dc      	bne.n	8003b9a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be0:	4b37      	ldr	r3, [pc, #220]	; (8003cc0 <HAL_RCC_OscConfig+0x79c>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4a37      	ldr	r2, [pc, #220]	; (8003cc4 <HAL_RCC_OscConfig+0x7a0>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	0019      	movs	r1, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	4b31      	ldr	r3, [pc, #196]	; (8003cc0 <HAL_RCC_OscConfig+0x79c>)
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c00:	4b2f      	ldr	r3, [pc, #188]	; (8003cc0 <HAL_RCC_OscConfig+0x79c>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b2e      	ldr	r3, [pc, #184]	; (8003cc0 <HAL_RCC_OscConfig+0x79c>)
 8003c06:	2180      	movs	r1, #128	; 0x80
 8003c08:	0449      	lsls	r1, r1, #17
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0e:	f7fe ff73 	bl	8002af8 <HAL_GetTick>
 8003c12:	0003      	movs	r3, r0
 8003c14:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c18:	f7fe ff6e 	bl	8002af8 <HAL_GetTick>
 8003c1c:	0002      	movs	r2, r0
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e045      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c2a:	4b25      	ldr	r3, [pc, #148]	; (8003cc0 <HAL_RCC_OscConfig+0x79c>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	2380      	movs	r3, #128	; 0x80
 8003c30:	049b      	lsls	r3, r3, #18
 8003c32:	4013      	ands	r3, r2
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x6f4>
 8003c36:	e03d      	b.n	8003cb4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c38:	4b21      	ldr	r3, [pc, #132]	; (8003cc0 <HAL_RCC_OscConfig+0x79c>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <HAL_RCC_OscConfig+0x79c>)
 8003c3e:	4922      	ldr	r1, [pc, #136]	; (8003cc8 <HAL_RCC_OscConfig+0x7a4>)
 8003c40:	400a      	ands	r2, r1
 8003c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c44:	f7fe ff58 	bl	8002af8 <HAL_GetTick>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c4e:	f7fe ff53 	bl	8002af8 <HAL_GetTick>
 8003c52:	0002      	movs	r2, r0
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e02a      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c60:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <HAL_RCC_OscConfig+0x79c>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	049b      	lsls	r3, r3, #18
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d1f0      	bne.n	8003c4e <HAL_RCC_OscConfig+0x72a>
 8003c6c:	e022      	b.n	8003cb4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e01d      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c7a:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <HAL_RCC_OscConfig+0x79c>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	2380      	movs	r3, #128	; 0x80
 8003c84:	025b      	lsls	r3, r3, #9
 8003c86:	401a      	ands	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d10f      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	23f0      	movs	r3, #240	; 0xf0
 8003c94:	039b      	lsls	r3, r3, #14
 8003c96:	401a      	ands	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d107      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	23c0      	movs	r3, #192	; 0xc0
 8003ca4:	041b      	lsls	r3, r3, #16
 8003ca6:	401a      	ands	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b00a      	add	sp, #40	; 0x28
 8003cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	ff02ffff 	.word	0xff02ffff
 8003cc8:	feffffff 	.word	0xfeffffff

08003ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ccc:	b5b0      	push	{r4, r5, r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e128      	b.n	8003f32 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ce0:	4b96      	ldr	r3, [pc, #600]	; (8003f3c <HAL_RCC_ClockConfig+0x270>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d91e      	bls.n	8003d2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cee:	4b93      	ldr	r3, [pc, #588]	; (8003f3c <HAL_RCC_ClockConfig+0x270>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	4393      	bics	r3, r2
 8003cf6:	0019      	movs	r1, r3
 8003cf8:	4b90      	ldr	r3, [pc, #576]	; (8003f3c <HAL_RCC_ClockConfig+0x270>)
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d00:	f7fe fefa 	bl	8002af8 <HAL_GetTick>
 8003d04:	0003      	movs	r3, r0
 8003d06:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d08:	e009      	b.n	8003d1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d0a:	f7fe fef5 	bl	8002af8 <HAL_GetTick>
 8003d0e:	0002      	movs	r2, r0
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	4a8a      	ldr	r2, [pc, #552]	; (8003f40 <HAL_RCC_ClockConfig+0x274>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e109      	b.n	8003f32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d1e:	4b87      	ldr	r3, [pc, #540]	; (8003f3c <HAL_RCC_ClockConfig+0x270>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2201      	movs	r2, #1
 8003d24:	4013      	ands	r3, r2
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d1ee      	bne.n	8003d0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2202      	movs	r2, #2
 8003d32:	4013      	ands	r3, r2
 8003d34:	d009      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d36:	4b83      	ldr	r3, [pc, #524]	; (8003f44 <HAL_RCC_ClockConfig+0x278>)
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	22f0      	movs	r2, #240	; 0xf0
 8003d3c:	4393      	bics	r3, r2
 8003d3e:	0019      	movs	r1, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	4b7f      	ldr	r3, [pc, #508]	; (8003f44 <HAL_RCC_ClockConfig+0x278>)
 8003d46:	430a      	orrs	r2, r1
 8003d48:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	4013      	ands	r3, r2
 8003d52:	d100      	bne.n	8003d56 <HAL_RCC_ClockConfig+0x8a>
 8003d54:	e089      	b.n	8003e6a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d5e:	4b79      	ldr	r3, [pc, #484]	; (8003f44 <HAL_RCC_ClockConfig+0x278>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	2380      	movs	r3, #128	; 0x80
 8003d64:	029b      	lsls	r3, r3, #10
 8003d66:	4013      	ands	r3, r2
 8003d68:	d120      	bne.n	8003dac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e0e1      	b.n	8003f32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d107      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d76:	4b73      	ldr	r3, [pc, #460]	; (8003f44 <HAL_RCC_ClockConfig+0x278>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	049b      	lsls	r3, r3, #18
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d114      	bne.n	8003dac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e0d5      	b.n	8003f32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d106      	bne.n	8003d9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d8e:	4b6d      	ldr	r3, [pc, #436]	; (8003f44 <HAL_RCC_ClockConfig+0x278>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2204      	movs	r2, #4
 8003d94:	4013      	ands	r3, r2
 8003d96:	d109      	bne.n	8003dac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0ca      	b.n	8003f32 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d9c:	4b69      	ldr	r3, [pc, #420]	; (8003f44 <HAL_RCC_ClockConfig+0x278>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	2380      	movs	r3, #128	; 0x80
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4013      	ands	r3, r2
 8003da6:	d101      	bne.n	8003dac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e0c2      	b.n	8003f32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dac:	4b65      	ldr	r3, [pc, #404]	; (8003f44 <HAL_RCC_ClockConfig+0x278>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	2203      	movs	r2, #3
 8003db2:	4393      	bics	r3, r2
 8003db4:	0019      	movs	r1, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	4b62      	ldr	r3, [pc, #392]	; (8003f44 <HAL_RCC_ClockConfig+0x278>)
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dc0:	f7fe fe9a 	bl	8002af8 <HAL_GetTick>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d111      	bne.n	8003df4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dd0:	e009      	b.n	8003de6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd2:	f7fe fe91 	bl	8002af8 <HAL_GetTick>
 8003dd6:	0002      	movs	r2, r0
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	4a58      	ldr	r2, [pc, #352]	; (8003f40 <HAL_RCC_ClockConfig+0x274>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e0a5      	b.n	8003f32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003de6:	4b57      	ldr	r3, [pc, #348]	; (8003f44 <HAL_RCC_ClockConfig+0x278>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	220c      	movs	r2, #12
 8003dec:	4013      	ands	r3, r2
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d1ef      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0x106>
 8003df2:	e03a      	b.n	8003e6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d111      	bne.n	8003e20 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dfc:	e009      	b.n	8003e12 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dfe:	f7fe fe7b 	bl	8002af8 <HAL_GetTick>
 8003e02:	0002      	movs	r2, r0
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	4a4d      	ldr	r2, [pc, #308]	; (8003f40 <HAL_RCC_ClockConfig+0x274>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e08f      	b.n	8003f32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e12:	4b4c      	ldr	r3, [pc, #304]	; (8003f44 <HAL_RCC_ClockConfig+0x278>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	220c      	movs	r2, #12
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b0c      	cmp	r3, #12
 8003e1c:	d1ef      	bne.n	8003dfe <HAL_RCC_ClockConfig+0x132>
 8003e1e:	e024      	b.n	8003e6a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d11b      	bne.n	8003e60 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e28:	e009      	b.n	8003e3e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e2a:	f7fe fe65 	bl	8002af8 <HAL_GetTick>
 8003e2e:	0002      	movs	r2, r0
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	4a42      	ldr	r2, [pc, #264]	; (8003f40 <HAL_RCC_ClockConfig+0x274>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e079      	b.n	8003f32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e3e:	4b41      	ldr	r3, [pc, #260]	; (8003f44 <HAL_RCC_ClockConfig+0x278>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	220c      	movs	r2, #12
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d1ef      	bne.n	8003e2a <HAL_RCC_ClockConfig+0x15e>
 8003e4a:	e00e      	b.n	8003e6a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4c:	f7fe fe54 	bl	8002af8 <HAL_GetTick>
 8003e50:	0002      	movs	r2, r0
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	4a3a      	ldr	r2, [pc, #232]	; (8003f40 <HAL_RCC_ClockConfig+0x274>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e068      	b.n	8003f32 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e60:	4b38      	ldr	r3, [pc, #224]	; (8003f44 <HAL_RCC_ClockConfig+0x278>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	220c      	movs	r2, #12
 8003e66:	4013      	ands	r3, r2
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e6a:	4b34      	ldr	r3, [pc, #208]	; (8003f3c <HAL_RCC_ClockConfig+0x270>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	4013      	ands	r3, r2
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d21e      	bcs.n	8003eb6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e78:	4b30      	ldr	r3, [pc, #192]	; (8003f3c <HAL_RCC_ClockConfig+0x270>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	4393      	bics	r3, r2
 8003e80:	0019      	movs	r1, r3
 8003e82:	4b2e      	ldr	r3, [pc, #184]	; (8003f3c <HAL_RCC_ClockConfig+0x270>)
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e8a:	f7fe fe35 	bl	8002af8 <HAL_GetTick>
 8003e8e:	0003      	movs	r3, r0
 8003e90:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e92:	e009      	b.n	8003ea8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e94:	f7fe fe30 	bl	8002af8 <HAL_GetTick>
 8003e98:	0002      	movs	r2, r0
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	4a28      	ldr	r2, [pc, #160]	; (8003f40 <HAL_RCC_ClockConfig+0x274>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e044      	b.n	8003f32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea8:	4b24      	ldr	r3, [pc, #144]	; (8003f3c <HAL_RCC_ClockConfig+0x270>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2201      	movs	r2, #1
 8003eae:	4013      	ands	r3, r2
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d1ee      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2204      	movs	r2, #4
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	d009      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ec0:	4b20      	ldr	r3, [pc, #128]	; (8003f44 <HAL_RCC_ClockConfig+0x278>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4a20      	ldr	r2, [pc, #128]	; (8003f48 <HAL_RCC_ClockConfig+0x27c>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	0019      	movs	r1, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <HAL_RCC_ClockConfig+0x278>)
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2208      	movs	r2, #8
 8003eda:	4013      	ands	r3, r2
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ede:	4b19      	ldr	r3, [pc, #100]	; (8003f44 <HAL_RCC_ClockConfig+0x278>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	4a1a      	ldr	r2, [pc, #104]	; (8003f4c <HAL_RCC_ClockConfig+0x280>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	0019      	movs	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	00da      	lsls	r2, r3, #3
 8003eee:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <HAL_RCC_ClockConfig+0x278>)
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ef4:	f000 f832 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 8003ef8:	0001      	movs	r1, r0
 8003efa:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <HAL_RCC_ClockConfig+0x278>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	220f      	movs	r2, #15
 8003f02:	4013      	ands	r3, r2
 8003f04:	4a12      	ldr	r2, [pc, #72]	; (8003f50 <HAL_RCC_ClockConfig+0x284>)
 8003f06:	5cd3      	ldrb	r3, [r2, r3]
 8003f08:	000a      	movs	r2, r1
 8003f0a:	40da      	lsrs	r2, r3
 8003f0c:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <HAL_RCC_ClockConfig+0x288>)
 8003f0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f10:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <HAL_RCC_ClockConfig+0x28c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	250b      	movs	r5, #11
 8003f16:	197c      	adds	r4, r7, r5
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f7fe fda7 	bl	8002a6c <HAL_InitTick>
 8003f1e:	0003      	movs	r3, r0
 8003f20:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003f22:	197b      	adds	r3, r7, r5
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003f2a:	197b      	adds	r3, r7, r5
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	e000      	b.n	8003f32 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	0018      	movs	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b004      	add	sp, #16
 8003f38:	bdb0      	pop	{r4, r5, r7, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	40022000 	.word	0x40022000
 8003f40:	00001388 	.word	0x00001388
 8003f44:	40021000 	.word	0x40021000
 8003f48:	fffff8ff 	.word	0xfffff8ff
 8003f4c:	ffffc7ff 	.word	0xffffc7ff
 8003f50:	08007dbc 	.word	0x08007dbc
 8003f54:	20000000 	.word	0x20000000
 8003f58:	20000004 	.word	0x20000004

08003f5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f5c:	b5b0      	push	{r4, r5, r7, lr}
 8003f5e:	b08e      	sub	sp, #56	; 0x38
 8003f60:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003f62:	4b4c      	ldr	r3, [pc, #304]	; (8004094 <HAL_RCC_GetSysClockFreq+0x138>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f6a:	230c      	movs	r3, #12
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b0c      	cmp	r3, #12
 8003f70:	d014      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0x40>
 8003f72:	d900      	bls.n	8003f76 <HAL_RCC_GetSysClockFreq+0x1a>
 8003f74:	e07b      	b.n	800406e <HAL_RCC_GetSysClockFreq+0x112>
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d002      	beq.n	8003f80 <HAL_RCC_GetSysClockFreq+0x24>
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d00b      	beq.n	8003f96 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f7e:	e076      	b.n	800406e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003f80:	4b44      	ldr	r3, [pc, #272]	; (8004094 <HAL_RCC_GetSysClockFreq+0x138>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2210      	movs	r2, #16
 8003f86:	4013      	ands	r3, r2
 8003f88:	d002      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003f8a:	4b43      	ldr	r3, [pc, #268]	; (8004098 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003f8c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003f8e:	e07c      	b.n	800408a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003f90:	4b42      	ldr	r3, [pc, #264]	; (800409c <HAL_RCC_GetSysClockFreq+0x140>)
 8003f92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f94:	e079      	b.n	800408a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f96:	4b42      	ldr	r3, [pc, #264]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x144>)
 8003f98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f9a:	e076      	b.n	800408a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9e:	0c9a      	lsrs	r2, r3, #18
 8003fa0:	230f      	movs	r3, #15
 8003fa2:	401a      	ands	r2, r3
 8003fa4:	4b3f      	ldr	r3, [pc, #252]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x148>)
 8003fa6:	5c9b      	ldrb	r3, [r3, r2]
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fac:	0d9a      	lsrs	r2, r3, #22
 8003fae:	2303      	movs	r3, #3
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fb6:	4b37      	ldr	r3, [pc, #220]	; (8004094 <HAL_RCC_GetSysClockFreq+0x138>)
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	2380      	movs	r3, #128	; 0x80
 8003fbc:	025b      	lsls	r3, r3, #9
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d01a      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	4a35      	ldr	r2, [pc, #212]	; (80040a0 <HAL_RCC_GetSysClockFreq+0x144>)
 8003fcc:	2300      	movs	r3, #0
 8003fce:	69b8      	ldr	r0, [r7, #24]
 8003fd0:	69f9      	ldr	r1, [r7, #28]
 8003fd2:	f7fc f991 	bl	80002f8 <__aeabi_lmul>
 8003fd6:	0002      	movs	r2, r0
 8003fd8:	000b      	movs	r3, r1
 8003fda:	0010      	movs	r0, r2
 8003fdc:	0019      	movs	r1, r3
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	613b      	str	r3, [r7, #16]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f7fc f965 	bl	80002b8 <__aeabi_uldivmod>
 8003fee:	0002      	movs	r2, r0
 8003ff0:	000b      	movs	r3, r1
 8003ff2:	0013      	movs	r3, r2
 8003ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff6:	e037      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ff8:	4b26      	ldr	r3, [pc, #152]	; (8004094 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	4013      	ands	r3, r2
 8004000:	d01a      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	60bb      	str	r3, [r7, #8]
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	4a23      	ldr	r2, [pc, #140]	; (8004098 <HAL_RCC_GetSysClockFreq+0x13c>)
 800400c:	2300      	movs	r3, #0
 800400e:	68b8      	ldr	r0, [r7, #8]
 8004010:	68f9      	ldr	r1, [r7, #12]
 8004012:	f7fc f971 	bl	80002f8 <__aeabi_lmul>
 8004016:	0002      	movs	r2, r0
 8004018:	000b      	movs	r3, r1
 800401a:	0010      	movs	r0, r2
 800401c:	0019      	movs	r1, r3
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	603b      	str	r3, [r7, #0]
 8004022:	2300      	movs	r3, #0
 8004024:	607b      	str	r3, [r7, #4]
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f7fc f945 	bl	80002b8 <__aeabi_uldivmod>
 800402e:	0002      	movs	r2, r0
 8004030:	000b      	movs	r3, r1
 8004032:	0013      	movs	r3, r2
 8004034:	637b      	str	r3, [r7, #52]	; 0x34
 8004036:	e017      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403a:	0018      	movs	r0, r3
 800403c:	2300      	movs	r3, #0
 800403e:	0019      	movs	r1, r3
 8004040:	4a16      	ldr	r2, [pc, #88]	; (800409c <HAL_RCC_GetSysClockFreq+0x140>)
 8004042:	2300      	movs	r3, #0
 8004044:	f7fc f958 	bl	80002f8 <__aeabi_lmul>
 8004048:	0002      	movs	r2, r0
 800404a:	000b      	movs	r3, r1
 800404c:	0010      	movs	r0, r2
 800404e:	0019      	movs	r1, r3
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	001c      	movs	r4, r3
 8004054:	2300      	movs	r3, #0
 8004056:	001d      	movs	r5, r3
 8004058:	0022      	movs	r2, r4
 800405a:	002b      	movs	r3, r5
 800405c:	f7fc f92c 	bl	80002b8 <__aeabi_uldivmod>
 8004060:	0002      	movs	r2, r0
 8004062:	000b      	movs	r3, r1
 8004064:	0013      	movs	r3, r2
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800406c:	e00d      	b.n	800408a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800406e:	4b09      	ldr	r3, [pc, #36]	; (8004094 <HAL_RCC_GetSysClockFreq+0x138>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	0b5b      	lsrs	r3, r3, #13
 8004074:	2207      	movs	r2, #7
 8004076:	4013      	ands	r3, r2
 8004078:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	3301      	adds	r3, #1
 800407e:	2280      	movs	r2, #128	; 0x80
 8004080:	0212      	lsls	r2, r2, #8
 8004082:	409a      	lsls	r2, r3
 8004084:	0013      	movs	r3, r2
 8004086:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004088:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800408c:	0018      	movs	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	b00e      	add	sp, #56	; 0x38
 8004092:	bdb0      	pop	{r4, r5, r7, pc}
 8004094:	40021000 	.word	0x40021000
 8004098:	003d0900 	.word	0x003d0900
 800409c:	00f42400 	.word	0x00f42400
 80040a0:	007a1200 	.word	0x007a1200
 80040a4:	08007dd4 	.word	0x08007dd4

080040a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040ac:	4b02      	ldr	r3, [pc, #8]	; (80040b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80040ae:	681b      	ldr	r3, [r3, #0]
}
 80040b0:	0018      	movs	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	20000000 	.word	0x20000000

080040bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040c0:	f7ff fff2 	bl	80040a8 <HAL_RCC_GetHCLKFreq>
 80040c4:	0001      	movs	r1, r0
 80040c6:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	0a1b      	lsrs	r3, r3, #8
 80040cc:	2207      	movs	r2, #7
 80040ce:	4013      	ands	r3, r2
 80040d0:	4a04      	ldr	r2, [pc, #16]	; (80040e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040d2:	5cd3      	ldrb	r3, [r2, r3]
 80040d4:	40d9      	lsrs	r1, r3
 80040d6:	000b      	movs	r3, r1
}
 80040d8:	0018      	movs	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	46c0      	nop			; (mov r8, r8)
 80040e0:	40021000 	.word	0x40021000
 80040e4:	08007dcc 	.word	0x08007dcc

080040e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040ec:	f7ff ffdc 	bl	80040a8 <HAL_RCC_GetHCLKFreq>
 80040f0:	0001      	movs	r1, r0
 80040f2:	4b06      	ldr	r3, [pc, #24]	; (800410c <HAL_RCC_GetPCLK2Freq+0x24>)
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	0adb      	lsrs	r3, r3, #11
 80040f8:	2207      	movs	r2, #7
 80040fa:	4013      	ands	r3, r2
 80040fc:	4a04      	ldr	r2, [pc, #16]	; (8004110 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040fe:	5cd3      	ldrb	r3, [r2, r3]
 8004100:	40d9      	lsrs	r1, r3
 8004102:	000b      	movs	r3, r1
}
 8004104:	0018      	movs	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	40021000 	.word	0x40021000
 8004110:	08007dcc 	.word	0x08007dcc

08004114 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800411c:	2317      	movs	r3, #23
 800411e:	18fb      	adds	r3, r7, r3
 8004120:	2200      	movs	r2, #0
 8004122:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2220      	movs	r2, #32
 800412a:	4013      	ands	r3, r2
 800412c:	d106      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	2380      	movs	r3, #128	; 0x80
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	4013      	ands	r3, r2
 8004138:	d100      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800413a:	e104      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800413c:	4bb9      	ldr	r3, [pc, #740]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800413e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004140:	2380      	movs	r3, #128	; 0x80
 8004142:	055b      	lsls	r3, r3, #21
 8004144:	4013      	ands	r3, r2
 8004146:	d10a      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004148:	4bb6      	ldr	r3, [pc, #728]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800414a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800414c:	4bb5      	ldr	r3, [pc, #724]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800414e:	2180      	movs	r1, #128	; 0x80
 8004150:	0549      	lsls	r1, r1, #21
 8004152:	430a      	orrs	r2, r1
 8004154:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004156:	2317      	movs	r3, #23
 8004158:	18fb      	adds	r3, r7, r3
 800415a:	2201      	movs	r2, #1
 800415c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415e:	4bb2      	ldr	r3, [pc, #712]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	2380      	movs	r3, #128	; 0x80
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	4013      	ands	r3, r2
 8004168:	d11a      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800416a:	4baf      	ldr	r3, [pc, #700]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	4bae      	ldr	r3, [pc, #696]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004170:	2180      	movs	r1, #128	; 0x80
 8004172:	0049      	lsls	r1, r1, #1
 8004174:	430a      	orrs	r2, r1
 8004176:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004178:	f7fe fcbe 	bl	8002af8 <HAL_GetTick>
 800417c:	0003      	movs	r3, r0
 800417e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004180:	e008      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004182:	f7fe fcb9 	bl	8002af8 <HAL_GetTick>
 8004186:	0002      	movs	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b64      	cmp	r3, #100	; 0x64
 800418e:	d901      	bls.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e143      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004194:	4ba4      	ldr	r3, [pc, #656]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	4013      	ands	r3, r2
 800419e:	d0f0      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80041a0:	4ba0      	ldr	r3, [pc, #640]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	23c0      	movs	r3, #192	; 0xc0
 80041a6:	039b      	lsls	r3, r3, #14
 80041a8:	4013      	ands	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	23c0      	movs	r3, #192	; 0xc0
 80041b2:	039b      	lsls	r3, r3, #14
 80041b4:	4013      	ands	r3, r2
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d107      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	23c0      	movs	r3, #192	; 0xc0
 80041c2:	039b      	lsls	r3, r3, #14
 80041c4:	4013      	ands	r3, r2
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d013      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	23c0      	movs	r3, #192	; 0xc0
 80041d2:	029b      	lsls	r3, r3, #10
 80041d4:	401a      	ands	r2, r3
 80041d6:	23c0      	movs	r3, #192	; 0xc0
 80041d8:	029b      	lsls	r3, r3, #10
 80041da:	429a      	cmp	r2, r3
 80041dc:	d10a      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80041de:	4b91      	ldr	r3, [pc, #580]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	2380      	movs	r3, #128	; 0x80
 80041e4:	029b      	lsls	r3, r3, #10
 80041e6:	401a      	ands	r2, r3
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	029b      	lsls	r3, r3, #10
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d101      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e113      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80041f4:	4b8b      	ldr	r3, [pc, #556]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041f8:	23c0      	movs	r3, #192	; 0xc0
 80041fa:	029b      	lsls	r3, r3, #10
 80041fc:	4013      	ands	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d049      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	23c0      	movs	r3, #192	; 0xc0
 800420c:	029b      	lsls	r3, r3, #10
 800420e:	4013      	ands	r3, r2
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	429a      	cmp	r2, r3
 8004214:	d004      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2220      	movs	r2, #32
 800421c:	4013      	ands	r3, r2
 800421e:	d10d      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	23c0      	movs	r3, #192	; 0xc0
 8004226:	029b      	lsls	r3, r3, #10
 8004228:	4013      	ands	r3, r2
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	429a      	cmp	r2, r3
 800422e:	d034      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	4013      	ands	r3, r2
 800423a:	d02e      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800423c:	4b79      	ldr	r3, [pc, #484]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800423e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004240:	4a7a      	ldr	r2, [pc, #488]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004242:	4013      	ands	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004246:	4b77      	ldr	r3, [pc, #476]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004248:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800424a:	4b76      	ldr	r3, [pc, #472]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800424c:	2180      	movs	r1, #128	; 0x80
 800424e:	0309      	lsls	r1, r1, #12
 8004250:	430a      	orrs	r2, r1
 8004252:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004254:	4b73      	ldr	r3, [pc, #460]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004256:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004258:	4b72      	ldr	r3, [pc, #456]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800425a:	4975      	ldr	r1, [pc, #468]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800425c:	400a      	ands	r2, r1
 800425e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004260:	4b70      	ldr	r3, [pc, #448]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4013      	ands	r3, r2
 800426e:	d014      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004270:	f7fe fc42 	bl	8002af8 <HAL_GetTick>
 8004274:	0003      	movs	r3, r0
 8004276:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004278:	e009      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800427a:	f7fe fc3d 	bl	8002af8 <HAL_GetTick>
 800427e:	0002      	movs	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	4a6b      	ldr	r2, [pc, #428]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e0c6      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800428e:	4b65      	ldr	r3, [pc, #404]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004292:	2380      	movs	r3, #128	; 0x80
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4013      	ands	r3, r2
 8004298:	d0ef      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	2380      	movs	r3, #128	; 0x80
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	4013      	ands	r3, r2
 80042a4:	d01f      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	23c0      	movs	r3, #192	; 0xc0
 80042ac:	029b      	lsls	r3, r3, #10
 80042ae:	401a      	ands	r2, r3
 80042b0:	23c0      	movs	r3, #192	; 0xc0
 80042b2:	029b      	lsls	r3, r3, #10
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d10c      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80042b8:	4b5a      	ldr	r3, [pc, #360]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a5e      	ldr	r2, [pc, #376]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80042be:	4013      	ands	r3, r2
 80042c0:	0019      	movs	r1, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	23c0      	movs	r3, #192	; 0xc0
 80042c8:	039b      	lsls	r3, r3, #14
 80042ca:	401a      	ands	r2, r3
 80042cc:	4b55      	ldr	r3, [pc, #340]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042ce:	430a      	orrs	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	4b54      	ldr	r3, [pc, #336]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	23c0      	movs	r3, #192	; 0xc0
 80042dc:	029b      	lsls	r3, r3, #10
 80042de:	401a      	ands	r2, r3
 80042e0:	4b50      	ldr	r3, [pc, #320]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80042e2:	430a      	orrs	r2, r1
 80042e4:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2220      	movs	r2, #32
 80042ec:	4013      	ands	r3, r2
 80042ee:	d01f      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	23c0      	movs	r3, #192	; 0xc0
 80042f6:	029b      	lsls	r3, r3, #10
 80042f8:	401a      	ands	r2, r3
 80042fa:	23c0      	movs	r3, #192	; 0xc0
 80042fc:	029b      	lsls	r3, r3, #10
 80042fe:	429a      	cmp	r2, r3
 8004300:	d10c      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004302:	4b48      	ldr	r3, [pc, #288]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a4c      	ldr	r2, [pc, #304]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004308:	4013      	ands	r3, r2
 800430a:	0019      	movs	r1, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	23c0      	movs	r3, #192	; 0xc0
 8004312:	039b      	lsls	r3, r3, #14
 8004314:	401a      	ands	r2, r3
 8004316:	4b43      	ldr	r3, [pc, #268]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004318:	430a      	orrs	r2, r1
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	4b41      	ldr	r3, [pc, #260]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800431e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	23c0      	movs	r3, #192	; 0xc0
 8004326:	029b      	lsls	r3, r3, #10
 8004328:	401a      	ands	r2, r3
 800432a:	4b3e      	ldr	r3, [pc, #248]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800432c:	430a      	orrs	r2, r1
 800432e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004330:	2317      	movs	r3, #23
 8004332:	18fb      	adds	r3, r7, r3
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d105      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800433a:	4b3a      	ldr	r3, [pc, #232]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800433c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800433e:	4b39      	ldr	r3, [pc, #228]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004340:	493e      	ldr	r1, [pc, #248]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004342:	400a      	ands	r2, r1
 8004344:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2201      	movs	r2, #1
 800434c:	4013      	ands	r3, r2
 800434e:	d009      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004350:	4b34      	ldr	r3, [pc, #208]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004354:	2203      	movs	r2, #3
 8004356:	4393      	bics	r3, r2
 8004358:	0019      	movs	r1, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	4b31      	ldr	r3, [pc, #196]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004360:	430a      	orrs	r2, r1
 8004362:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2202      	movs	r2, #2
 800436a:	4013      	ands	r3, r2
 800436c:	d009      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800436e:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004372:	220c      	movs	r2, #12
 8004374:	4393      	bics	r3, r2
 8004376:	0019      	movs	r1, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	4b29      	ldr	r3, [pc, #164]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800437e:	430a      	orrs	r2, r1
 8004380:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2204      	movs	r2, #4
 8004388:	4013      	ands	r3, r2
 800438a:	d009      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800438c:	4b25      	ldr	r3, [pc, #148]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800438e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004390:	4a2b      	ldr	r2, [pc, #172]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8004392:	4013      	ands	r3, r2
 8004394:	0019      	movs	r1, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695a      	ldr	r2, [r3, #20]
 800439a:	4b22      	ldr	r3, [pc, #136]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800439c:	430a      	orrs	r2, r1
 800439e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2208      	movs	r2, #8
 80043a6:	4013      	ands	r3, r2
 80043a8:	d009      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043aa:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ae:	4a25      	ldr	r2, [pc, #148]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	0019      	movs	r1, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699a      	ldr	r2, [r3, #24]
 80043b8:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043ba:	430a      	orrs	r2, r1
 80043bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	2380      	movs	r3, #128	; 0x80
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	4013      	ands	r3, r2
 80043c8:	d009      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043ca:	4b16      	ldr	r3, [pc, #88]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ce:	4a17      	ldr	r2, [pc, #92]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	0019      	movs	r1, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	69da      	ldr	r2, [r3, #28]
 80043d8:	4b12      	ldr	r3, [pc, #72]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043da:	430a      	orrs	r2, r1
 80043dc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2240      	movs	r2, #64	; 0x40
 80043e4:	4013      	ands	r3, r2
 80043e6:	d009      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043e8:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ec:	4a16      	ldr	r2, [pc, #88]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	0019      	movs	r1, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043f6:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80043f8:	430a      	orrs	r2, r1
 80043fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2280      	movs	r2, #128	; 0x80
 8004402:	4013      	ands	r3, r2
 8004404:	d009      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004406:	4b07      	ldr	r3, [pc, #28]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440a:	4a10      	ldr	r2, [pc, #64]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800440c:	4013      	ands	r3, r2
 800440e:	0019      	movs	r1, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1a      	ldr	r2, [r3, #32]
 8004414:	4b03      	ldr	r3, [pc, #12]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004416:	430a      	orrs	r2, r1
 8004418:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	0018      	movs	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	b006      	add	sp, #24
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	40007000 	.word	0x40007000
 800442c:	fffcffff 	.word	0xfffcffff
 8004430:	fff7ffff 	.word	0xfff7ffff
 8004434:	00001388 	.word	0x00001388
 8004438:	ffcfffff 	.word	0xffcfffff
 800443c:	efffffff 	.word	0xefffffff
 8004440:	fffff3ff 	.word	0xfffff3ff
 8004444:	ffffcfff 	.word	0xffffcfff
 8004448:	fbffffff 	.word	0xfbffffff
 800444c:	fff3ffff 	.word	0xfff3ffff

08004450 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004450:	b5b0      	push	{r4, r5, r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004458:	230f      	movs	r3, #15
 800445a:	18fb      	adds	r3, r7, r3
 800445c:	2201      	movs	r2, #1
 800445e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e088      	b.n	800457c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2221      	movs	r2, #33	; 0x21
 800446e:	5c9b      	ldrb	r3, [r3, r2]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d107      	bne.n	8004486 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2220      	movs	r2, #32
 800447a:	2100      	movs	r1, #0
 800447c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	0018      	movs	r0, r3
 8004482:	f7fe f92b 	bl	80026dc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2221      	movs	r2, #33	; 0x21
 800448a:	2102      	movs	r1, #2
 800448c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	2210      	movs	r2, #16
 8004496:	4013      	ands	r3, r2
 8004498:	2b10      	cmp	r3, #16
 800449a:	d05f      	beq.n	800455c <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	22ca      	movs	r2, #202	; 0xca
 80044a2:	625a      	str	r2, [r3, #36]	; 0x24
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2253      	movs	r2, #83	; 0x53
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80044ac:	250f      	movs	r5, #15
 80044ae:	197c      	adds	r4, r7, r5
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	0018      	movs	r0, r3
 80044b4:	f000 fc2c 	bl	8004d10 <RTC_EnterInitMode>
 80044b8:	0003      	movs	r3, r0
 80044ba:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80044bc:	0028      	movs	r0, r5
 80044be:	183b      	adds	r3, r7, r0
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d12c      	bne.n	8004520 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	492c      	ldr	r1, [pc, #176]	; (8004584 <HAL_RTC_Init+0x134>)
 80044d2:	400a      	ands	r2, r1
 80044d4:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6899      	ldr	r1, [r3, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	68d2      	ldr	r2, [r2, #12]
 80044fc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6919      	ldr	r1, [r3, #16]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	041a      	lsls	r2, r3, #16
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004512:	183c      	adds	r4, r7, r0
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	0018      	movs	r0, r3
 8004518:	f000 fc3e 	bl	8004d98 <RTC_ExitInitMode>
 800451c:	0003      	movs	r3, r0
 800451e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8004520:	230f      	movs	r3, #15
 8004522:	18fb      	adds	r3, r7, r3
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d113      	bne.n	8004552 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2103      	movs	r1, #3
 8004536:	438a      	bics	r2, r1
 8004538:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	22ff      	movs	r2, #255	; 0xff
 8004558:	625a      	str	r2, [r3, #36]	; 0x24
 800455a:	e003      	b.n	8004564 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800455c:	230f      	movs	r3, #15
 800455e:	18fb      	adds	r3, r7, r3
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8004564:	230f      	movs	r3, #15
 8004566:	18fb      	adds	r3, r7, r3
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d103      	bne.n	8004576 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2221      	movs	r2, #33	; 0x21
 8004572:	2101      	movs	r1, #1
 8004574:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004576:	230f      	movs	r3, #15
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	781b      	ldrb	r3, [r3, #0]
}
 800457c:	0018      	movs	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	b004      	add	sp, #16
 8004582:	bdb0      	pop	{r4, r5, r7, pc}
 8004584:	ff8fffbf 	.word	0xff8fffbf

08004588 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004588:	b5b0      	push	{r4, r5, r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	5c9b      	ldrb	r3, [r3, r2]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_RTC_SetTime+0x1e>
 80045a2:	2302      	movs	r3, #2
 80045a4:	e092      	b.n	80046cc <HAL_RTC_SetTime+0x144>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2220      	movs	r2, #32
 80045aa:	2101      	movs	r1, #1
 80045ac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2221      	movs	r2, #33	; 0x21
 80045b2:	2102      	movs	r1, #2
 80045b4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d125      	bne.n	8004608 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	2240      	movs	r2, #64	; 0x40
 80045c4:	4013      	ands	r3, r2
 80045c6:	d102      	bne.n	80045ce <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2200      	movs	r2, #0
 80045cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	0018      	movs	r0, r3
 80045d4:	f000 fc0a 	bl	8004dec <RTC_ByteToBcd2>
 80045d8:	0003      	movs	r3, r0
 80045da:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	785b      	ldrb	r3, [r3, #1]
 80045e0:	0018      	movs	r0, r3
 80045e2:	f000 fc03 	bl	8004dec <RTC_ByteToBcd2>
 80045e6:	0003      	movs	r3, r0
 80045e8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80045ea:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	789b      	ldrb	r3, [r3, #2]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f000 fbfb 	bl	8004dec <RTC_ByteToBcd2>
 80045f6:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045f8:	0022      	movs	r2, r4
 80045fa:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	78db      	ldrb	r3, [r3, #3]
 8004600:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	e017      	b.n	8004638 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2240      	movs	r2, #64	; 0x40
 8004610:	4013      	ands	r3, r2
 8004612:	d102      	bne.n	800461a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2200      	movs	r2, #0
 8004618:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	785b      	ldrb	r3, [r3, #1]
 8004624:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004626:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800462c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	78db      	ldrb	r3, [r3, #3]
 8004632:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	22ca      	movs	r2, #202	; 0xca
 800463e:	625a      	str	r2, [r3, #36]	; 0x24
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2253      	movs	r2, #83	; 0x53
 8004646:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004648:	2513      	movs	r5, #19
 800464a:	197c      	adds	r4, r7, r5
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	0018      	movs	r0, r3
 8004650:	f000 fb5e 	bl	8004d10 <RTC_EnterInitMode>
 8004654:	0003      	movs	r3, r0
 8004656:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8004658:	0028      	movs	r0, r5
 800465a:	183b      	adds	r3, r7, r0
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d120      	bne.n	80046a4 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	491a      	ldr	r1, [pc, #104]	; (80046d4 <HAL_RTC_SetTime+0x14c>)
 800466a:	400a      	ands	r2, r1
 800466c:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4917      	ldr	r1, [pc, #92]	; (80046d8 <HAL_RTC_SetTime+0x150>)
 800467a:	400a      	ands	r2, r1
 800467c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6899      	ldr	r1, [r3, #8]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	431a      	orrs	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004696:	183c      	adds	r4, r7, r0
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	0018      	movs	r0, r3
 800469c:	f000 fb7c 	bl	8004d98 <RTC_ExitInitMode>
 80046a0:	0003      	movs	r3, r0
 80046a2:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80046a4:	2313      	movs	r3, #19
 80046a6:	18fb      	adds	r3, r7, r3
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d103      	bne.n	80046b6 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2221      	movs	r2, #33	; 0x21
 80046b2:	2101      	movs	r1, #1
 80046b4:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	22ff      	movs	r2, #255	; 0xff
 80046bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	2100      	movs	r1, #0
 80046c4:	5499      	strb	r1, [r3, r2]

  return status;
 80046c6:	2313      	movs	r3, #19
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	781b      	ldrb	r3, [r3, #0]
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b006      	add	sp, #24
 80046d2:	bdb0      	pop	{r4, r5, r7, pc}
 80046d4:	007f7f7f 	.word	0x007f7f7f
 80046d8:	fffbffff 	.word	0xfffbffff

080046dc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	045b      	lsls	r3, r3, #17
 80046fe:	0c5a      	lsrs	r2, r3, #17
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a22      	ldr	r2, [pc, #136]	; (8004794 <HAL_RTC_GetTime+0xb8>)
 800470c:	4013      	ands	r3, r2
 800470e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	0c1b      	lsrs	r3, r3, #16
 8004714:	b2db      	uxtb	r3, r3
 8004716:	223f      	movs	r2, #63	; 0x3f
 8004718:	4013      	ands	r3, r2
 800471a:	b2da      	uxtb	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	0a1b      	lsrs	r3, r3, #8
 8004724:	b2db      	uxtb	r3, r3
 8004726:	227f      	movs	r2, #127	; 0x7f
 8004728:	4013      	ands	r3, r2
 800472a:	b2da      	uxtb	r2, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	227f      	movs	r2, #127	; 0x7f
 8004736:	4013      	ands	r3, r2
 8004738:	b2da      	uxtb	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	0d9b      	lsrs	r3, r3, #22
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2201      	movs	r2, #1
 8004746:	4013      	ands	r3, r2
 8004748:	b2da      	uxtb	r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d11a      	bne.n	800478a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	0018      	movs	r0, r3
 800475a:	f000 fb68 	bl	8004e2e <RTC_Bcd2ToByte>
 800475e:	0003      	movs	r3, r0
 8004760:	001a      	movs	r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	785b      	ldrb	r3, [r3, #1]
 800476a:	0018      	movs	r0, r3
 800476c:	f000 fb5f 	bl	8004e2e <RTC_Bcd2ToByte>
 8004770:	0003      	movs	r3, r0
 8004772:	001a      	movs	r2, r3
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	789b      	ldrb	r3, [r3, #2]
 800477c:	0018      	movs	r0, r3
 800477e:	f000 fb56 	bl	8004e2e <RTC_Bcd2ToByte>
 8004782:	0003      	movs	r3, r0
 8004784:	001a      	movs	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	0018      	movs	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	b006      	add	sp, #24
 8004792:	bd80      	pop	{r7, pc}
 8004794:	007f7f7f 	.word	0x007f7f7f

08004798 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004798:	b5b0      	push	{r4, r5, r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2220      	movs	r2, #32
 80047ac:	5c9b      	ldrb	r3, [r3, r2]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_RTC_SetDate+0x1e>
 80047b2:	2302      	movs	r3, #2
 80047b4:	e07e      	b.n	80048b4 <HAL_RTC_SetDate+0x11c>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2220      	movs	r2, #32
 80047ba:	2101      	movs	r1, #1
 80047bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2221      	movs	r2, #33	; 0x21
 80047c2:	2102      	movs	r1, #2
 80047c4:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10e      	bne.n	80047ea <HAL_RTC_SetDate+0x52>
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	785b      	ldrb	r3, [r3, #1]
 80047d0:	001a      	movs	r2, r3
 80047d2:	2310      	movs	r3, #16
 80047d4:	4013      	ands	r3, r2
 80047d6:	d008      	beq.n	80047ea <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	785b      	ldrb	r3, [r3, #1]
 80047dc:	2210      	movs	r2, #16
 80047de:	4393      	bics	r3, r2
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	330a      	adds	r3, #10
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d11c      	bne.n	800482a <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	78db      	ldrb	r3, [r3, #3]
 80047f4:	0018      	movs	r0, r3
 80047f6:	f000 faf9 	bl	8004dec <RTC_ByteToBcd2>
 80047fa:	0003      	movs	r3, r0
 80047fc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	785b      	ldrb	r3, [r3, #1]
 8004802:	0018      	movs	r0, r3
 8004804:	f000 faf2 	bl	8004dec <RTC_ByteToBcd2>
 8004808:	0003      	movs	r3, r0
 800480a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800480c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	789b      	ldrb	r3, [r3, #2]
 8004812:	0018      	movs	r0, r3
 8004814:	f000 faea 	bl	8004dec <RTC_ByteToBcd2>
 8004818:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800481a:	0022      	movs	r2, r4
 800481c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004824:	4313      	orrs	r3, r2
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	e00e      	b.n	8004848 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	78db      	ldrb	r3, [r3, #3]
 800482e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	785b      	ldrb	r3, [r3, #1]
 8004834:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004836:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800483c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	22ca      	movs	r2, #202	; 0xca
 800484e:	625a      	str	r2, [r3, #36]	; 0x24
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2253      	movs	r2, #83	; 0x53
 8004856:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004858:	2513      	movs	r5, #19
 800485a:	197c      	adds	r4, r7, r5
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	0018      	movs	r0, r3
 8004860:	f000 fa56 	bl	8004d10 <RTC_EnterInitMode>
 8004864:	0003      	movs	r3, r0
 8004866:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8004868:	0028      	movs	r0, r5
 800486a:	183b      	adds	r3, r7, r0
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10c      	bne.n	800488c <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	4910      	ldr	r1, [pc, #64]	; (80048bc <HAL_RTC_SetDate+0x124>)
 800487a:	400a      	ands	r2, r1
 800487c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800487e:	183c      	adds	r4, r7, r0
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	0018      	movs	r0, r3
 8004884:	f000 fa88 	bl	8004d98 <RTC_ExitInitMode>
 8004888:	0003      	movs	r3, r0
 800488a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800488c:	2313      	movs	r3, #19
 800488e:	18fb      	adds	r3, r7, r3
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d103      	bne.n	800489e <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2221      	movs	r2, #33	; 0x21
 800489a:	2101      	movs	r1, #1
 800489c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	22ff      	movs	r2, #255	; 0xff
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2220      	movs	r2, #32
 80048aa:	2100      	movs	r1, #0
 80048ac:	5499      	strb	r1, [r3, r2]

  return status;
 80048ae:	2313      	movs	r3, #19
 80048b0:	18fb      	adds	r3, r7, r3
 80048b2:	781b      	ldrb	r3, [r3, #0]
}
 80048b4:	0018      	movs	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	b006      	add	sp, #24
 80048ba:	bdb0      	pop	{r4, r5, r7, pc}
 80048bc:	00ffff3f 	.word	0x00ffff3f

080048c0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	4a21      	ldr	r2, [pc, #132]	; (800495c <HAL_RTC_GetDate+0x9c>)
 80048d8:	4013      	ands	r3, r2
 80048da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	0c1b      	lsrs	r3, r3, #16
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	0a1b      	lsrs	r3, r3, #8
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	221f      	movs	r2, #31
 80048ee:	4013      	ands	r3, r2
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	223f      	movs	r2, #63	; 0x3f
 80048fc:	4013      	ands	r3, r2
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	0b5b      	lsrs	r3, r3, #13
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2207      	movs	r2, #7
 800490c:	4013      	ands	r3, r2
 800490e:	b2da      	uxtb	r2, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d11a      	bne.n	8004950 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	78db      	ldrb	r3, [r3, #3]
 800491e:	0018      	movs	r0, r3
 8004920:	f000 fa85 	bl	8004e2e <RTC_Bcd2ToByte>
 8004924:	0003      	movs	r3, r0
 8004926:	001a      	movs	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	785b      	ldrb	r3, [r3, #1]
 8004930:	0018      	movs	r0, r3
 8004932:	f000 fa7c 	bl	8004e2e <RTC_Bcd2ToByte>
 8004936:	0003      	movs	r3, r0
 8004938:	001a      	movs	r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	789b      	ldrb	r3, [r3, #2]
 8004942:	0018      	movs	r0, r3
 8004944:	f000 fa73 	bl	8004e2e <RTC_Bcd2ToByte>
 8004948:	0003      	movs	r3, r0
 800494a:	001a      	movs	r2, r3
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	0018      	movs	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	b006      	add	sp, #24
 8004958:	bd80      	pop	{r7, pc}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	00ffff3f 	.word	0x00ffff3f

08004960 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004960:	b590      	push	{r4, r7, lr}
 8004962:	b089      	sub	sp, #36	; 0x24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800496c:	4ba7      	ldr	r3, [pc, #668]	; (8004c0c <HAL_RTC_SetAlarm_IT+0x2ac>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	22fa      	movs	r2, #250	; 0xfa
 8004972:	01d1      	lsls	r1, r2, #7
 8004974:	0018      	movs	r0, r3
 8004976:	f7fb fbd9 	bl	800012c <__udivsi3>
 800497a:	0003      	movs	r3, r0
 800497c:	001a      	movs	r2, r3
 800497e:	0013      	movs	r3, r2
 8004980:	015b      	lsls	r3, r3, #5
 8004982:	1a9b      	subs	r3, r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	189b      	adds	r3, r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	5c9b      	ldrb	r3, [r3, r2]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_RTC_SetAlarm_IT+0x42>
 800499e:	2302      	movs	r3, #2
 80049a0:	e130      	b.n	8004c04 <HAL_RTC_SetAlarm_IT+0x2a4>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2220      	movs	r2, #32
 80049a6:	2101      	movs	r1, #1
 80049a8:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2221      	movs	r2, #33	; 0x21
 80049ae:	2102      	movs	r1, #2
 80049b0:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d136      	bne.n	8004a26 <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2240      	movs	r2, #64	; 0x40
 80049c0:	4013      	ands	r3, r2
 80049c2:	d102      	bne.n	80049ca <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2200      	movs	r2, #0
 80049c8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	0018      	movs	r0, r3
 80049d0:	f000 fa0c 	bl	8004dec <RTC_ByteToBcd2>
 80049d4:	0003      	movs	r3, r0
 80049d6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	785b      	ldrb	r3, [r3, #1]
 80049dc:	0018      	movs	r0, r3
 80049de:	f000 fa05 	bl	8004dec <RTC_ByteToBcd2>
 80049e2:	0003      	movs	r3, r0
 80049e4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80049e6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	789b      	ldrb	r3, [r3, #2]
 80049ec:	0018      	movs	r0, r3
 80049ee:	f000 f9fd 	bl	8004dec <RTC_ByteToBcd2>
 80049f2:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80049f4:	0022      	movs	r2, r4
 80049f6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	78db      	ldrb	r3, [r3, #3]
 80049fc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80049fe:	431a      	orrs	r2, r3
 8004a00:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2220      	movs	r2, #32
 8004a06:	5c9b      	ldrb	r3, [r3, r2]
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f000 f9ef 	bl	8004dec <RTC_ByteToBcd2>
 8004a0e:	0003      	movs	r3, r0
 8004a10:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8004a12:	0022      	movs	r2, r4
 8004a14:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8004a1a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8004a20:	4313      	orrs	r3, r2
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	e022      	b.n	8004a6c <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2240      	movs	r2, #64	; 0x40
 8004a2e:	4013      	ands	r3, r2
 8004a30:	d102      	bne.n	8004a38 <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2200      	movs	r2, #0
 8004a36:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	785b      	ldrb	r3, [r3, #1]
 8004a42:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004a44:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8004a4a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	78db      	ldrb	r3, [r3, #3]
 8004a50:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8004a52:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2120      	movs	r1, #32
 8004a58:	5c5b      	ldrb	r3, [r3, r1]
 8004a5a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8004a5c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8004a62:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8004a74:	4313      	orrs	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	22ca      	movs	r2, #202	; 0xca
 8004a7e:	625a      	str	r2, [r3, #36]	; 0x24
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2253      	movs	r2, #83	; 0x53
 8004a86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a8c:	2380      	movs	r3, #128	; 0x80
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d146      	bne.n	8004b22 <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	495c      	ldr	r1, [pc, #368]	; (8004c10 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8004aa0:	400a      	ands	r2, r1
 8004aa2:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	22ff      	movs	r2, #255	; 0xff
 8004aac:	401a      	ands	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4958      	ldr	r1, [pc, #352]	; (8004c14 <HAL_RTC_SetAlarm_IT+0x2b4>)
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10d      	bne.n	8004ae0 <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	22ff      	movs	r2, #255	; 0xff
 8004aca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2221      	movs	r2, #33	; 0x21
 8004ad0:	2103      	movs	r1, #3
 8004ad2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	2100      	movs	r1, #0
 8004ada:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e091      	b.n	8004c04 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d0e5      	beq.n	8004ab8 <HAL_RTC_SetAlarm_IT+0x158>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	69fa      	ldr	r2, [r7, #28]
 8004af2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2180      	movs	r1, #128	; 0x80
 8004b08:	0049      	lsls	r1, r1, #1
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2180      	movs	r1, #128	; 0x80
 8004b1a:	0149      	lsls	r1, r1, #5
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	609a      	str	r2, [r3, #8]
 8004b20:	e055      	b.n	8004bce <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	493a      	ldr	r1, [pc, #232]	; (8004c18 <HAL_RTC_SetAlarm_IT+0x2b8>)
 8004b2e:	400a      	ands	r2, r1
 8004b30:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	22ff      	movs	r2, #255	; 0xff
 8004b3a:	401a      	ands	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4936      	ldr	r1, [pc, #216]	; (8004c1c <HAL_RTC_SetAlarm_IT+0x2bc>)
 8004b42:	430a      	orrs	r2, r1
 8004b44:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004b46:	4b31      	ldr	r3, [pc, #196]	; (8004c0c <HAL_RTC_SetAlarm_IT+0x2ac>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	22fa      	movs	r2, #250	; 0xfa
 8004b4c:	01d1      	lsls	r1, r2, #7
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f7fb faec 	bl	800012c <__udivsi3>
 8004b54:	0003      	movs	r3, r0
 8004b56:	001a      	movs	r2, r3
 8004b58:	0013      	movs	r3, r2
 8004b5a:	015b      	lsls	r3, r3, #5
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	189b      	adds	r3, r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10d      	bne.n	8004b8e <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	22ff      	movs	r2, #255	; 0xff
 8004b78:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2221      	movs	r2, #33	; 0x21
 8004b7e:	2103      	movs	r1, #3
 8004b80:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2220      	movs	r2, #32
 8004b86:	2100      	movs	r1, #0
 8004b88:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e03a      	b.n	8004c04 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	2202      	movs	r2, #2
 8004b96:	4013      	ands	r3, r2
 8004b98:	d0e5      	beq.n	8004b66 <HAL_RTC_SetAlarm_IT+0x206>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69fa      	ldr	r2, [r7, #28]
 8004ba0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2180      	movs	r1, #128	; 0x80
 8004bb6:	0089      	lsls	r1, r1, #2
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2180      	movs	r1, #128	; 0x80
 8004bc8:	0189      	lsls	r1, r1, #6
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004bce:	4b14      	ldr	r3, [pc, #80]	; (8004c20 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	4b13      	ldr	r3, [pc, #76]	; (8004c20 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8004bd4:	2180      	movs	r1, #128	; 0x80
 8004bd6:	0289      	lsls	r1, r1, #10
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004bdc:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8004be2:	2180      	movs	r1, #128	; 0x80
 8004be4:	0289      	lsls	r1, r1, #10
 8004be6:	430a      	orrs	r2, r1
 8004be8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	22ff      	movs	r2, #255	; 0xff
 8004bf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2221      	movs	r2, #33	; 0x21
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	2100      	movs	r1, #0
 8004c00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	0018      	movs	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	b009      	add	sp, #36	; 0x24
 8004c0a:	bd90      	pop	{r4, r7, pc}
 8004c0c:	20000000 	.word	0x20000000
 8004c10:	fffffeff 	.word	0xfffffeff
 8004c14:	fffffe7f 	.word	0xfffffe7f
 8004c18:	fffffdff 	.word	0xfffffdff
 8004c1c:	fffffd7f 	.word	0xfffffd7f
 8004c20:	40010400 	.word	0x40010400

08004c24 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004c2c:	4b21      	ldr	r3, [pc, #132]	; (8004cb4 <HAL_RTC_AlarmIRQHandler+0x90>)
 8004c2e:	2280      	movs	r2, #128	; 0x80
 8004c30:	0292      	lsls	r2, r2, #10
 8004c32:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	2380      	movs	r3, #128	; 0x80
 8004c3c:	015b      	lsls	r3, r3, #5
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d014      	beq.n	8004c6c <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	2380      	movs	r3, #128	; 0x80
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d00d      	beq.n	8004c6c <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	22ff      	movs	r2, #255	; 0xff
 8004c58:	401a      	ands	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4916      	ldr	r1, [pc, #88]	; (8004cb8 <HAL_RTC_AlarmIRQHandler+0x94>)
 8004c60:	430a      	orrs	r2, r1
 8004c62:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	0018      	movs	r0, r3
 8004c68:	f7fc ff12 	bl	8001a90 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	2380      	movs	r3, #128	; 0x80
 8004c74:	019b      	lsls	r3, r3, #6
 8004c76:	4013      	ands	r3, r2
 8004c78:	d014      	beq.n	8004ca4 <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	2380      	movs	r3, #128	; 0x80
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4013      	ands	r3, r2
 8004c86:	d00d      	beq.n	8004ca4 <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	22ff      	movs	r2, #255	; 0xff
 8004c90:	401a      	ands	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4909      	ldr	r1, [pc, #36]	; (8004cbc <HAL_RTC_AlarmIRQHandler+0x98>)
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	f000 f912 	bl	8004ec8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2221      	movs	r2, #33	; 0x21
 8004ca8:	2101      	movs	r1, #1
 8004caa:	5499      	strb	r1, [r3, r2]
}
 8004cac:	46c0      	nop			; (mov r8, r8)
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b002      	add	sp, #8
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40010400 	.word	0x40010400
 8004cb8:	fffffe7f 	.word	0xfffffe7f
 8004cbc:	fffffd7f 	.word	0xfffffd7f

08004cc0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a0e      	ldr	r2, [pc, #56]	; (8004d0c <HAL_RTC_WaitForSynchro+0x4c>)
 8004cd2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cd4:	f7fd ff10 	bl	8002af8 <HAL_GetTick>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004cdc:	e00a      	b.n	8004cf4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004cde:	f7fd ff0b 	bl	8002af8 <HAL_GetTick>
 8004ce2:	0002      	movs	r2, r0
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	1ad2      	subs	r2, r2, r3
 8004ce8:	23fa      	movs	r3, #250	; 0xfa
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d901      	bls.n	8004cf4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e006      	b.n	8004d02 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d0ee      	beq.n	8004cde <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	0018      	movs	r0, r3
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b004      	add	sp, #16
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	0001ff5f 	.word	0x0001ff5f

08004d10 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1c:	230f      	movs	r3, #15
 8004d1e:	18fb      	adds	r3, r7, r3
 8004d20:	2200      	movs	r2, #0
 8004d22:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	2240      	movs	r2, #64	; 0x40
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d12c      	bne.n	8004d8a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2180      	movs	r1, #128	; 0x80
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d40:	f7fd feda 	bl	8002af8 <HAL_GetTick>
 8004d44:	0003      	movs	r3, r0
 8004d46:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004d48:	e014      	b.n	8004d74 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d4a:	f7fd fed5 	bl	8002af8 <HAL_GetTick>
 8004d4e:	0002      	movs	r2, r0
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	1ad2      	subs	r2, r2, r3
 8004d54:	200f      	movs	r0, #15
 8004d56:	183b      	adds	r3, r7, r0
 8004d58:	1839      	adds	r1, r7, r0
 8004d5a:	7809      	ldrb	r1, [r1, #0]
 8004d5c:	7019      	strb	r1, [r3, #0]
 8004d5e:	23fa      	movs	r3, #250	; 0xfa
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d906      	bls.n	8004d74 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2221      	movs	r2, #33	; 0x21
 8004d6a:	2104      	movs	r1, #4
 8004d6c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8004d6e:	183b      	adds	r3, r7, r0
 8004d70:	2201      	movs	r2, #1
 8004d72:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	2240      	movs	r2, #64	; 0x40
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	d104      	bne.n	8004d8a <RTC_EnterInitMode+0x7a>
 8004d80:	230f      	movs	r3, #15
 8004d82:	18fb      	adds	r3, r7, r3
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d1df      	bne.n	8004d4a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8004d8a:	230f      	movs	r3, #15
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	781b      	ldrb	r3, [r3, #0]
}
 8004d90:	0018      	movs	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b004      	add	sp, #16
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d98:	b590      	push	{r4, r7, lr}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004da0:	240f      	movs	r4, #15
 8004da2:	193b      	adds	r3, r7, r4
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2180      	movs	r1, #128	; 0x80
 8004db4:	438a      	bics	r2, r1
 8004db6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d10c      	bne.n	8004dde <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f7ff ff7a 	bl	8004cc0 <HAL_RTC_WaitForSynchro>
 8004dcc:	1e03      	subs	r3, r0, #0
 8004dce:	d006      	beq.n	8004dde <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2221      	movs	r2, #33	; 0x21
 8004dd4:	2104      	movs	r1, #4
 8004dd6:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8004dd8:	193b      	adds	r3, r7, r4
 8004dda:	2201      	movs	r2, #1
 8004ddc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004dde:	230f      	movs	r3, #15
 8004de0:	18fb      	adds	r3, r7, r3
 8004de2:	781b      	ldrb	r3, [r3, #0]
}
 8004de4:	0018      	movs	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	b005      	add	sp, #20
 8004dea:	bd90      	pop	{r4, r7, pc}

08004dec <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	0002      	movs	r2, r0
 8004df4:	1dfb      	adds	r3, r7, #7
 8004df6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004dfc:	e007      	b.n	8004e0e <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3301      	adds	r3, #1
 8004e02:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004e04:	1dfb      	adds	r3, r7, #7
 8004e06:	1dfa      	adds	r2, r7, #7
 8004e08:	7812      	ldrb	r2, [r2, #0]
 8004e0a:	3a0a      	subs	r2, #10
 8004e0c:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8004e0e:	1dfb      	adds	r3, r7, #7
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b09      	cmp	r3, #9
 8004e14:	d8f3      	bhi.n	8004dfe <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	1dfb      	adds	r3, r7, #7
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	b2db      	uxtb	r3, r3
}
 8004e26:	0018      	movs	r0, r3
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	b004      	add	sp, #16
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	0002      	movs	r2, r0
 8004e36:	1dfb      	adds	r3, r7, #7
 8004e38:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004e3e:	1dfb      	adds	r3, r7, #7
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	091b      	lsrs	r3, r3, #4
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	001a      	movs	r2, r3
 8004e48:	0013      	movs	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	189b      	adds	r3, r3, r2
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	1dfb      	adds	r3, r7, #7
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	210f      	movs	r1, #15
 8004e5c:	400b      	ands	r3, r1
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	18d3      	adds	r3, r2, r3
 8004e62:	b2db      	uxtb	r3, r3
}
 8004e64:	0018      	movs	r0, r3
 8004e66:	46bd      	mov	sp, r7
 8004e68:	b004      	add	sp, #16
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3350      	adds	r3, #80	; 0x50
 8004e82:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	18d3      	adds	r3, r2, r3
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	601a      	str	r2, [r3, #0]
}
 8004e94:	46c0      	nop			; (mov r8, r8)
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b006      	add	sp, #24
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3350      	adds	r3, #80	; 0x50
 8004eb0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	18d3      	adds	r3, r2, r3
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
}
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b004      	add	sp, #16
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004ed0:	46c0      	nop			; (mov r8, r8)
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b002      	add	sp, #8
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e083      	b.n	8004ff2 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d109      	bne.n	8004f06 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	2382      	movs	r3, #130	; 0x82
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d009      	beq.n	8004f12 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	61da      	str	r2, [r3, #28]
 8004f04:	e005      	b.n	8004f12 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2251      	movs	r2, #81	; 0x51
 8004f1c:	5c9b      	ldrb	r3, [r3, r2]
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d107      	bne.n	8004f34 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2250      	movs	r2, #80	; 0x50
 8004f28:	2100      	movs	r1, #0
 8004f2a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f7fd fbf4 	bl	800271c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2251      	movs	r2, #81	; 0x51
 8004f38:	2102      	movs	r1, #2
 8004f3a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2140      	movs	r1, #64	; 0x40
 8004f48:	438a      	bics	r2, r1
 8004f4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	2382      	movs	r3, #130	; 0x82
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	401a      	ands	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6899      	ldr	r1, [r3, #8]
 8004f5a:	2384      	movs	r3, #132	; 0x84
 8004f5c:	021b      	lsls	r3, r3, #8
 8004f5e:	400b      	ands	r3, r1
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68d9      	ldr	r1, [r3, #12]
 8004f66:	2380      	movs	r3, #128	; 0x80
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	400b      	ands	r3, r1
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2102      	movs	r1, #2
 8004f74:	400b      	ands	r3, r1
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	400b      	ands	r3, r1
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6999      	ldr	r1, [r3, #24]
 8004f86:	2380      	movs	r3, #128	; 0x80
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	400b      	ands	r3, r1
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	2138      	movs	r1, #56	; 0x38
 8004f94:	400b      	ands	r3, r1
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	2180      	movs	r1, #128	; 0x80
 8004f9e:	400b      	ands	r3, r1
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	0011      	movs	r1, r2
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fa8:	2380      	movs	r3, #128	; 0x80
 8004faa:	019b      	lsls	r3, r3, #6
 8004fac:	401a      	ands	r2, r3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	0c1b      	lsrs	r3, r3, #16
 8004fbc:	2204      	movs	r2, #4
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	0019      	movs	r1, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	2210      	movs	r2, #16
 8004fc8:	401a      	ands	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4907      	ldr	r1, [pc, #28]	; (8004ffc <HAL_SPI_Init+0x124>)
 8004fde:	400a      	ands	r2, r1
 8004fe0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2251      	movs	r2, #81	; 0x51
 8004fec:	2101      	movs	r1, #1
 8004fee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	0018      	movs	r0, r3
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	b002      	add	sp, #8
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	fffff7ff 	.word	0xfffff7ff

08005000 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	1dbb      	adds	r3, r7, #6
 800500e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005010:	231f      	movs	r3, #31
 8005012:	18fb      	adds	r3, r7, r3
 8005014:	2200      	movs	r2, #0
 8005016:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2250      	movs	r2, #80	; 0x50
 800501c:	5c9b      	ldrb	r3, [r3, r2]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_SPI_Transmit+0x26>
 8005022:	2302      	movs	r3, #2
 8005024:	e145      	b.n	80052b2 <HAL_SPI_Transmit+0x2b2>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2250      	movs	r2, #80	; 0x50
 800502a:	2101      	movs	r1, #1
 800502c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800502e:	f7fd fd63 	bl	8002af8 <HAL_GetTick>
 8005032:	0003      	movs	r3, r0
 8005034:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005036:	2316      	movs	r3, #22
 8005038:	18fb      	adds	r3, r7, r3
 800503a:	1dba      	adds	r2, r7, #6
 800503c:	8812      	ldrh	r2, [r2, #0]
 800503e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2251      	movs	r2, #81	; 0x51
 8005044:	5c9b      	ldrb	r3, [r3, r2]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b01      	cmp	r3, #1
 800504a:	d004      	beq.n	8005056 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800504c:	231f      	movs	r3, #31
 800504e:	18fb      	adds	r3, r7, r3
 8005050:	2202      	movs	r2, #2
 8005052:	701a      	strb	r2, [r3, #0]
    goto error;
 8005054:	e126      	b.n	80052a4 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_SPI_Transmit+0x64>
 800505c:	1dbb      	adds	r3, r7, #6
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d104      	bne.n	800506e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005064:	231f      	movs	r3, #31
 8005066:	18fb      	adds	r3, r7, r3
 8005068:	2201      	movs	r2, #1
 800506a:	701a      	strb	r2, [r3, #0]
    goto error;
 800506c:	e11a      	b.n	80052a4 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2251      	movs	r2, #81	; 0x51
 8005072:	2103      	movs	r1, #3
 8005074:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1dba      	adds	r2, r7, #6
 8005086:	8812      	ldrh	r2, [r2, #0]
 8005088:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1dba      	adds	r2, r7, #6
 800508e:	8812      	ldrh	r2, [r2, #0]
 8005090:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	2380      	movs	r3, #128	; 0x80
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d110      	bne.n	80050de <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2140      	movs	r1, #64	; 0x40
 80050c8:	438a      	bics	r2, r1
 80050ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2180      	movs	r1, #128	; 0x80
 80050d8:	01c9      	lsls	r1, r1, #7
 80050da:	430a      	orrs	r2, r1
 80050dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2240      	movs	r2, #64	; 0x40
 80050e6:	4013      	ands	r3, r2
 80050e8:	2b40      	cmp	r3, #64	; 0x40
 80050ea:	d007      	beq.n	80050fc <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2140      	movs	r1, #64	; 0x40
 80050f8:	430a      	orrs	r2, r1
 80050fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	2380      	movs	r3, #128	; 0x80
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	429a      	cmp	r2, r3
 8005106:	d152      	bne.n	80051ae <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d004      	beq.n	800511a <HAL_SPI_Transmit+0x11a>
 8005110:	2316      	movs	r3, #22
 8005112:	18fb      	adds	r3, r7, r3
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d143      	bne.n	80051a2 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	881a      	ldrh	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	1c9a      	adds	r2, r3, #2
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005134:	b29b      	uxth	r3, r3
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800513e:	e030      	b.n	80051a2 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2202      	movs	r2, #2
 8005148:	4013      	ands	r3, r2
 800514a:	2b02      	cmp	r3, #2
 800514c:	d112      	bne.n	8005174 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	881a      	ldrh	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	1c9a      	adds	r2, r3, #2
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005168:	b29b      	uxth	r3, r3
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	86da      	strh	r2, [r3, #54]	; 0x36
 8005172:	e016      	b.n	80051a2 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005174:	f7fd fcc0 	bl	8002af8 <HAL_GetTick>
 8005178:	0002      	movs	r2, r0
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d802      	bhi.n	800518a <HAL_SPI_Transmit+0x18a>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	3301      	adds	r3, #1
 8005188:	d102      	bne.n	8005190 <HAL_SPI_Transmit+0x190>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d108      	bne.n	80051a2 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8005190:	231f      	movs	r3, #31
 8005192:	18fb      	adds	r3, r7, r3
 8005194:	2203      	movs	r2, #3
 8005196:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2251      	movs	r2, #81	; 0x51
 800519c:	2101      	movs	r1, #1
 800519e:	5499      	strb	r1, [r3, r2]
          goto error;
 80051a0:	e080      	b.n	80052a4 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1c9      	bne.n	8005140 <HAL_SPI_Transmit+0x140>
 80051ac:	e053      	b.n	8005256 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d004      	beq.n	80051c0 <HAL_SPI_Transmit+0x1c0>
 80051b6:	2316      	movs	r3, #22
 80051b8:	18fb      	adds	r3, r7, r3
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d145      	bne.n	800524c <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	330c      	adds	r3, #12
 80051ca:	7812      	ldrb	r2, [r2, #0]
 80051cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051e6:	e031      	b.n	800524c <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	2202      	movs	r2, #2
 80051f0:	4013      	ands	r3, r2
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d113      	bne.n	800521e <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	330c      	adds	r3, #12
 8005200:	7812      	ldrb	r2, [r2, #0]
 8005202:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	86da      	strh	r2, [r3, #54]	; 0x36
 800521c:	e016      	b.n	800524c <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800521e:	f7fd fc6b 	bl	8002af8 <HAL_GetTick>
 8005222:	0002      	movs	r2, r0
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d802      	bhi.n	8005234 <HAL_SPI_Transmit+0x234>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	3301      	adds	r3, #1
 8005232:	d102      	bne.n	800523a <HAL_SPI_Transmit+0x23a>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d108      	bne.n	800524c <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 800523a:	231f      	movs	r3, #31
 800523c:	18fb      	adds	r3, r7, r3
 800523e:	2203      	movs	r2, #3
 8005240:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2251      	movs	r2, #81	; 0x51
 8005246:	2101      	movs	r1, #1
 8005248:	5499      	strb	r1, [r3, r2]
          goto error;
 800524a:	e02b      	b.n	80052a4 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1c8      	bne.n	80051e8 <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	6839      	ldr	r1, [r7, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	0018      	movs	r0, r3
 800525e:	f000 fc1f 	bl	8005aa0 <SPI_EndRxTxTransaction>
 8005262:	1e03      	subs	r3, r0, #0
 8005264:	d002      	beq.n	800526c <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10a      	bne.n	800528a <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005274:	2300      	movs	r3, #0
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528e:	2b00      	cmp	r3, #0
 8005290:	d004      	beq.n	800529c <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8005292:	231f      	movs	r3, #31
 8005294:	18fb      	adds	r3, r7, r3
 8005296:	2201      	movs	r2, #1
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	e003      	b.n	80052a4 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2251      	movs	r2, #81	; 0x51
 80052a0:	2101      	movs	r1, #1
 80052a2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2250      	movs	r2, #80	; 0x50
 80052a8:	2100      	movs	r1, #0
 80052aa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80052ac:	231f      	movs	r3, #31
 80052ae:	18fb      	adds	r3, r7, r3
 80052b0:	781b      	ldrb	r3, [r3, #0]
}
 80052b2:	0018      	movs	r0, r3
 80052b4:	46bd      	mov	sp, r7
 80052b6:	b008      	add	sp, #32
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052bc:	b590      	push	{r4, r7, lr}
 80052be:	b089      	sub	sp, #36	; 0x24
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	1dbb      	adds	r3, r7, #6
 80052ca:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052cc:	2117      	movs	r1, #23
 80052ce:	187b      	adds	r3, r7, r1
 80052d0:	2200      	movs	r2, #0
 80052d2:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2251      	movs	r2, #81	; 0x51
 80052d8:	5c9b      	ldrb	r3, [r3, r2]
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d003      	beq.n	80052e8 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80052e0:	187b      	adds	r3, r7, r1
 80052e2:	2202      	movs	r2, #2
 80052e4:	701a      	strb	r2, [r3, #0]
    goto error;
 80052e6:	e109      	b.n	80054fc <HAL_SPI_Receive+0x240>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	2382      	movs	r3, #130	; 0x82
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d113      	bne.n	800531c <HAL_SPI_Receive+0x60>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10f      	bne.n	800531c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2251      	movs	r2, #81	; 0x51
 8005300:	2104      	movs	r1, #4
 8005302:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005304:	1dbb      	adds	r3, r7, #6
 8005306:	881c      	ldrh	r4, [r3, #0]
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	0023      	movs	r3, r4
 8005314:	f000 f900 	bl	8005518 <HAL_SPI_TransmitReceive>
 8005318:	0003      	movs	r3, r0
 800531a:	e0f6      	b.n	800550a <HAL_SPI_Receive+0x24e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2250      	movs	r2, #80	; 0x50
 8005320:	5c9b      	ldrb	r3, [r3, r2]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d101      	bne.n	800532a <HAL_SPI_Receive+0x6e>
 8005326:	2302      	movs	r3, #2
 8005328:	e0ef      	b.n	800550a <HAL_SPI_Receive+0x24e>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2250      	movs	r2, #80	; 0x50
 800532e:	2101      	movs	r1, #1
 8005330:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005332:	f7fd fbe1 	bl	8002af8 <HAL_GetTick>
 8005336:	0003      	movs	r3, r0
 8005338:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <HAL_SPI_Receive+0x8c>
 8005340:	1dbb      	adds	r3, r7, #6
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d104      	bne.n	8005352 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8005348:	2317      	movs	r3, #23
 800534a:	18fb      	adds	r3, r7, r3
 800534c:	2201      	movs	r2, #1
 800534e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005350:	e0d4      	b.n	80054fc <HAL_SPI_Receive+0x240>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2251      	movs	r2, #81	; 0x51
 8005356:	2104      	movs	r1, #4
 8005358:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1dba      	adds	r2, r7, #6
 800536a:	8812      	ldrh	r2, [r2, #0]
 800536c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1dba      	adds	r2, r7, #6
 8005372:	8812      	ldrh	r2, [r2, #0]
 8005374:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	2380      	movs	r3, #128	; 0x80
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	429a      	cmp	r2, r3
 800539e:	d10f      	bne.n	80053c0 <HAL_SPI_Receive+0x104>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2140      	movs	r1, #64	; 0x40
 80053ac:	438a      	bics	r2, r1
 80053ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4956      	ldr	r1, [pc, #344]	; (8005514 <HAL_SPI_Receive+0x258>)
 80053bc:	400a      	ands	r2, r1
 80053be:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2240      	movs	r2, #64	; 0x40
 80053c8:	4013      	ands	r3, r2
 80053ca:	2b40      	cmp	r3, #64	; 0x40
 80053cc:	d007      	beq.n	80053de <HAL_SPI_Receive+0x122>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2140      	movs	r1, #64	; 0x40
 80053da:	430a      	orrs	r2, r1
 80053dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d000      	beq.n	80053e8 <HAL_SPI_Receive+0x12c>
 80053e6:	e06c      	b.n	80054c2 <HAL_SPI_Receive+0x206>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80053e8:	e033      	b.n	8005452 <HAL_SPI_Receive+0x196>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2201      	movs	r2, #1
 80053f2:	4013      	ands	r3, r2
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d115      	bne.n	8005424 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	330c      	adds	r3, #12
 80053fe:	001a      	movs	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	7812      	ldrb	r2, [r2, #0]
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005418:	b29b      	uxth	r3, r3
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005422:	e016      	b.n	8005452 <HAL_SPI_Receive+0x196>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005424:	f7fd fb68 	bl	8002af8 <HAL_GetTick>
 8005428:	0002      	movs	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	429a      	cmp	r2, r3
 8005432:	d802      	bhi.n	800543a <HAL_SPI_Receive+0x17e>
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	3301      	adds	r3, #1
 8005438:	d102      	bne.n	8005440 <HAL_SPI_Receive+0x184>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d108      	bne.n	8005452 <HAL_SPI_Receive+0x196>
        {
          errorcode = HAL_TIMEOUT;
 8005440:	2317      	movs	r3, #23
 8005442:	18fb      	adds	r3, r7, r3
 8005444:	2203      	movs	r2, #3
 8005446:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2251      	movs	r2, #81	; 0x51
 800544c:	2101      	movs	r1, #1
 800544e:	5499      	strb	r1, [r3, r2]
          goto error;
 8005450:	e054      	b.n	80054fc <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1c6      	bne.n	80053ea <HAL_SPI_Receive+0x12e>
 800545c:	e036      	b.n	80054cc <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	2201      	movs	r2, #1
 8005466:	4013      	ands	r3, r2
 8005468:	2b01      	cmp	r3, #1
 800546a:	d113      	bne.n	8005494 <HAL_SPI_Receive+0x1d8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	b292      	uxth	r2, r2
 8005478:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547e:	1c9a      	adds	r2, r3, #2
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005488:	b29b      	uxth	r3, r3
 800548a:	3b01      	subs	r3, #1
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005492:	e016      	b.n	80054c2 <HAL_SPI_Receive+0x206>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005494:	f7fd fb30 	bl	8002af8 <HAL_GetTick>
 8005498:	0002      	movs	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d802      	bhi.n	80054aa <HAL_SPI_Receive+0x1ee>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	3301      	adds	r3, #1
 80054a8:	d102      	bne.n	80054b0 <HAL_SPI_Receive+0x1f4>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d108      	bne.n	80054c2 <HAL_SPI_Receive+0x206>
        {
          errorcode = HAL_TIMEOUT;
 80054b0:	2317      	movs	r3, #23
 80054b2:	18fb      	adds	r3, r7, r3
 80054b4:	2203      	movs	r2, #3
 80054b6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2251      	movs	r2, #81	; 0x51
 80054bc:	2101      	movs	r1, #1
 80054be:	5499      	strb	r1, [r3, r2]
          goto error;
 80054c0:	e01c      	b.n	80054fc <HAL_SPI_Receive+0x240>
    while (hspi->RxXferCount > 0U)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1c8      	bne.n	800545e <HAL_SPI_Receive+0x1a2>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	6839      	ldr	r1, [r7, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	0018      	movs	r0, r3
 80054d4:	f000 fa7a 	bl	80059cc <SPI_EndRxTransaction>
 80054d8:	1e03      	subs	r3, r0, #0
 80054da:	d002      	beq.n	80054e2 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2220      	movs	r2, #32
 80054e0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d004      	beq.n	80054f4 <HAL_SPI_Receive+0x238>
  {
    errorcode = HAL_ERROR;
 80054ea:	2317      	movs	r3, #23
 80054ec:	18fb      	adds	r3, r7, r3
 80054ee:	2201      	movs	r2, #1
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	e003      	b.n	80054fc <HAL_SPI_Receive+0x240>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2251      	movs	r2, #81	; 0x51
 80054f8:	2101      	movs	r1, #1
 80054fa:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2250      	movs	r2, #80	; 0x50
 8005500:	2100      	movs	r1, #0
 8005502:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005504:	2317      	movs	r3, #23
 8005506:	18fb      	adds	r3, r7, r3
 8005508:	781b      	ldrb	r3, [r3, #0]
}
 800550a:	0018      	movs	r0, r3
 800550c:	46bd      	mov	sp, r7
 800550e:	b007      	add	sp, #28
 8005510:	bd90      	pop	{r4, r7, pc}
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	ffffbfff 	.word	0xffffbfff

08005518 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b08c      	sub	sp, #48	; 0x30
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	001a      	movs	r2, r3
 8005526:	1cbb      	adds	r3, r7, #2
 8005528:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800552a:	2301      	movs	r3, #1
 800552c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800552e:	232b      	movs	r3, #43	; 0x2b
 8005530:	18fb      	adds	r3, r7, r3
 8005532:	2200      	movs	r2, #0
 8005534:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2250      	movs	r2, #80	; 0x50
 800553a:	5c9b      	ldrb	r3, [r3, r2]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <HAL_SPI_TransmitReceive+0x2c>
 8005540:	2302      	movs	r3, #2
 8005542:	e1b0      	b.n	80058a6 <HAL_SPI_TransmitReceive+0x38e>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2250      	movs	r2, #80	; 0x50
 8005548:	2101      	movs	r1, #1
 800554a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800554c:	f7fd fad4 	bl	8002af8 <HAL_GetTick>
 8005550:	0003      	movs	r3, r0
 8005552:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005554:	2023      	movs	r0, #35	; 0x23
 8005556:	183b      	adds	r3, r7, r0
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	2151      	movs	r1, #81	; 0x51
 800555c:	5c52      	ldrb	r2, [r2, r1]
 800555e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005566:	231a      	movs	r3, #26
 8005568:	18fb      	adds	r3, r7, r3
 800556a:	1cba      	adds	r2, r7, #2
 800556c:	8812      	ldrh	r2, [r2, #0]
 800556e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005570:	183b      	adds	r3, r7, r0
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d011      	beq.n	800559c <HAL_SPI_TransmitReceive+0x84>
 8005578:	69fa      	ldr	r2, [r7, #28]
 800557a:	2382      	movs	r3, #130	; 0x82
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	429a      	cmp	r2, r3
 8005580:	d107      	bne.n	8005592 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d103      	bne.n	8005592 <HAL_SPI_TransmitReceive+0x7a>
 800558a:	183b      	adds	r3, r7, r0
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b04      	cmp	r3, #4
 8005590:	d004      	beq.n	800559c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005592:	232b      	movs	r3, #43	; 0x2b
 8005594:	18fb      	adds	r3, r7, r3
 8005596:	2202      	movs	r2, #2
 8005598:	701a      	strb	r2, [r3, #0]
    goto error;
 800559a:	e17d      	b.n	8005898 <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d006      	beq.n	80055b0 <HAL_SPI_TransmitReceive+0x98>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <HAL_SPI_TransmitReceive+0x98>
 80055a8:	1cbb      	adds	r3, r7, #2
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d104      	bne.n	80055ba <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80055b0:	232b      	movs	r3, #43	; 0x2b
 80055b2:	18fb      	adds	r3, r7, r3
 80055b4:	2201      	movs	r2, #1
 80055b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80055b8:	e16e      	b.n	8005898 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2251      	movs	r2, #81	; 0x51
 80055be:	5c9b      	ldrb	r3, [r3, r2]
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d003      	beq.n	80055ce <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2251      	movs	r2, #81	; 0x51
 80055ca:	2105      	movs	r1, #5
 80055cc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	1cba      	adds	r2, r7, #2
 80055de:	8812      	ldrh	r2, [r2, #0]
 80055e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	1cba      	adds	r2, r7, #2
 80055e6:	8812      	ldrh	r2, [r2, #0]
 80055e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	1cba      	adds	r2, r7, #2
 80055f4:	8812      	ldrh	r2, [r2, #0]
 80055f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	1cba      	adds	r2, r7, #2
 80055fc:	8812      	ldrh	r2, [r2, #0]
 80055fe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2240      	movs	r2, #64	; 0x40
 8005614:	4013      	ands	r3, r2
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	d007      	beq.n	800562a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2140      	movs	r1, #64	; 0x40
 8005626:	430a      	orrs	r2, r1
 8005628:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	2380      	movs	r3, #128	; 0x80
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	429a      	cmp	r2, r3
 8005634:	d000      	beq.n	8005638 <HAL_SPI_TransmitReceive+0x120>
 8005636:	e07f      	b.n	8005738 <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <HAL_SPI_TransmitReceive+0x134>
 8005640:	231a      	movs	r3, #26
 8005642:	18fb      	adds	r3, r7, r3
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d000      	beq.n	800564c <HAL_SPI_TransmitReceive+0x134>
 800564a:	e06a      	b.n	8005722 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005650:	881a      	ldrh	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	1c9a      	adds	r2, r3, #2
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005666:	b29b      	uxth	r3, r3
 8005668:	3b01      	subs	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005670:	e057      	b.n	8005722 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2202      	movs	r2, #2
 800567a:	4013      	ands	r3, r2
 800567c:	2b02      	cmp	r3, #2
 800567e:	d11b      	bne.n	80056b8 <HAL_SPI_TransmitReceive+0x1a0>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d016      	beq.n	80056b8 <HAL_SPI_TransmitReceive+0x1a0>
 800568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568c:	2b01      	cmp	r3, #1
 800568e:	d113      	bne.n	80056b8 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	881a      	ldrh	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a0:	1c9a      	adds	r2, r3, #2
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	3b01      	subs	r3, #1
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	2201      	movs	r2, #1
 80056c0:	4013      	ands	r3, r2
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d119      	bne.n	80056fa <HAL_SPI_TransmitReceive+0x1e2>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d014      	beq.n	80056fa <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	b292      	uxth	r2, r2
 80056dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e2:	1c9a      	adds	r2, r3, #2
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	3b01      	subs	r3, #1
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056f6:	2301      	movs	r3, #1
 80056f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056fa:	f7fd f9fd 	bl	8002af8 <HAL_GetTick>
 80056fe:	0002      	movs	r2, r0
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005706:	429a      	cmp	r2, r3
 8005708:	d80b      	bhi.n	8005722 <HAL_SPI_TransmitReceive+0x20a>
 800570a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570c:	3301      	adds	r3, #1
 800570e:	d008      	beq.n	8005722 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8005710:	232b      	movs	r3, #43	; 0x2b
 8005712:	18fb      	adds	r3, r7, r3
 8005714:	2203      	movs	r2, #3
 8005716:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2251      	movs	r2, #81	; 0x51
 800571c:	2101      	movs	r1, #1
 800571e:	5499      	strb	r1, [r3, r2]
        goto error;
 8005720:	e0ba      	b.n	8005898 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005726:	b29b      	uxth	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1a2      	bne.n	8005672 <HAL_SPI_TransmitReceive+0x15a>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d19d      	bne.n	8005672 <HAL_SPI_TransmitReceive+0x15a>
 8005736:	e083      	b.n	8005840 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d005      	beq.n	800574c <HAL_SPI_TransmitReceive+0x234>
 8005740:	231a      	movs	r3, #26
 8005742:	18fb      	adds	r3, r7, r3
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d000      	beq.n	800574c <HAL_SPI_TransmitReceive+0x234>
 800574a:	e06f      	b.n	800582c <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	330c      	adds	r3, #12
 8005756:	7812      	ldrb	r2, [r2, #0]
 8005758:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005768:	b29b      	uxth	r3, r3
 800576a:	3b01      	subs	r3, #1
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005772:	e05b      	b.n	800582c <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2202      	movs	r2, #2
 800577c:	4013      	ands	r3, r2
 800577e:	2b02      	cmp	r3, #2
 8005780:	d11c      	bne.n	80057bc <HAL_SPI_TransmitReceive+0x2a4>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005786:	b29b      	uxth	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d017      	beq.n	80057bc <HAL_SPI_TransmitReceive+0x2a4>
 800578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578e:	2b01      	cmp	r3, #1
 8005790:	d114      	bne.n	80057bc <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	330c      	adds	r3, #12
 800579c:	7812      	ldrb	r2, [r2, #0]
 800579e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	3b01      	subs	r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	2201      	movs	r2, #1
 80057c4:	4013      	ands	r3, r2
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d119      	bne.n	80057fe <HAL_SPI_TransmitReceive+0x2e6>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d014      	beq.n	80057fe <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057fa:	2301      	movs	r3, #1
 80057fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057fe:	f7fd f97b 	bl	8002af8 <HAL_GetTick>
 8005802:	0002      	movs	r2, r0
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800580a:	429a      	cmp	r2, r3
 800580c:	d802      	bhi.n	8005814 <HAL_SPI_TransmitReceive+0x2fc>
 800580e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005810:	3301      	adds	r3, #1
 8005812:	d102      	bne.n	800581a <HAL_SPI_TransmitReceive+0x302>
 8005814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005816:	2b00      	cmp	r3, #0
 8005818:	d108      	bne.n	800582c <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 800581a:	232b      	movs	r3, #43	; 0x2b
 800581c:	18fb      	adds	r3, r7, r3
 800581e:	2203      	movs	r2, #3
 8005820:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2251      	movs	r2, #81	; 0x51
 8005826:	2101      	movs	r1, #1
 8005828:	5499      	strb	r1, [r3, r2]
        goto error;
 800582a:	e035      	b.n	8005898 <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d19e      	bne.n	8005774 <HAL_SPI_TransmitReceive+0x25c>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d199      	bne.n	8005774 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005842:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	0018      	movs	r0, r3
 8005848:	f000 f92a 	bl	8005aa0 <SPI_EndRxTxTransaction>
 800584c:	1e03      	subs	r3, r0, #0
 800584e:	d007      	beq.n	8005860 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8005850:	232b      	movs	r3, #43	; 0x2b
 8005852:	18fb      	adds	r3, r7, r3
 8005854:	2201      	movs	r2, #1
 8005856:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800585e:	e01b      	b.n	8005898 <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005882:	2b00      	cmp	r3, #0
 8005884:	d004      	beq.n	8005890 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 8005886:	232b      	movs	r3, #43	; 0x2b
 8005888:	18fb      	adds	r3, r7, r3
 800588a:	2201      	movs	r2, #1
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	e003      	b.n	8005898 <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2251      	movs	r2, #81	; 0x51
 8005894:	2101      	movs	r1, #1
 8005896:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2250      	movs	r2, #80	; 0x50
 800589c:	2100      	movs	r1, #0
 800589e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80058a0:	232b      	movs	r3, #43	; 0x2b
 80058a2:	18fb      	adds	r3, r7, r3
 80058a4:	781b      	ldrb	r3, [r3, #0]
}
 80058a6:	0018      	movs	r0, r3
 80058a8:	46bd      	mov	sp, r7
 80058aa:	b00c      	add	sp, #48	; 0x30
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	1dfb      	adds	r3, r7, #7
 80058be:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058c0:	f7fd f91a 	bl	8002af8 <HAL_GetTick>
 80058c4:	0002      	movs	r2, r0
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	1a9b      	subs	r3, r3, r2
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	18d3      	adds	r3, r2, r3
 80058ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058d0:	f7fd f912 	bl	8002af8 <HAL_GetTick>
 80058d4:	0003      	movs	r3, r0
 80058d6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058d8:	4b3a      	ldr	r3, [pc, #232]	; (80059c4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	015b      	lsls	r3, r3, #5
 80058de:	0d1b      	lsrs	r3, r3, #20
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	4353      	muls	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058e6:	e058      	b.n	800599a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	d055      	beq.n	800599a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058ee:	f7fd f903 	bl	8002af8 <HAL_GetTick>
 80058f2:	0002      	movs	r2, r0
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d902      	bls.n	8005904 <SPI_WaitFlagStateUntilTimeout+0x54>
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d142      	bne.n	800598a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	21e0      	movs	r1, #224	; 0xe0
 8005910:	438a      	bics	r2, r1
 8005912:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	2382      	movs	r3, #130	; 0x82
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	429a      	cmp	r2, r3
 800591e:	d113      	bne.n	8005948 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	2380      	movs	r3, #128	; 0x80
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	429a      	cmp	r2, r3
 800592a:	d005      	beq.n	8005938 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	429a      	cmp	r2, r3
 8005936:	d107      	bne.n	8005948 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2140      	movs	r1, #64	; 0x40
 8005944:	438a      	bics	r2, r1
 8005946:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800594c:	2380      	movs	r3, #128	; 0x80
 800594e:	019b      	lsls	r3, r3, #6
 8005950:	429a      	cmp	r2, r3
 8005952:	d110      	bne.n	8005976 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	491a      	ldr	r1, [pc, #104]	; (80059c8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005960:	400a      	ands	r2, r1
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2180      	movs	r1, #128	; 0x80
 8005970:	0189      	lsls	r1, r1, #6
 8005972:	430a      	orrs	r2, r1
 8005974:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2251      	movs	r2, #81	; 0x51
 800597a:	2101      	movs	r1, #1
 800597c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2250      	movs	r2, #80	; 0x50
 8005982:	2100      	movs	r1, #0
 8005984:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e017      	b.n	80059ba <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	3b01      	subs	r3, #1
 8005998:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	4013      	ands	r3, r2
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	425a      	negs	r2, r3
 80059aa:	4153      	adcs	r3, r2
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	001a      	movs	r2, r3
 80059b0:	1dfb      	adds	r3, r7, #7
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d197      	bne.n	80058e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	0018      	movs	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	b008      	add	sp, #32
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	20000000 	.word	0x20000000
 80059c8:	ffffdfff 	.word	0xffffdfff

080059cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	2382      	movs	r3, #130	; 0x82
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d113      	bne.n	8005a0c <SPI_EndRxTransaction+0x40>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	2380      	movs	r3, #128	; 0x80
 80059ea:	021b      	lsls	r3, r3, #8
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d005      	beq.n	80059fc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	2380      	movs	r3, #128	; 0x80
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d107      	bne.n	8005a0c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2140      	movs	r1, #64	; 0x40
 8005a08:	438a      	bics	r2, r1
 8005a0a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	2382      	movs	r3, #130	; 0x82
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d12b      	bne.n	8005a70 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	2380      	movs	r3, #128	; 0x80
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d012      	beq.n	8005a4a <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	0013      	movs	r3, r2
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2180      	movs	r1, #128	; 0x80
 8005a32:	f7ff ff3d 	bl	80058b0 <SPI_WaitFlagStateUntilTimeout>
 8005a36:	1e03      	subs	r3, r0, #0
 8005a38:	d02d      	beq.n	8005a96 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3e:	2220      	movs	r2, #32
 8005a40:	431a      	orrs	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e026      	b.n	8005a98 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	0013      	movs	r3, r2
 8005a54:	2200      	movs	r2, #0
 8005a56:	2101      	movs	r1, #1
 8005a58:	f7ff ff2a 	bl	80058b0 <SPI_WaitFlagStateUntilTimeout>
 8005a5c:	1e03      	subs	r3, r0, #0
 8005a5e:	d01a      	beq.n	8005a96 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a64:	2220      	movs	r2, #32
 8005a66:	431a      	orrs	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e013      	b.n	8005a98 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	0013      	movs	r3, r2
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	f7ff ff17 	bl	80058b0 <SPI_WaitFlagStateUntilTimeout>
 8005a82:	1e03      	subs	r3, r0, #0
 8005a84:	d007      	beq.n	8005a96 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e000      	b.n	8005a98 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	0018      	movs	r0, r3
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	b004      	add	sp, #16
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005aac:	4b1d      	ldr	r3, [pc, #116]	; (8005b24 <SPI_EndRxTxTransaction+0x84>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	491d      	ldr	r1, [pc, #116]	; (8005b28 <SPI_EndRxTxTransaction+0x88>)
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f7fa fb3a 	bl	800012c <__udivsi3>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	001a      	movs	r2, r3
 8005abc:	0013      	movs	r3, r2
 8005abe:	015b      	lsls	r3, r3, #5
 8005ac0:	1a9b      	subs	r3, r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	189b      	adds	r3, r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	2382      	movs	r3, #130	; 0x82
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d112      	bne.n	8005afc <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	0013      	movs	r3, r2
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2180      	movs	r1, #128	; 0x80
 8005ae4:	f7ff fee4 	bl	80058b0 <SPI_WaitFlagStateUntilTimeout>
 8005ae8:	1e03      	subs	r3, r0, #0
 8005aea:	d016      	beq.n	8005b1a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af0:	2220      	movs	r2, #32
 8005af2:	431a      	orrs	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e00f      	b.n	8005b1c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	2280      	movs	r2, #128	; 0x80
 8005b10:	4013      	ands	r3, r2
 8005b12:	2b80      	cmp	r3, #128	; 0x80
 8005b14:	d0f2      	beq.n	8005afc <SPI_EndRxTxTransaction+0x5c>
 8005b16:	e000      	b.n	8005b1a <SPI_EndRxTxTransaction+0x7a>
        break;
 8005b18:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	b006      	add	sp, #24
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20000000 	.word	0x20000000
 8005b28:	016e3600 	.word	0x016e3600

08005b2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e044      	b.n	8005bc8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d107      	bne.n	8005b56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2278      	movs	r2, #120	; 0x78
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	0018      	movs	r0, r3
 8005b52:	f7fc fe27 	bl	80027a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2224      	movs	r2, #36	; 0x24
 8005b5a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2101      	movs	r1, #1
 8005b68:	438a      	bics	r2, r1
 8005b6a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	0018      	movs	r0, r3
 8005b70:	f000 f8d0 	bl	8005d14 <UART_SetConfig>
 8005b74:	0003      	movs	r3, r0
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d101      	bne.n	8005b7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e024      	b.n	8005bc8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	0018      	movs	r0, r3
 8005b8a:	f000 fb7f 	bl	800628c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	490d      	ldr	r1, [pc, #52]	; (8005bd0 <HAL_UART_Init+0xa4>)
 8005b9a:	400a      	ands	r2, r1
 8005b9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	212a      	movs	r1, #42	; 0x2a
 8005baa:	438a      	bics	r2, r1
 8005bac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2101      	movs	r1, #1
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f000 fc17 	bl	80063f4 <UART_CheckIdleState>
 8005bc6:	0003      	movs	r3, r0
}
 8005bc8:	0018      	movs	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	b002      	add	sp, #8
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	ffffb7ff 	.word	0xffffb7ff

08005bd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08a      	sub	sp, #40	; 0x28
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	1dbb      	adds	r3, r7, #6
 8005be2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d000      	beq.n	8005bee <HAL_UART_Transmit+0x1a>
 8005bec:	e08c      	b.n	8005d08 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_UART_Transmit+0x28>
 8005bf4:	1dbb      	adds	r3, r7, #6
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e084      	b.n	8005d0a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	2380      	movs	r3, #128	; 0x80
 8005c06:	015b      	lsls	r3, r3, #5
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d109      	bne.n	8005c20 <HAL_UART_Transmit+0x4c>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d105      	bne.n	8005c20 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2201      	movs	r2, #1
 8005c18:	4013      	ands	r3, r2
 8005c1a:	d001      	beq.n	8005c20 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e074      	b.n	8005d0a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2284      	movs	r2, #132	; 0x84
 8005c24:	2100      	movs	r1, #0
 8005c26:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2221      	movs	r2, #33	; 0x21
 8005c2c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c2e:	f7fc ff63 	bl	8002af8 <HAL_GetTick>
 8005c32:	0003      	movs	r3, r0
 8005c34:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	1dba      	adds	r2, r7, #6
 8005c3a:	2150      	movs	r1, #80	; 0x50
 8005c3c:	8812      	ldrh	r2, [r2, #0]
 8005c3e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	1dba      	adds	r2, r7, #6
 8005c44:	2152      	movs	r1, #82	; 0x52
 8005c46:	8812      	ldrh	r2, [r2, #0]
 8005c48:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	2380      	movs	r3, #128	; 0x80
 8005c50:	015b      	lsls	r3, r3, #5
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d108      	bne.n	8005c68 <HAL_UART_Transmit+0x94>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d104      	bne.n	8005c68 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	61bb      	str	r3, [r7, #24]
 8005c66:	e003      	b.n	8005c70 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c70:	e02f      	b.n	8005cd2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	0013      	movs	r3, r2
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2180      	movs	r1, #128	; 0x80
 8005c80:	f000 fc60 	bl	8006544 <UART_WaitOnFlagUntilTimeout>
 8005c84:	1e03      	subs	r3, r0, #0
 8005c86:	d004      	beq.n	8005c92 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e03b      	b.n	8005d0a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10b      	bne.n	8005cb0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	001a      	movs	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	05d2      	lsls	r2, r2, #23
 8005ca4:	0dd2      	lsrs	r2, r2, #23
 8005ca6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	3302      	adds	r3, #2
 8005cac:	61bb      	str	r3, [r7, #24]
 8005cae:	e007      	b.n	8005cc0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	781a      	ldrb	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2252      	movs	r2, #82	; 0x52
 8005cc4:	5a9b      	ldrh	r3, [r3, r2]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b299      	uxth	r1, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2252      	movs	r2, #82	; 0x52
 8005cd0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2252      	movs	r2, #82	; 0x52
 8005cd6:	5a9b      	ldrh	r3, [r3, r2]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1c9      	bne.n	8005c72 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	0013      	movs	r3, r2
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2140      	movs	r1, #64	; 0x40
 8005cec:	f000 fc2a 	bl	8006544 <UART_WaitOnFlagUntilTimeout>
 8005cf0:	1e03      	subs	r3, r0, #0
 8005cf2:	d004      	beq.n	8005cfe <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e005      	b.n	8005d0a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2220      	movs	r2, #32
 8005d02:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e000      	b.n	8005d0a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005d08:	2302      	movs	r3, #2
  }
}
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	b008      	add	sp, #32
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d14:	b5b0      	push	{r4, r5, r7, lr}
 8005d16:	b08e      	sub	sp, #56	; 0x38
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d1c:	231a      	movs	r3, #26
 8005d1e:	2218      	movs	r2, #24
 8005d20:	4694      	mov	ip, r2
 8005d22:	44bc      	add	ip, r7
 8005d24:	4463      	add	r3, ip
 8005d26:	2200      	movs	r2, #0
 8005d28:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	689a      	ldr	r2, [r3, #8]
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	431a      	orrs	r2, r3
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4ab0      	ldr	r2, [pc, #704]	; (800600c <UART_SetConfig+0x2f8>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	0019      	movs	r1, r3
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d54:	430a      	orrs	r2, r1
 8005d56:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	4aac      	ldr	r2, [pc, #688]	; (8006010 <UART_SetConfig+0x2fc>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	0019      	movs	r1, r3
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4aa6      	ldr	r2, [pc, #664]	; (8006014 <UART_SetConfig+0x300>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d86:	4313      	orrs	r3, r2
 8005d88:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	4aa1      	ldr	r2, [pc, #644]	; (8006018 <UART_SetConfig+0x304>)
 8005d92:	4013      	ands	r3, r2
 8005d94:	0019      	movs	r1, r3
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a9d      	ldr	r2, [pc, #628]	; (800601c <UART_SetConfig+0x308>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d136      	bne.n	8005e18 <UART_SetConfig+0x104>
 8005daa:	4b9d      	ldr	r3, [pc, #628]	; (8006020 <UART_SetConfig+0x30c>)
 8005dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dae:	2203      	movs	r2, #3
 8005db0:	4013      	ands	r3, r2
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d020      	beq.n	8005df8 <UART_SetConfig+0xe4>
 8005db6:	d827      	bhi.n	8005e08 <UART_SetConfig+0xf4>
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d00d      	beq.n	8005dd8 <UART_SetConfig+0xc4>
 8005dbc:	d824      	bhi.n	8005e08 <UART_SetConfig+0xf4>
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <UART_SetConfig+0xb4>
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d010      	beq.n	8005de8 <UART_SetConfig+0xd4>
 8005dc6:	e01f      	b.n	8005e08 <UART_SetConfig+0xf4>
 8005dc8:	231b      	movs	r3, #27
 8005dca:	2218      	movs	r2, #24
 8005dcc:	4694      	mov	ip, r2
 8005dce:	44bc      	add	ip, r7
 8005dd0:	4463      	add	r3, ip
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	701a      	strb	r2, [r3, #0]
 8005dd6:	e0c5      	b.n	8005f64 <UART_SetConfig+0x250>
 8005dd8:	231b      	movs	r3, #27
 8005dda:	2218      	movs	r2, #24
 8005ddc:	4694      	mov	ip, r2
 8005dde:	44bc      	add	ip, r7
 8005de0:	4463      	add	r3, ip
 8005de2:	2202      	movs	r2, #2
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	e0bd      	b.n	8005f64 <UART_SetConfig+0x250>
 8005de8:	231b      	movs	r3, #27
 8005dea:	2218      	movs	r2, #24
 8005dec:	4694      	mov	ip, r2
 8005dee:	44bc      	add	ip, r7
 8005df0:	4463      	add	r3, ip
 8005df2:	2204      	movs	r2, #4
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	e0b5      	b.n	8005f64 <UART_SetConfig+0x250>
 8005df8:	231b      	movs	r3, #27
 8005dfa:	2218      	movs	r2, #24
 8005dfc:	4694      	mov	ip, r2
 8005dfe:	44bc      	add	ip, r7
 8005e00:	4463      	add	r3, ip
 8005e02:	2208      	movs	r2, #8
 8005e04:	701a      	strb	r2, [r3, #0]
 8005e06:	e0ad      	b.n	8005f64 <UART_SetConfig+0x250>
 8005e08:	231b      	movs	r3, #27
 8005e0a:	2218      	movs	r2, #24
 8005e0c:	4694      	mov	ip, r2
 8005e0e:	44bc      	add	ip, r7
 8005e10:	4463      	add	r3, ip
 8005e12:	2210      	movs	r2, #16
 8005e14:	701a      	strb	r2, [r3, #0]
 8005e16:	e0a5      	b.n	8005f64 <UART_SetConfig+0x250>
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a81      	ldr	r2, [pc, #516]	; (8006024 <UART_SetConfig+0x310>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d136      	bne.n	8005e90 <UART_SetConfig+0x17c>
 8005e22:	4b7f      	ldr	r3, [pc, #508]	; (8006020 <UART_SetConfig+0x30c>)
 8005e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e26:	220c      	movs	r2, #12
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b0c      	cmp	r3, #12
 8005e2c:	d020      	beq.n	8005e70 <UART_SetConfig+0x15c>
 8005e2e:	d827      	bhi.n	8005e80 <UART_SetConfig+0x16c>
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d00d      	beq.n	8005e50 <UART_SetConfig+0x13c>
 8005e34:	d824      	bhi.n	8005e80 <UART_SetConfig+0x16c>
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <UART_SetConfig+0x12c>
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d010      	beq.n	8005e60 <UART_SetConfig+0x14c>
 8005e3e:	e01f      	b.n	8005e80 <UART_SetConfig+0x16c>
 8005e40:	231b      	movs	r3, #27
 8005e42:	2218      	movs	r2, #24
 8005e44:	4694      	mov	ip, r2
 8005e46:	44bc      	add	ip, r7
 8005e48:	4463      	add	r3, ip
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	e089      	b.n	8005f64 <UART_SetConfig+0x250>
 8005e50:	231b      	movs	r3, #27
 8005e52:	2218      	movs	r2, #24
 8005e54:	4694      	mov	ip, r2
 8005e56:	44bc      	add	ip, r7
 8005e58:	4463      	add	r3, ip
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	e081      	b.n	8005f64 <UART_SetConfig+0x250>
 8005e60:	231b      	movs	r3, #27
 8005e62:	2218      	movs	r2, #24
 8005e64:	4694      	mov	ip, r2
 8005e66:	44bc      	add	ip, r7
 8005e68:	4463      	add	r3, ip
 8005e6a:	2204      	movs	r2, #4
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	e079      	b.n	8005f64 <UART_SetConfig+0x250>
 8005e70:	231b      	movs	r3, #27
 8005e72:	2218      	movs	r2, #24
 8005e74:	4694      	mov	ip, r2
 8005e76:	44bc      	add	ip, r7
 8005e78:	4463      	add	r3, ip
 8005e7a:	2208      	movs	r2, #8
 8005e7c:	701a      	strb	r2, [r3, #0]
 8005e7e:	e071      	b.n	8005f64 <UART_SetConfig+0x250>
 8005e80:	231b      	movs	r3, #27
 8005e82:	2218      	movs	r2, #24
 8005e84:	4694      	mov	ip, r2
 8005e86:	44bc      	add	ip, r7
 8005e88:	4463      	add	r3, ip
 8005e8a:	2210      	movs	r2, #16
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	e069      	b.n	8005f64 <UART_SetConfig+0x250>
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a64      	ldr	r2, [pc, #400]	; (8006028 <UART_SetConfig+0x314>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d107      	bne.n	8005eaa <UART_SetConfig+0x196>
 8005e9a:	231b      	movs	r3, #27
 8005e9c:	2218      	movs	r2, #24
 8005e9e:	4694      	mov	ip, r2
 8005ea0:	44bc      	add	ip, r7
 8005ea2:	4463      	add	r3, ip
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	701a      	strb	r2, [r3, #0]
 8005ea8:	e05c      	b.n	8005f64 <UART_SetConfig+0x250>
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a5f      	ldr	r2, [pc, #380]	; (800602c <UART_SetConfig+0x318>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d107      	bne.n	8005ec4 <UART_SetConfig+0x1b0>
 8005eb4:	231b      	movs	r3, #27
 8005eb6:	2218      	movs	r2, #24
 8005eb8:	4694      	mov	ip, r2
 8005eba:	44bc      	add	ip, r7
 8005ebc:	4463      	add	r3, ip
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	e04f      	b.n	8005f64 <UART_SetConfig+0x250>
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a52      	ldr	r2, [pc, #328]	; (8006014 <UART_SetConfig+0x300>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d143      	bne.n	8005f56 <UART_SetConfig+0x242>
 8005ece:	4b54      	ldr	r3, [pc, #336]	; (8006020 <UART_SetConfig+0x30c>)
 8005ed0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ed2:	23c0      	movs	r3, #192	; 0xc0
 8005ed4:	011b      	lsls	r3, r3, #4
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	22c0      	movs	r2, #192	; 0xc0
 8005eda:	0112      	lsls	r2, r2, #4
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d02a      	beq.n	8005f36 <UART_SetConfig+0x222>
 8005ee0:	22c0      	movs	r2, #192	; 0xc0
 8005ee2:	0112      	lsls	r2, r2, #4
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d82e      	bhi.n	8005f46 <UART_SetConfig+0x232>
 8005ee8:	2280      	movs	r2, #128	; 0x80
 8005eea:	0112      	lsls	r2, r2, #4
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d012      	beq.n	8005f16 <UART_SetConfig+0x202>
 8005ef0:	2280      	movs	r2, #128	; 0x80
 8005ef2:	0112      	lsls	r2, r2, #4
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d826      	bhi.n	8005f46 <UART_SetConfig+0x232>
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d004      	beq.n	8005f06 <UART_SetConfig+0x1f2>
 8005efc:	2280      	movs	r2, #128	; 0x80
 8005efe:	00d2      	lsls	r2, r2, #3
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d010      	beq.n	8005f26 <UART_SetConfig+0x212>
 8005f04:	e01f      	b.n	8005f46 <UART_SetConfig+0x232>
 8005f06:	231b      	movs	r3, #27
 8005f08:	2218      	movs	r2, #24
 8005f0a:	4694      	mov	ip, r2
 8005f0c:	44bc      	add	ip, r7
 8005f0e:	4463      	add	r3, ip
 8005f10:	2200      	movs	r2, #0
 8005f12:	701a      	strb	r2, [r3, #0]
 8005f14:	e026      	b.n	8005f64 <UART_SetConfig+0x250>
 8005f16:	231b      	movs	r3, #27
 8005f18:	2218      	movs	r2, #24
 8005f1a:	4694      	mov	ip, r2
 8005f1c:	44bc      	add	ip, r7
 8005f1e:	4463      	add	r3, ip
 8005f20:	2202      	movs	r2, #2
 8005f22:	701a      	strb	r2, [r3, #0]
 8005f24:	e01e      	b.n	8005f64 <UART_SetConfig+0x250>
 8005f26:	231b      	movs	r3, #27
 8005f28:	2218      	movs	r2, #24
 8005f2a:	4694      	mov	ip, r2
 8005f2c:	44bc      	add	ip, r7
 8005f2e:	4463      	add	r3, ip
 8005f30:	2204      	movs	r2, #4
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	e016      	b.n	8005f64 <UART_SetConfig+0x250>
 8005f36:	231b      	movs	r3, #27
 8005f38:	2218      	movs	r2, #24
 8005f3a:	4694      	mov	ip, r2
 8005f3c:	44bc      	add	ip, r7
 8005f3e:	4463      	add	r3, ip
 8005f40:	2208      	movs	r2, #8
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	e00e      	b.n	8005f64 <UART_SetConfig+0x250>
 8005f46:	231b      	movs	r3, #27
 8005f48:	2218      	movs	r2, #24
 8005f4a:	4694      	mov	ip, r2
 8005f4c:	44bc      	add	ip, r7
 8005f4e:	4463      	add	r3, ip
 8005f50:	2210      	movs	r2, #16
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	e006      	b.n	8005f64 <UART_SetConfig+0x250>
 8005f56:	231b      	movs	r3, #27
 8005f58:	2218      	movs	r2, #24
 8005f5a:	4694      	mov	ip, r2
 8005f5c:	44bc      	add	ip, r7
 8005f5e:	4463      	add	r3, ip
 8005f60:	2210      	movs	r2, #16
 8005f62:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a2a      	ldr	r2, [pc, #168]	; (8006014 <UART_SetConfig+0x300>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d000      	beq.n	8005f70 <UART_SetConfig+0x25c>
 8005f6e:	e09e      	b.n	80060ae <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f70:	231b      	movs	r3, #27
 8005f72:	2218      	movs	r2, #24
 8005f74:	4694      	mov	ip, r2
 8005f76:	44bc      	add	ip, r7
 8005f78:	4463      	add	r3, ip
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d01d      	beq.n	8005fbc <UART_SetConfig+0x2a8>
 8005f80:	dc20      	bgt.n	8005fc4 <UART_SetConfig+0x2b0>
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d015      	beq.n	8005fb2 <UART_SetConfig+0x29e>
 8005f86:	dc1d      	bgt.n	8005fc4 <UART_SetConfig+0x2b0>
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <UART_SetConfig+0x27e>
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d005      	beq.n	8005f9c <UART_SetConfig+0x288>
 8005f90:	e018      	b.n	8005fc4 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f92:	f7fe f893 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 8005f96:	0003      	movs	r3, r0
 8005f98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005f9a:	e01d      	b.n	8005fd8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f9c:	4b20      	ldr	r3, [pc, #128]	; (8006020 <UART_SetConfig+0x30c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2210      	movs	r2, #16
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	d002      	beq.n	8005fac <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005fa6:	4b22      	ldr	r3, [pc, #136]	; (8006030 <UART_SetConfig+0x31c>)
 8005fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005faa:	e015      	b.n	8005fd8 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8005fac:	4b21      	ldr	r3, [pc, #132]	; (8006034 <UART_SetConfig+0x320>)
 8005fae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fb0:	e012      	b.n	8005fd8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fb2:	f7fd ffd3 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 8005fb6:	0003      	movs	r3, r0
 8005fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fba:	e00d      	b.n	8005fd8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fbc:	2380      	movs	r3, #128	; 0x80
 8005fbe:	021b      	lsls	r3, r3, #8
 8005fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005fc2:	e009      	b.n	8005fd8 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005fc8:	231a      	movs	r3, #26
 8005fca:	2218      	movs	r2, #24
 8005fcc:	4694      	mov	ip, r2
 8005fce:	44bc      	add	ip, r7
 8005fd0:	4463      	add	r3, ip
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	701a      	strb	r2, [r3, #0]
        break;
 8005fd6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d100      	bne.n	8005fe0 <UART_SetConfig+0x2cc>
 8005fde:	e13b      	b.n	8006258 <UART_SetConfig+0x544>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	0013      	movs	r3, r2
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	189b      	adds	r3, r3, r2
 8005fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d305      	bcc.n	8005ffc <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d91d      	bls.n	8006038 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8005ffc:	231a      	movs	r3, #26
 8005ffe:	2218      	movs	r2, #24
 8006000:	4694      	mov	ip, r2
 8006002:	44bc      	add	ip, r7
 8006004:	4463      	add	r3, ip
 8006006:	2201      	movs	r2, #1
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	e125      	b.n	8006258 <UART_SetConfig+0x544>
 800600c:	efff69f3 	.word	0xefff69f3
 8006010:	ffffcfff 	.word	0xffffcfff
 8006014:	40004800 	.word	0x40004800
 8006018:	fffff4ff 	.word	0xfffff4ff
 800601c:	40013800 	.word	0x40013800
 8006020:	40021000 	.word	0x40021000
 8006024:	40004400 	.word	0x40004400
 8006028:	40004c00 	.word	0x40004c00
 800602c:	40005000 	.word	0x40005000
 8006030:	003d0900 	.word	0x003d0900
 8006034:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603a:	613b      	str	r3, [r7, #16]
 800603c:	2300      	movs	r3, #0
 800603e:	617b      	str	r3, [r7, #20]
 8006040:	6939      	ldr	r1, [r7, #16]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	000b      	movs	r3, r1
 8006046:	0e1b      	lsrs	r3, r3, #24
 8006048:	0010      	movs	r0, r2
 800604a:	0205      	lsls	r5, r0, #8
 800604c:	431d      	orrs	r5, r3
 800604e:	000b      	movs	r3, r1
 8006050:	021c      	lsls	r4, r3, #8
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	085b      	lsrs	r3, r3, #1
 8006058:	60bb      	str	r3, [r7, #8]
 800605a:	2300      	movs	r3, #0
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	68b8      	ldr	r0, [r7, #8]
 8006060:	68f9      	ldr	r1, [r7, #12]
 8006062:	1900      	adds	r0, r0, r4
 8006064:	4169      	adcs	r1, r5
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	603b      	str	r3, [r7, #0]
 800606c:	2300      	movs	r3, #0
 800606e:	607b      	str	r3, [r7, #4]
 8006070:	683a      	ldr	r2, [r7, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f7fa f920 	bl	80002b8 <__aeabi_uldivmod>
 8006078:	0002      	movs	r2, r0
 800607a:	000b      	movs	r3, r1
 800607c:	0013      	movs	r3, r2
 800607e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006082:	23c0      	movs	r3, #192	; 0xc0
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	429a      	cmp	r2, r3
 8006088:	d309      	bcc.n	800609e <UART_SetConfig+0x38a>
 800608a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800608c:	2380      	movs	r3, #128	; 0x80
 800608e:	035b      	lsls	r3, r3, #13
 8006090:	429a      	cmp	r2, r3
 8006092:	d204      	bcs.n	800609e <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800609a:	60da      	str	r2, [r3, #12]
 800609c:	e0dc      	b.n	8006258 <UART_SetConfig+0x544>
        }
        else
        {
          ret = HAL_ERROR;
 800609e:	231a      	movs	r3, #26
 80060a0:	2218      	movs	r2, #24
 80060a2:	4694      	mov	ip, r2
 80060a4:	44bc      	add	ip, r7
 80060a6:	4463      	add	r3, ip
 80060a8:	2201      	movs	r2, #1
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	e0d4      	b.n	8006258 <UART_SetConfig+0x544>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	69da      	ldr	r2, [r3, #28]
 80060b2:	2380      	movs	r3, #128	; 0x80
 80060b4:	021b      	lsls	r3, r3, #8
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d000      	beq.n	80060bc <UART_SetConfig+0x3a8>
 80060ba:	e073      	b.n	80061a4 <UART_SetConfig+0x490>
  {
    switch (clocksource)
 80060bc:	231b      	movs	r3, #27
 80060be:	2218      	movs	r2, #24
 80060c0:	4694      	mov	ip, r2
 80060c2:	44bc      	add	ip, r7
 80060c4:	4463      	add	r3, ip
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d822      	bhi.n	8006112 <UART_SetConfig+0x3fe>
 80060cc:	009a      	lsls	r2, r3, #2
 80060ce:	4b6a      	ldr	r3, [pc, #424]	; (8006278 <UART_SetConfig+0x564>)
 80060d0:	18d3      	adds	r3, r2, r3
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060d6:	f7fd fff1 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 80060da:	0003      	movs	r3, r0
 80060dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060de:	e022      	b.n	8006126 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060e0:	f7fe f802 	bl	80040e8 <HAL_RCC_GetPCLK2Freq>
 80060e4:	0003      	movs	r3, r0
 80060e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060e8:	e01d      	b.n	8006126 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060ea:	4b64      	ldr	r3, [pc, #400]	; (800627c <UART_SetConfig+0x568>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2210      	movs	r2, #16
 80060f0:	4013      	ands	r3, r2
 80060f2:	d002      	beq.n	80060fa <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80060f4:	4b62      	ldr	r3, [pc, #392]	; (8006280 <UART_SetConfig+0x56c>)
 80060f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060f8:	e015      	b.n	8006126 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 80060fa:	4b62      	ldr	r3, [pc, #392]	; (8006284 <UART_SetConfig+0x570>)
 80060fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060fe:	e012      	b.n	8006126 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006100:	f7fd ff2c 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 8006104:	0003      	movs	r3, r0
 8006106:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006108:	e00d      	b.n	8006126 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800610a:	2380      	movs	r3, #128	; 0x80
 800610c:	021b      	lsls	r3, r3, #8
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006110:	e009      	b.n	8006126 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006116:	231a      	movs	r3, #26
 8006118:	2218      	movs	r2, #24
 800611a:	4694      	mov	ip, r2
 800611c:	44bc      	add	ip, r7
 800611e:	4463      	add	r3, ip
 8006120:	2201      	movs	r2, #1
 8006122:	701a      	strb	r2, [r3, #0]
        break;
 8006124:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	2b00      	cmp	r3, #0
 800612a:	d100      	bne.n	800612e <UART_SetConfig+0x41a>
 800612c:	e094      	b.n	8006258 <UART_SetConfig+0x544>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006130:	005a      	lsls	r2, r3, #1
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	085b      	lsrs	r3, r3, #1
 8006138:	18d2      	adds	r2, r2, r3
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	0019      	movs	r1, r3
 8006140:	0010      	movs	r0, r2
 8006142:	f7f9 fff3 	bl	800012c <__udivsi3>
 8006146:	0003      	movs	r3, r0
 8006148:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800614a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614c:	2b0f      	cmp	r3, #15
 800614e:	d921      	bls.n	8006194 <UART_SetConfig+0x480>
 8006150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006152:	2380      	movs	r3, #128	; 0x80
 8006154:	025b      	lsls	r3, r3, #9
 8006156:	429a      	cmp	r2, r3
 8006158:	d21c      	bcs.n	8006194 <UART_SetConfig+0x480>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615c:	b29a      	uxth	r2, r3
 800615e:	200e      	movs	r0, #14
 8006160:	2418      	movs	r4, #24
 8006162:	193b      	adds	r3, r7, r4
 8006164:	181b      	adds	r3, r3, r0
 8006166:	210f      	movs	r1, #15
 8006168:	438a      	bics	r2, r1
 800616a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800616c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616e:	085b      	lsrs	r3, r3, #1
 8006170:	b29b      	uxth	r3, r3
 8006172:	2207      	movs	r2, #7
 8006174:	4013      	ands	r3, r2
 8006176:	b299      	uxth	r1, r3
 8006178:	193b      	adds	r3, r7, r4
 800617a:	181b      	adds	r3, r3, r0
 800617c:	193a      	adds	r2, r7, r4
 800617e:	1812      	adds	r2, r2, r0
 8006180:	8812      	ldrh	r2, [r2, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	193a      	adds	r2, r7, r4
 800618c:	1812      	adds	r2, r2, r0
 800618e:	8812      	ldrh	r2, [r2, #0]
 8006190:	60da      	str	r2, [r3, #12]
 8006192:	e061      	b.n	8006258 <UART_SetConfig+0x544>
      }
      else
      {
        ret = HAL_ERROR;
 8006194:	231a      	movs	r3, #26
 8006196:	2218      	movs	r2, #24
 8006198:	4694      	mov	ip, r2
 800619a:	44bc      	add	ip, r7
 800619c:	4463      	add	r3, ip
 800619e:	2201      	movs	r2, #1
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	e059      	b.n	8006258 <UART_SetConfig+0x544>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061a4:	231b      	movs	r3, #27
 80061a6:	2218      	movs	r2, #24
 80061a8:	4694      	mov	ip, r2
 80061aa:	44bc      	add	ip, r7
 80061ac:	4463      	add	r3, ip
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d822      	bhi.n	80061fa <UART_SetConfig+0x4e6>
 80061b4:	009a      	lsls	r2, r3, #2
 80061b6:	4b34      	ldr	r3, [pc, #208]	; (8006288 <UART_SetConfig+0x574>)
 80061b8:	18d3      	adds	r3, r2, r3
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061be:	f7fd ff7d 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 80061c2:	0003      	movs	r3, r0
 80061c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061c6:	e022      	b.n	800620e <UART_SetConfig+0x4fa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061c8:	f7fd ff8e 	bl	80040e8 <HAL_RCC_GetPCLK2Freq>
 80061cc:	0003      	movs	r3, r0
 80061ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061d0:	e01d      	b.n	800620e <UART_SetConfig+0x4fa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061d2:	4b2a      	ldr	r3, [pc, #168]	; (800627c <UART_SetConfig+0x568>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2210      	movs	r2, #16
 80061d8:	4013      	ands	r3, r2
 80061da:	d002      	beq.n	80061e2 <UART_SetConfig+0x4ce>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80061dc:	4b28      	ldr	r3, [pc, #160]	; (8006280 <UART_SetConfig+0x56c>)
 80061de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061e0:	e015      	b.n	800620e <UART_SetConfig+0x4fa>
          pclk = (uint32_t) HSI_VALUE;
 80061e2:	4b28      	ldr	r3, [pc, #160]	; (8006284 <UART_SetConfig+0x570>)
 80061e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061e6:	e012      	b.n	800620e <UART_SetConfig+0x4fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061e8:	f7fd feb8 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 80061ec:	0003      	movs	r3, r0
 80061ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061f0:	e00d      	b.n	800620e <UART_SetConfig+0x4fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061f2:	2380      	movs	r3, #128	; 0x80
 80061f4:	021b      	lsls	r3, r3, #8
 80061f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061f8:	e009      	b.n	800620e <UART_SetConfig+0x4fa>
      default:
        pclk = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80061fe:	231a      	movs	r3, #26
 8006200:	2218      	movs	r2, #24
 8006202:	4694      	mov	ip, r2
 8006204:	44bc      	add	ip, r7
 8006206:	4463      	add	r3, ip
 8006208:	2201      	movs	r2, #1
 800620a:	701a      	strb	r2, [r3, #0]
        break;
 800620c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800620e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006210:	2b00      	cmp	r3, #0
 8006212:	d021      	beq.n	8006258 <UART_SetConfig+0x544>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	085a      	lsrs	r2, r3, #1
 800621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621c:	18d2      	adds	r2, r2, r3
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	0019      	movs	r1, r3
 8006224:	0010      	movs	r0, r2
 8006226:	f7f9 ff81 	bl	800012c <__udivsi3>
 800622a:	0003      	movs	r3, r0
 800622c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800622e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006230:	2b0f      	cmp	r3, #15
 8006232:	d90a      	bls.n	800624a <UART_SetConfig+0x536>
 8006234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006236:	2380      	movs	r3, #128	; 0x80
 8006238:	025b      	lsls	r3, r3, #9
 800623a:	429a      	cmp	r2, r3
 800623c:	d205      	bcs.n	800624a <UART_SetConfig+0x536>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800623e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006240:	b29a      	uxth	r2, r3
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60da      	str	r2, [r3, #12]
 8006248:	e006      	b.n	8006258 <UART_SetConfig+0x544>
      }
      else
      {
        ret = HAL_ERROR;
 800624a:	231a      	movs	r3, #26
 800624c:	2218      	movs	r2, #24
 800624e:	4694      	mov	ip, r2
 8006250:	44bc      	add	ip, r7
 8006252:	4463      	add	r3, ip
 8006254:	2201      	movs	r2, #1
 8006256:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	2200      	movs	r2, #0
 800625c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	2200      	movs	r2, #0
 8006262:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006264:	231a      	movs	r3, #26
 8006266:	2218      	movs	r2, #24
 8006268:	4694      	mov	ip, r2
 800626a:	44bc      	add	ip, r7
 800626c:	4463      	add	r3, ip
 800626e:	781b      	ldrb	r3, [r3, #0]
}
 8006270:	0018      	movs	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	b00e      	add	sp, #56	; 0x38
 8006276:	bdb0      	pop	{r4, r5, r7, pc}
 8006278:	08007de0 	.word	0x08007de0
 800627c:	40021000 	.word	0x40021000
 8006280:	003d0900 	.word	0x003d0900
 8006284:	00f42400 	.word	0x00f42400
 8006288:	08007e04 	.word	0x08007e04

0800628c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	2201      	movs	r2, #1
 800629a:	4013      	ands	r3, r2
 800629c:	d00b      	beq.n	80062b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	4a4a      	ldr	r2, [pc, #296]	; (80063d0 <UART_AdvFeatureConfig+0x144>)
 80062a6:	4013      	ands	r3, r2
 80062a8:	0019      	movs	r1, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	2202      	movs	r2, #2
 80062bc:	4013      	ands	r3, r2
 80062be:	d00b      	beq.n	80062d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	4a43      	ldr	r2, [pc, #268]	; (80063d4 <UART_AdvFeatureConfig+0x148>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	0019      	movs	r1, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	2204      	movs	r2, #4
 80062de:	4013      	ands	r3, r2
 80062e0:	d00b      	beq.n	80062fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	4a3b      	ldr	r2, [pc, #236]	; (80063d8 <UART_AdvFeatureConfig+0x14c>)
 80062ea:	4013      	ands	r3, r2
 80062ec:	0019      	movs	r1, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fe:	2208      	movs	r2, #8
 8006300:	4013      	ands	r3, r2
 8006302:	d00b      	beq.n	800631c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	4a34      	ldr	r2, [pc, #208]	; (80063dc <UART_AdvFeatureConfig+0x150>)
 800630c:	4013      	ands	r3, r2
 800630e:	0019      	movs	r1, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	2210      	movs	r2, #16
 8006322:	4013      	ands	r3, r2
 8006324:	d00b      	beq.n	800633e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	4a2c      	ldr	r2, [pc, #176]	; (80063e0 <UART_AdvFeatureConfig+0x154>)
 800632e:	4013      	ands	r3, r2
 8006330:	0019      	movs	r1, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	2220      	movs	r2, #32
 8006344:	4013      	ands	r3, r2
 8006346:	d00b      	beq.n	8006360 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	4a25      	ldr	r2, [pc, #148]	; (80063e4 <UART_AdvFeatureConfig+0x158>)
 8006350:	4013      	ands	r3, r2
 8006352:	0019      	movs	r1, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	2240      	movs	r2, #64	; 0x40
 8006366:	4013      	ands	r3, r2
 8006368:	d01d      	beq.n	80063a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	4a1d      	ldr	r2, [pc, #116]	; (80063e8 <UART_AdvFeatureConfig+0x15c>)
 8006372:	4013      	ands	r3, r2
 8006374:	0019      	movs	r1, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006386:	2380      	movs	r3, #128	; 0x80
 8006388:	035b      	lsls	r3, r3, #13
 800638a:	429a      	cmp	r2, r3
 800638c:	d10b      	bne.n	80063a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	4a15      	ldr	r2, [pc, #84]	; (80063ec <UART_AdvFeatureConfig+0x160>)
 8006396:	4013      	ands	r3, r2
 8006398:	0019      	movs	r1, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	2280      	movs	r2, #128	; 0x80
 80063ac:	4013      	ands	r3, r2
 80063ae:	d00b      	beq.n	80063c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	4a0e      	ldr	r2, [pc, #56]	; (80063f0 <UART_AdvFeatureConfig+0x164>)
 80063b8:	4013      	ands	r3, r2
 80063ba:	0019      	movs	r1, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	605a      	str	r2, [r3, #4]
  }
}
 80063c8:	46c0      	nop			; (mov r8, r8)
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b002      	add	sp, #8
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	fffdffff 	.word	0xfffdffff
 80063d4:	fffeffff 	.word	0xfffeffff
 80063d8:	fffbffff 	.word	0xfffbffff
 80063dc:	ffff7fff 	.word	0xffff7fff
 80063e0:	ffffefff 	.word	0xffffefff
 80063e4:	ffffdfff 	.word	0xffffdfff
 80063e8:	ffefffff 	.word	0xffefffff
 80063ec:	ff9fffff 	.word	0xff9fffff
 80063f0:	fff7ffff 	.word	0xfff7ffff

080063f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b092      	sub	sp, #72	; 0x48
 80063f8:	af02      	add	r7, sp, #8
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2284      	movs	r2, #132	; 0x84
 8006400:	2100      	movs	r1, #0
 8006402:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006404:	f7fc fb78 	bl	8002af8 <HAL_GetTick>
 8006408:	0003      	movs	r3, r0
 800640a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2208      	movs	r2, #8
 8006414:	4013      	ands	r3, r2
 8006416:	2b08      	cmp	r3, #8
 8006418:	d12c      	bne.n	8006474 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800641a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800641c:	2280      	movs	r2, #128	; 0x80
 800641e:	0391      	lsls	r1, r2, #14
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4a46      	ldr	r2, [pc, #280]	; (800653c <UART_CheckIdleState+0x148>)
 8006424:	9200      	str	r2, [sp, #0]
 8006426:	2200      	movs	r2, #0
 8006428:	f000 f88c 	bl	8006544 <UART_WaitOnFlagUntilTimeout>
 800642c:	1e03      	subs	r3, r0, #0
 800642e:	d021      	beq.n	8006474 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006430:	f3ef 8310 	mrs	r3, PRIMASK
 8006434:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006438:	63bb      	str	r3, [r7, #56]	; 0x38
 800643a:	2301      	movs	r3, #1
 800643c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006440:	f383 8810 	msr	PRIMASK, r3
}
 8006444:	46c0      	nop			; (mov r8, r8)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2180      	movs	r1, #128	; 0x80
 8006452:	438a      	bics	r2, r1
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006458:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800645a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645c:	f383 8810 	msr	PRIMASK, r3
}
 8006460:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2220      	movs	r2, #32
 8006466:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2278      	movs	r2, #120	; 0x78
 800646c:	2100      	movs	r1, #0
 800646e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e05f      	b.n	8006534 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2204      	movs	r2, #4
 800647c:	4013      	ands	r3, r2
 800647e:	2b04      	cmp	r3, #4
 8006480:	d146      	bne.n	8006510 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006484:	2280      	movs	r2, #128	; 0x80
 8006486:	03d1      	lsls	r1, r2, #15
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	4a2c      	ldr	r2, [pc, #176]	; (800653c <UART_CheckIdleState+0x148>)
 800648c:	9200      	str	r2, [sp, #0]
 800648e:	2200      	movs	r2, #0
 8006490:	f000 f858 	bl	8006544 <UART_WaitOnFlagUntilTimeout>
 8006494:	1e03      	subs	r3, r0, #0
 8006496:	d03b      	beq.n	8006510 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006498:	f3ef 8310 	mrs	r3, PRIMASK
 800649c:	60fb      	str	r3, [r7, #12]
  return(result);
 800649e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34
 80064a2:	2301      	movs	r3, #1
 80064a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f383 8810 	msr	PRIMASK, r3
}
 80064ac:	46c0      	nop			; (mov r8, r8)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4921      	ldr	r1, [pc, #132]	; (8006540 <UART_CheckIdleState+0x14c>)
 80064ba:	400a      	ands	r2, r1
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f383 8810 	msr	PRIMASK, r3
}
 80064c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ca:	f3ef 8310 	mrs	r3, PRIMASK
 80064ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80064d0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d2:	633b      	str	r3, [r7, #48]	; 0x30
 80064d4:	2301      	movs	r3, #1
 80064d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f383 8810 	msr	PRIMASK, r3
}
 80064de:	46c0      	nop			; (mov r8, r8)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2101      	movs	r1, #1
 80064ec:	438a      	bics	r2, r1
 80064ee:	609a      	str	r2, [r3, #8]
 80064f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	f383 8810 	msr	PRIMASK, r3
}
 80064fa:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2280      	movs	r2, #128	; 0x80
 8006500:	2120      	movs	r1, #32
 8006502:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2278      	movs	r2, #120	; 0x78
 8006508:	2100      	movs	r1, #0
 800650a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e011      	b.n	8006534 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2220      	movs	r2, #32
 8006514:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2280      	movs	r2, #128	; 0x80
 800651a:	2120      	movs	r1, #32
 800651c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2278      	movs	r2, #120	; 0x78
 800652e:	2100      	movs	r1, #0
 8006530:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	0018      	movs	r0, r3
 8006536:	46bd      	mov	sp, r7
 8006538:	b010      	add	sp, #64	; 0x40
 800653a:	bd80      	pop	{r7, pc}
 800653c:	01ffffff 	.word	0x01ffffff
 8006540:	fffffedf 	.word	0xfffffedf

08006544 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	603b      	str	r3, [r7, #0]
 8006550:	1dfb      	adds	r3, r7, #7
 8006552:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006554:	e04b      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	3301      	adds	r3, #1
 800655a:	d048      	beq.n	80065ee <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655c:	f7fc facc 	bl	8002af8 <HAL_GetTick>
 8006560:	0002      	movs	r2, r0
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	429a      	cmp	r2, r3
 800656a:	d302      	bcc.n	8006572 <UART_WaitOnFlagUntilTimeout+0x2e>
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e04b      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2204      	movs	r2, #4
 800657e:	4013      	ands	r3, r2
 8006580:	d035      	beq.n	80065ee <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	2208      	movs	r2, #8
 800658a:	4013      	ands	r3, r2
 800658c:	2b08      	cmp	r3, #8
 800658e:	d111      	bne.n	80065b4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2208      	movs	r2, #8
 8006596:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	0018      	movs	r0, r3
 800659c:	f000 f83c 	bl	8006618 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2284      	movs	r2, #132	; 0x84
 80065a4:	2108      	movs	r1, #8
 80065a6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2278      	movs	r2, #120	; 0x78
 80065ac:	2100      	movs	r1, #0
 80065ae:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e02c      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	69da      	ldr	r2, [r3, #28]
 80065ba:	2380      	movs	r3, #128	; 0x80
 80065bc:	011b      	lsls	r3, r3, #4
 80065be:	401a      	ands	r2, r3
 80065c0:	2380      	movs	r3, #128	; 0x80
 80065c2:	011b      	lsls	r3, r3, #4
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d112      	bne.n	80065ee <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2280      	movs	r2, #128	; 0x80
 80065ce:	0112      	lsls	r2, r2, #4
 80065d0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	0018      	movs	r0, r3
 80065d6:	f000 f81f 	bl	8006618 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2284      	movs	r2, #132	; 0x84
 80065de:	2120      	movs	r1, #32
 80065e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2278      	movs	r2, #120	; 0x78
 80065e6:	2100      	movs	r1, #0
 80065e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e00f      	b.n	800660e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	4013      	ands	r3, r2
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	425a      	negs	r2, r3
 80065fe:	4153      	adcs	r3, r2
 8006600:	b2db      	uxtb	r3, r3
 8006602:	001a      	movs	r2, r3
 8006604:	1dfb      	adds	r3, r7, #7
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d0a4      	beq.n	8006556 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	0018      	movs	r0, r3
 8006610:	46bd      	mov	sp, r7
 8006612:	b004      	add	sp, #16
 8006614:	bd80      	pop	{r7, pc}
	...

08006618 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08e      	sub	sp, #56	; 0x38
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006620:	f3ef 8310 	mrs	r3, PRIMASK
 8006624:	617b      	str	r3, [r7, #20]
  return(result);
 8006626:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006628:	637b      	str	r3, [r7, #52]	; 0x34
 800662a:	2301      	movs	r3, #1
 800662c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	f383 8810 	msr	PRIMASK, r3
}
 8006634:	46c0      	nop			; (mov r8, r8)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4926      	ldr	r1, [pc, #152]	; (80066dc <UART_EndRxTransfer+0xc4>)
 8006642:	400a      	ands	r2, r1
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006648:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	f383 8810 	msr	PRIMASK, r3
}
 8006650:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006652:	f3ef 8310 	mrs	r3, PRIMASK
 8006656:	623b      	str	r3, [r7, #32]
  return(result);
 8006658:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665a:	633b      	str	r3, [r7, #48]	; 0x30
 800665c:	2301      	movs	r3, #1
 800665e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	f383 8810 	msr	PRIMASK, r3
}
 8006666:	46c0      	nop			; (mov r8, r8)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2101      	movs	r1, #1
 8006674:	438a      	bics	r2, r1
 8006676:	609a      	str	r2, [r3, #8]
 8006678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	f383 8810 	msr	PRIMASK, r3
}
 8006682:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006688:	2b01      	cmp	r3, #1
 800668a:	d118      	bne.n	80066be <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800668c:	f3ef 8310 	mrs	r3, PRIMASK
 8006690:	60bb      	str	r3, [r7, #8]
  return(result);
 8006692:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006696:	2301      	movs	r3, #1
 8006698:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f383 8810 	msr	PRIMASK, r3
}
 80066a0:	46c0      	nop			; (mov r8, r8)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2110      	movs	r1, #16
 80066ae:	438a      	bics	r2, r1
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f383 8810 	msr	PRIMASK, r3
}
 80066bc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2280      	movs	r2, #128	; 0x80
 80066c2:	2120      	movs	r1, #32
 80066c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80066d2:	46c0      	nop			; (mov r8, r8)
 80066d4:	46bd      	mov	sp, r7
 80066d6:	b00e      	add	sp, #56	; 0x38
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	46c0      	nop			; (mov r8, r8)
 80066dc:	fffffedf 	.word	0xfffffedf

080066e0 <atoi>:
 80066e0:	b510      	push	{r4, lr}
 80066e2:	220a      	movs	r2, #10
 80066e4:	2100      	movs	r1, #0
 80066e6:	f000 fa2f 	bl	8006b48 <strtol>
 80066ea:	bd10      	pop	{r4, pc}

080066ec <__errno>:
 80066ec:	4b01      	ldr	r3, [pc, #4]	; (80066f4 <__errno+0x8>)
 80066ee:	6818      	ldr	r0, [r3, #0]
 80066f0:	4770      	bx	lr
 80066f2:	46c0      	nop			; (mov r8, r8)
 80066f4:	2000000c 	.word	0x2000000c

080066f8 <__libc_init_array>:
 80066f8:	b570      	push	{r4, r5, r6, lr}
 80066fa:	2600      	movs	r6, #0
 80066fc:	4d0c      	ldr	r5, [pc, #48]	; (8006730 <__libc_init_array+0x38>)
 80066fe:	4c0d      	ldr	r4, [pc, #52]	; (8006734 <__libc_init_array+0x3c>)
 8006700:	1b64      	subs	r4, r4, r5
 8006702:	10a4      	asrs	r4, r4, #2
 8006704:	42a6      	cmp	r6, r4
 8006706:	d109      	bne.n	800671c <__libc_init_array+0x24>
 8006708:	2600      	movs	r6, #0
 800670a:	f001 fb1f 	bl	8007d4c <_init>
 800670e:	4d0a      	ldr	r5, [pc, #40]	; (8006738 <__libc_init_array+0x40>)
 8006710:	4c0a      	ldr	r4, [pc, #40]	; (800673c <__libc_init_array+0x44>)
 8006712:	1b64      	subs	r4, r4, r5
 8006714:	10a4      	asrs	r4, r4, #2
 8006716:	42a6      	cmp	r6, r4
 8006718:	d105      	bne.n	8006726 <__libc_init_array+0x2e>
 800671a:	bd70      	pop	{r4, r5, r6, pc}
 800671c:	00b3      	lsls	r3, r6, #2
 800671e:	58eb      	ldr	r3, [r5, r3]
 8006720:	4798      	blx	r3
 8006722:	3601      	adds	r6, #1
 8006724:	e7ee      	b.n	8006704 <__libc_init_array+0xc>
 8006726:	00b3      	lsls	r3, r6, #2
 8006728:	58eb      	ldr	r3, [r5, r3]
 800672a:	4798      	blx	r3
 800672c:	3601      	adds	r6, #1
 800672e:	e7f2      	b.n	8006716 <__libc_init_array+0x1e>
 8006730:	0800807c 	.word	0x0800807c
 8006734:	0800807c 	.word	0x0800807c
 8006738:	0800807c 	.word	0x0800807c
 800673c:	08008080 	.word	0x08008080

08006740 <malloc>:
 8006740:	b510      	push	{r4, lr}
 8006742:	4b03      	ldr	r3, [pc, #12]	; (8006750 <malloc+0x10>)
 8006744:	0001      	movs	r1, r0
 8006746:	6818      	ldr	r0, [r3, #0]
 8006748:	f000 f860 	bl	800680c <_malloc_r>
 800674c:	bd10      	pop	{r4, pc}
 800674e:	46c0      	nop			; (mov r8, r8)
 8006750:	2000000c 	.word	0x2000000c

08006754 <free>:
 8006754:	b510      	push	{r4, lr}
 8006756:	4b03      	ldr	r3, [pc, #12]	; (8006764 <free+0x10>)
 8006758:	0001      	movs	r1, r0
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	f000 f80c 	bl	8006778 <_free_r>
 8006760:	bd10      	pop	{r4, pc}
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	2000000c 	.word	0x2000000c

08006768 <memset>:
 8006768:	0003      	movs	r3, r0
 800676a:	1882      	adds	r2, r0, r2
 800676c:	4293      	cmp	r3, r2
 800676e:	d100      	bne.n	8006772 <memset+0xa>
 8006770:	4770      	bx	lr
 8006772:	7019      	strb	r1, [r3, #0]
 8006774:	3301      	adds	r3, #1
 8006776:	e7f9      	b.n	800676c <memset+0x4>

08006778 <_free_r>:
 8006778:	b570      	push	{r4, r5, r6, lr}
 800677a:	0005      	movs	r5, r0
 800677c:	2900      	cmp	r1, #0
 800677e:	d010      	beq.n	80067a2 <_free_r+0x2a>
 8006780:	1f0c      	subs	r4, r1, #4
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	da00      	bge.n	800678a <_free_r+0x12>
 8006788:	18e4      	adds	r4, r4, r3
 800678a:	0028      	movs	r0, r5
 800678c:	f000 fa16 	bl	8006bbc <__malloc_lock>
 8006790:	4a1d      	ldr	r2, [pc, #116]	; (8006808 <_free_r+0x90>)
 8006792:	6813      	ldr	r3, [r2, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d105      	bne.n	80067a4 <_free_r+0x2c>
 8006798:	6063      	str	r3, [r4, #4]
 800679a:	6014      	str	r4, [r2, #0]
 800679c:	0028      	movs	r0, r5
 800679e:	f000 fa15 	bl	8006bcc <__malloc_unlock>
 80067a2:	bd70      	pop	{r4, r5, r6, pc}
 80067a4:	42a3      	cmp	r3, r4
 80067a6:	d908      	bls.n	80067ba <_free_r+0x42>
 80067a8:	6821      	ldr	r1, [r4, #0]
 80067aa:	1860      	adds	r0, r4, r1
 80067ac:	4283      	cmp	r3, r0
 80067ae:	d1f3      	bne.n	8006798 <_free_r+0x20>
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	1841      	adds	r1, r0, r1
 80067b6:	6021      	str	r1, [r4, #0]
 80067b8:	e7ee      	b.n	8006798 <_free_r+0x20>
 80067ba:	001a      	movs	r2, r3
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <_free_r+0x4e>
 80067c2:	42a3      	cmp	r3, r4
 80067c4:	d9f9      	bls.n	80067ba <_free_r+0x42>
 80067c6:	6811      	ldr	r1, [r2, #0]
 80067c8:	1850      	adds	r0, r2, r1
 80067ca:	42a0      	cmp	r0, r4
 80067cc:	d10b      	bne.n	80067e6 <_free_r+0x6e>
 80067ce:	6820      	ldr	r0, [r4, #0]
 80067d0:	1809      	adds	r1, r1, r0
 80067d2:	1850      	adds	r0, r2, r1
 80067d4:	6011      	str	r1, [r2, #0]
 80067d6:	4283      	cmp	r3, r0
 80067d8:	d1e0      	bne.n	800679c <_free_r+0x24>
 80067da:	6818      	ldr	r0, [r3, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	1841      	adds	r1, r0, r1
 80067e0:	6011      	str	r1, [r2, #0]
 80067e2:	6053      	str	r3, [r2, #4]
 80067e4:	e7da      	b.n	800679c <_free_r+0x24>
 80067e6:	42a0      	cmp	r0, r4
 80067e8:	d902      	bls.n	80067f0 <_free_r+0x78>
 80067ea:	230c      	movs	r3, #12
 80067ec:	602b      	str	r3, [r5, #0]
 80067ee:	e7d5      	b.n	800679c <_free_r+0x24>
 80067f0:	6821      	ldr	r1, [r4, #0]
 80067f2:	1860      	adds	r0, r4, r1
 80067f4:	4283      	cmp	r3, r0
 80067f6:	d103      	bne.n	8006800 <_free_r+0x88>
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	1841      	adds	r1, r0, r1
 80067fe:	6021      	str	r1, [r4, #0]
 8006800:	6063      	str	r3, [r4, #4]
 8006802:	6054      	str	r4, [r2, #4]
 8006804:	e7ca      	b.n	800679c <_free_r+0x24>
 8006806:	46c0      	nop			; (mov r8, r8)
 8006808:	20000134 	.word	0x20000134

0800680c <_malloc_r>:
 800680c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680e:	2303      	movs	r3, #3
 8006810:	1ccd      	adds	r5, r1, #3
 8006812:	439d      	bics	r5, r3
 8006814:	3508      	adds	r5, #8
 8006816:	0006      	movs	r6, r0
 8006818:	2d0c      	cmp	r5, #12
 800681a:	d21f      	bcs.n	800685c <_malloc_r+0x50>
 800681c:	250c      	movs	r5, #12
 800681e:	42a9      	cmp	r1, r5
 8006820:	d81e      	bhi.n	8006860 <_malloc_r+0x54>
 8006822:	0030      	movs	r0, r6
 8006824:	f000 f9ca 	bl	8006bbc <__malloc_lock>
 8006828:	4925      	ldr	r1, [pc, #148]	; (80068c0 <_malloc_r+0xb4>)
 800682a:	680a      	ldr	r2, [r1, #0]
 800682c:	0014      	movs	r4, r2
 800682e:	2c00      	cmp	r4, #0
 8006830:	d11a      	bne.n	8006868 <_malloc_r+0x5c>
 8006832:	4f24      	ldr	r7, [pc, #144]	; (80068c4 <_malloc_r+0xb8>)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d104      	bne.n	8006844 <_malloc_r+0x38>
 800683a:	0021      	movs	r1, r4
 800683c:	0030      	movs	r0, r6
 800683e:	f000 f843 	bl	80068c8 <_sbrk_r>
 8006842:	6038      	str	r0, [r7, #0]
 8006844:	0029      	movs	r1, r5
 8006846:	0030      	movs	r0, r6
 8006848:	f000 f83e 	bl	80068c8 <_sbrk_r>
 800684c:	1c43      	adds	r3, r0, #1
 800684e:	d12b      	bne.n	80068a8 <_malloc_r+0x9c>
 8006850:	230c      	movs	r3, #12
 8006852:	0030      	movs	r0, r6
 8006854:	6033      	str	r3, [r6, #0]
 8006856:	f000 f9b9 	bl	8006bcc <__malloc_unlock>
 800685a:	e003      	b.n	8006864 <_malloc_r+0x58>
 800685c:	2d00      	cmp	r5, #0
 800685e:	dade      	bge.n	800681e <_malloc_r+0x12>
 8006860:	230c      	movs	r3, #12
 8006862:	6033      	str	r3, [r6, #0]
 8006864:	2000      	movs	r0, #0
 8006866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	1b5b      	subs	r3, r3, r5
 800686c:	d419      	bmi.n	80068a2 <_malloc_r+0x96>
 800686e:	2b0b      	cmp	r3, #11
 8006870:	d903      	bls.n	800687a <_malloc_r+0x6e>
 8006872:	6023      	str	r3, [r4, #0]
 8006874:	18e4      	adds	r4, r4, r3
 8006876:	6025      	str	r5, [r4, #0]
 8006878:	e003      	b.n	8006882 <_malloc_r+0x76>
 800687a:	6863      	ldr	r3, [r4, #4]
 800687c:	42a2      	cmp	r2, r4
 800687e:	d10e      	bne.n	800689e <_malloc_r+0x92>
 8006880:	600b      	str	r3, [r1, #0]
 8006882:	0030      	movs	r0, r6
 8006884:	f000 f9a2 	bl	8006bcc <__malloc_unlock>
 8006888:	0020      	movs	r0, r4
 800688a:	2207      	movs	r2, #7
 800688c:	300b      	adds	r0, #11
 800688e:	1d23      	adds	r3, r4, #4
 8006890:	4390      	bics	r0, r2
 8006892:	1ac2      	subs	r2, r0, r3
 8006894:	4298      	cmp	r0, r3
 8006896:	d0e6      	beq.n	8006866 <_malloc_r+0x5a>
 8006898:	1a1b      	subs	r3, r3, r0
 800689a:	50a3      	str	r3, [r4, r2]
 800689c:	e7e3      	b.n	8006866 <_malloc_r+0x5a>
 800689e:	6053      	str	r3, [r2, #4]
 80068a0:	e7ef      	b.n	8006882 <_malloc_r+0x76>
 80068a2:	0022      	movs	r2, r4
 80068a4:	6864      	ldr	r4, [r4, #4]
 80068a6:	e7c2      	b.n	800682e <_malloc_r+0x22>
 80068a8:	2303      	movs	r3, #3
 80068aa:	1cc4      	adds	r4, r0, #3
 80068ac:	439c      	bics	r4, r3
 80068ae:	42a0      	cmp	r0, r4
 80068b0:	d0e1      	beq.n	8006876 <_malloc_r+0x6a>
 80068b2:	1a21      	subs	r1, r4, r0
 80068b4:	0030      	movs	r0, r6
 80068b6:	f000 f807 	bl	80068c8 <_sbrk_r>
 80068ba:	1c43      	adds	r3, r0, #1
 80068bc:	d1db      	bne.n	8006876 <_malloc_r+0x6a>
 80068be:	e7c7      	b.n	8006850 <_malloc_r+0x44>
 80068c0:	20000134 	.word	0x20000134
 80068c4:	20000138 	.word	0x20000138

080068c8 <_sbrk_r>:
 80068c8:	2300      	movs	r3, #0
 80068ca:	b570      	push	{r4, r5, r6, lr}
 80068cc:	4d06      	ldr	r5, [pc, #24]	; (80068e8 <_sbrk_r+0x20>)
 80068ce:	0004      	movs	r4, r0
 80068d0:	0008      	movs	r0, r1
 80068d2:	602b      	str	r3, [r5, #0]
 80068d4:	f7fc f844 	bl	8002960 <_sbrk>
 80068d8:	1c43      	adds	r3, r0, #1
 80068da:	d103      	bne.n	80068e4 <_sbrk_r+0x1c>
 80068dc:	682b      	ldr	r3, [r5, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d000      	beq.n	80068e4 <_sbrk_r+0x1c>
 80068e2:	6023      	str	r3, [r4, #0]
 80068e4:	bd70      	pop	{r4, r5, r6, pc}
 80068e6:	46c0      	nop			; (mov r8, r8)
 80068e8:	200002b4 	.word	0x200002b4

080068ec <siprintf>:
 80068ec:	b40e      	push	{r1, r2, r3}
 80068ee:	b500      	push	{lr}
 80068f0:	490b      	ldr	r1, [pc, #44]	; (8006920 <siprintf+0x34>)
 80068f2:	b09c      	sub	sp, #112	; 0x70
 80068f4:	ab1d      	add	r3, sp, #116	; 0x74
 80068f6:	9002      	str	r0, [sp, #8]
 80068f8:	9006      	str	r0, [sp, #24]
 80068fa:	9107      	str	r1, [sp, #28]
 80068fc:	9104      	str	r1, [sp, #16]
 80068fe:	4809      	ldr	r0, [pc, #36]	; (8006924 <siprintf+0x38>)
 8006900:	4909      	ldr	r1, [pc, #36]	; (8006928 <siprintf+0x3c>)
 8006902:	cb04      	ldmia	r3!, {r2}
 8006904:	9105      	str	r1, [sp, #20]
 8006906:	6800      	ldr	r0, [r0, #0]
 8006908:	a902      	add	r1, sp, #8
 800690a:	9301      	str	r3, [sp, #4]
 800690c:	f000 f9c8 	bl	8006ca0 <_svfiprintf_r>
 8006910:	2300      	movs	r3, #0
 8006912:	9a02      	ldr	r2, [sp, #8]
 8006914:	7013      	strb	r3, [r2, #0]
 8006916:	b01c      	add	sp, #112	; 0x70
 8006918:	bc08      	pop	{r3}
 800691a:	b003      	add	sp, #12
 800691c:	4718      	bx	r3
 800691e:	46c0      	nop			; (mov r8, r8)
 8006920:	7fffffff 	.word	0x7fffffff
 8006924:	2000000c 	.word	0x2000000c
 8006928:	ffff0208 	.word	0xffff0208

0800692c <strcpy>:
 800692c:	0003      	movs	r3, r0
 800692e:	780a      	ldrb	r2, [r1, #0]
 8006930:	3101      	adds	r1, #1
 8006932:	701a      	strb	r2, [r3, #0]
 8006934:	3301      	adds	r3, #1
 8006936:	2a00      	cmp	r2, #0
 8006938:	d1f9      	bne.n	800692e <strcpy+0x2>
 800693a:	4770      	bx	lr

0800693c <strncpy>:
 800693c:	0003      	movs	r3, r0
 800693e:	b530      	push	{r4, r5, lr}
 8006940:	001d      	movs	r5, r3
 8006942:	2a00      	cmp	r2, #0
 8006944:	d006      	beq.n	8006954 <strncpy+0x18>
 8006946:	780c      	ldrb	r4, [r1, #0]
 8006948:	3a01      	subs	r2, #1
 800694a:	3301      	adds	r3, #1
 800694c:	702c      	strb	r4, [r5, #0]
 800694e:	3101      	adds	r1, #1
 8006950:	2c00      	cmp	r4, #0
 8006952:	d1f5      	bne.n	8006940 <strncpy+0x4>
 8006954:	2100      	movs	r1, #0
 8006956:	189a      	adds	r2, r3, r2
 8006958:	4293      	cmp	r3, r2
 800695a:	d100      	bne.n	800695e <strncpy+0x22>
 800695c:	bd30      	pop	{r4, r5, pc}
 800695e:	7019      	strb	r1, [r3, #0]
 8006960:	3301      	adds	r3, #1
 8006962:	e7f9      	b.n	8006958 <strncpy+0x1c>

08006964 <strtok>:
 8006964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006966:	4b16      	ldr	r3, [pc, #88]	; (80069c0 <strtok+0x5c>)
 8006968:	0005      	movs	r5, r0
 800696a:	681f      	ldr	r7, [r3, #0]
 800696c:	000e      	movs	r6, r1
 800696e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8006970:	2c00      	cmp	r4, #0
 8006972:	d11d      	bne.n	80069b0 <strtok+0x4c>
 8006974:	2050      	movs	r0, #80	; 0x50
 8006976:	f7ff fee3 	bl	8006740 <malloc>
 800697a:	1e02      	subs	r2, r0, #0
 800697c:	65b8      	str	r0, [r7, #88]	; 0x58
 800697e:	d104      	bne.n	800698a <strtok+0x26>
 8006980:	2157      	movs	r1, #87	; 0x57
 8006982:	4b10      	ldr	r3, [pc, #64]	; (80069c4 <strtok+0x60>)
 8006984:	4810      	ldr	r0, [pc, #64]	; (80069c8 <strtok+0x64>)
 8006986:	f000 f8eb 	bl	8006b60 <__assert_func>
 800698a:	6004      	str	r4, [r0, #0]
 800698c:	6044      	str	r4, [r0, #4]
 800698e:	6084      	str	r4, [r0, #8]
 8006990:	60c4      	str	r4, [r0, #12]
 8006992:	6104      	str	r4, [r0, #16]
 8006994:	6144      	str	r4, [r0, #20]
 8006996:	6184      	str	r4, [r0, #24]
 8006998:	6284      	str	r4, [r0, #40]	; 0x28
 800699a:	62c4      	str	r4, [r0, #44]	; 0x2c
 800699c:	6304      	str	r4, [r0, #48]	; 0x30
 800699e:	6344      	str	r4, [r0, #52]	; 0x34
 80069a0:	6384      	str	r4, [r0, #56]	; 0x38
 80069a2:	63c4      	str	r4, [r0, #60]	; 0x3c
 80069a4:	6404      	str	r4, [r0, #64]	; 0x40
 80069a6:	6444      	str	r4, [r0, #68]	; 0x44
 80069a8:	6484      	str	r4, [r0, #72]	; 0x48
 80069aa:	64c4      	str	r4, [r0, #76]	; 0x4c
 80069ac:	7704      	strb	r4, [r0, #28]
 80069ae:	6244      	str	r4, [r0, #36]	; 0x24
 80069b0:	0031      	movs	r1, r6
 80069b2:	0028      	movs	r0, r5
 80069b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069b6:	2301      	movs	r3, #1
 80069b8:	f000 f808 	bl	80069cc <__strtok_r>
 80069bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069be:	46c0      	nop			; (mov r8, r8)
 80069c0:	2000000c 	.word	0x2000000c
 80069c4:	08007e2c 	.word	0x08007e2c
 80069c8:	08007e43 	.word	0x08007e43

080069cc <__strtok_r>:
 80069cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d102      	bne.n	80069d8 <__strtok_r+0xc>
 80069d2:	6810      	ldr	r0, [r2, #0]
 80069d4:	2800      	cmp	r0, #0
 80069d6:	d013      	beq.n	8006a00 <__strtok_r+0x34>
 80069d8:	0004      	movs	r4, r0
 80069da:	0020      	movs	r0, r4
 80069dc:	000e      	movs	r6, r1
 80069de:	7805      	ldrb	r5, [r0, #0]
 80069e0:	3401      	adds	r4, #1
 80069e2:	7837      	ldrb	r7, [r6, #0]
 80069e4:	2f00      	cmp	r7, #0
 80069e6:	d104      	bne.n	80069f2 <__strtok_r+0x26>
 80069e8:	2d00      	cmp	r5, #0
 80069ea:	d10f      	bne.n	8006a0c <__strtok_r+0x40>
 80069ec:	0028      	movs	r0, r5
 80069ee:	6015      	str	r5, [r2, #0]
 80069f0:	e006      	b.n	8006a00 <__strtok_r+0x34>
 80069f2:	3601      	adds	r6, #1
 80069f4:	42bd      	cmp	r5, r7
 80069f6:	d1f4      	bne.n	80069e2 <__strtok_r+0x16>
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1ee      	bne.n	80069da <__strtok_r+0xe>
 80069fc:	6014      	str	r4, [r2, #0]
 80069fe:	7003      	strb	r3, [r0, #0]
 8006a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a02:	002f      	movs	r7, r5
 8006a04:	e00f      	b.n	8006a26 <__strtok_r+0x5a>
 8006a06:	3301      	adds	r3, #1
 8006a08:	2e00      	cmp	r6, #0
 8006a0a:	d104      	bne.n	8006a16 <__strtok_r+0x4a>
 8006a0c:	0023      	movs	r3, r4
 8006a0e:	3401      	adds	r4, #1
 8006a10:	781d      	ldrb	r5, [r3, #0]
 8006a12:	0027      	movs	r7, r4
 8006a14:	000b      	movs	r3, r1
 8006a16:	781e      	ldrb	r6, [r3, #0]
 8006a18:	42b5      	cmp	r5, r6
 8006a1a:	d1f4      	bne.n	8006a06 <__strtok_r+0x3a>
 8006a1c:	2d00      	cmp	r5, #0
 8006a1e:	d0f0      	beq.n	8006a02 <__strtok_r+0x36>
 8006a20:	2300      	movs	r3, #0
 8006a22:	3c01      	subs	r4, #1
 8006a24:	7023      	strb	r3, [r4, #0]
 8006a26:	6017      	str	r7, [r2, #0]
 8006a28:	e7ea      	b.n	8006a00 <__strtok_r+0x34>
	...

08006a2c <_strtol_l.isra.0>:
 8006a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	001e      	movs	r6, r3
 8006a32:	9005      	str	r0, [sp, #20]
 8006a34:	9101      	str	r1, [sp, #4]
 8006a36:	9202      	str	r2, [sp, #8]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d045      	beq.n	8006ac8 <_strtol_l.isra.0+0x9c>
 8006a3c:	0008      	movs	r0, r1
 8006a3e:	2b24      	cmp	r3, #36	; 0x24
 8006a40:	d842      	bhi.n	8006ac8 <_strtol_l.isra.0+0x9c>
 8006a42:	4b3f      	ldr	r3, [pc, #252]	; (8006b40 <_strtol_l.isra.0+0x114>)
 8006a44:	2208      	movs	r2, #8
 8006a46:	469c      	mov	ip, r3
 8006a48:	0003      	movs	r3, r0
 8006a4a:	4661      	mov	r1, ip
 8006a4c:	781c      	ldrb	r4, [r3, #0]
 8006a4e:	1c45      	adds	r5, r0, #1
 8006a50:	5d09      	ldrb	r1, [r1, r4]
 8006a52:	0028      	movs	r0, r5
 8006a54:	000f      	movs	r7, r1
 8006a56:	4017      	ands	r7, r2
 8006a58:	4211      	tst	r1, r2
 8006a5a:	d1f5      	bne.n	8006a48 <_strtol_l.isra.0+0x1c>
 8006a5c:	2c2d      	cmp	r4, #45	; 0x2d
 8006a5e:	d13a      	bne.n	8006ad6 <_strtol_l.isra.0+0xaa>
 8006a60:	2701      	movs	r7, #1
 8006a62:	782c      	ldrb	r4, [r5, #0]
 8006a64:	1c9d      	adds	r5, r3, #2
 8006a66:	2e00      	cmp	r6, #0
 8006a68:	d065      	beq.n	8006b36 <_strtol_l.isra.0+0x10a>
 8006a6a:	2e10      	cmp	r6, #16
 8006a6c:	d109      	bne.n	8006a82 <_strtol_l.isra.0+0x56>
 8006a6e:	2c30      	cmp	r4, #48	; 0x30
 8006a70:	d107      	bne.n	8006a82 <_strtol_l.isra.0+0x56>
 8006a72:	2220      	movs	r2, #32
 8006a74:	782b      	ldrb	r3, [r5, #0]
 8006a76:	4393      	bics	r3, r2
 8006a78:	2b58      	cmp	r3, #88	; 0x58
 8006a7a:	d157      	bne.n	8006b2c <_strtol_l.isra.0+0x100>
 8006a7c:	2610      	movs	r6, #16
 8006a7e:	786c      	ldrb	r4, [r5, #1]
 8006a80:	3502      	adds	r5, #2
 8006a82:	4b30      	ldr	r3, [pc, #192]	; (8006b44 <_strtol_l.isra.0+0x118>)
 8006a84:	0031      	movs	r1, r6
 8006a86:	18fb      	adds	r3, r7, r3
 8006a88:	0018      	movs	r0, r3
 8006a8a:	9303      	str	r3, [sp, #12]
 8006a8c:	f7f9 fbd4 	bl	8000238 <__aeabi_uidivmod>
 8006a90:	2300      	movs	r3, #0
 8006a92:	2201      	movs	r2, #1
 8006a94:	4684      	mov	ip, r0
 8006a96:	0018      	movs	r0, r3
 8006a98:	9104      	str	r1, [sp, #16]
 8006a9a:	4252      	negs	r2, r2
 8006a9c:	0021      	movs	r1, r4
 8006a9e:	3930      	subs	r1, #48	; 0x30
 8006aa0:	2909      	cmp	r1, #9
 8006aa2:	d81d      	bhi.n	8006ae0 <_strtol_l.isra.0+0xb4>
 8006aa4:	000c      	movs	r4, r1
 8006aa6:	42a6      	cmp	r6, r4
 8006aa8:	dd28      	ble.n	8006afc <_strtol_l.isra.0+0xd0>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	db24      	blt.n	8006af8 <_strtol_l.isra.0+0xcc>
 8006aae:	0013      	movs	r3, r2
 8006ab0:	4584      	cmp	ip, r0
 8006ab2:	d306      	bcc.n	8006ac2 <_strtol_l.isra.0+0x96>
 8006ab4:	d102      	bne.n	8006abc <_strtol_l.isra.0+0x90>
 8006ab6:	9904      	ldr	r1, [sp, #16]
 8006ab8:	42a1      	cmp	r1, r4
 8006aba:	db02      	blt.n	8006ac2 <_strtol_l.isra.0+0x96>
 8006abc:	2301      	movs	r3, #1
 8006abe:	4370      	muls	r0, r6
 8006ac0:	1820      	adds	r0, r4, r0
 8006ac2:	782c      	ldrb	r4, [r5, #0]
 8006ac4:	3501      	adds	r5, #1
 8006ac6:	e7e9      	b.n	8006a9c <_strtol_l.isra.0+0x70>
 8006ac8:	f7ff fe10 	bl	80066ec <__errno>
 8006acc:	2316      	movs	r3, #22
 8006ace:	6003      	str	r3, [r0, #0]
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	b007      	add	sp, #28
 8006ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad6:	2c2b      	cmp	r4, #43	; 0x2b
 8006ad8:	d1c5      	bne.n	8006a66 <_strtol_l.isra.0+0x3a>
 8006ada:	782c      	ldrb	r4, [r5, #0]
 8006adc:	1c9d      	adds	r5, r3, #2
 8006ade:	e7c2      	b.n	8006a66 <_strtol_l.isra.0+0x3a>
 8006ae0:	0021      	movs	r1, r4
 8006ae2:	3941      	subs	r1, #65	; 0x41
 8006ae4:	2919      	cmp	r1, #25
 8006ae6:	d801      	bhi.n	8006aec <_strtol_l.isra.0+0xc0>
 8006ae8:	3c37      	subs	r4, #55	; 0x37
 8006aea:	e7dc      	b.n	8006aa6 <_strtol_l.isra.0+0x7a>
 8006aec:	0021      	movs	r1, r4
 8006aee:	3961      	subs	r1, #97	; 0x61
 8006af0:	2919      	cmp	r1, #25
 8006af2:	d803      	bhi.n	8006afc <_strtol_l.isra.0+0xd0>
 8006af4:	3c57      	subs	r4, #87	; 0x57
 8006af6:	e7d6      	b.n	8006aa6 <_strtol_l.isra.0+0x7a>
 8006af8:	0013      	movs	r3, r2
 8006afa:	e7e2      	b.n	8006ac2 <_strtol_l.isra.0+0x96>
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	da09      	bge.n	8006b14 <_strtol_l.isra.0+0xe8>
 8006b00:	2322      	movs	r3, #34	; 0x22
 8006b02:	9a05      	ldr	r2, [sp, #20]
 8006b04:	9803      	ldr	r0, [sp, #12]
 8006b06:	6013      	str	r3, [r2, #0]
 8006b08:	9b02      	ldr	r3, [sp, #8]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0e1      	beq.n	8006ad2 <_strtol_l.isra.0+0xa6>
 8006b0e:	1e6b      	subs	r3, r5, #1
 8006b10:	9301      	str	r3, [sp, #4]
 8006b12:	e007      	b.n	8006b24 <_strtol_l.isra.0+0xf8>
 8006b14:	2f00      	cmp	r7, #0
 8006b16:	d000      	beq.n	8006b1a <_strtol_l.isra.0+0xee>
 8006b18:	4240      	negs	r0, r0
 8006b1a:	9a02      	ldr	r2, [sp, #8]
 8006b1c:	2a00      	cmp	r2, #0
 8006b1e:	d0d8      	beq.n	8006ad2 <_strtol_l.isra.0+0xa6>
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1f4      	bne.n	8006b0e <_strtol_l.isra.0+0xe2>
 8006b24:	9b02      	ldr	r3, [sp, #8]
 8006b26:	9a01      	ldr	r2, [sp, #4]
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	e7d2      	b.n	8006ad2 <_strtol_l.isra.0+0xa6>
 8006b2c:	2430      	movs	r4, #48	; 0x30
 8006b2e:	2e00      	cmp	r6, #0
 8006b30:	d1a7      	bne.n	8006a82 <_strtol_l.isra.0+0x56>
 8006b32:	3608      	adds	r6, #8
 8006b34:	e7a5      	b.n	8006a82 <_strtol_l.isra.0+0x56>
 8006b36:	2c30      	cmp	r4, #48	; 0x30
 8006b38:	d09b      	beq.n	8006a72 <_strtol_l.isra.0+0x46>
 8006b3a:	260a      	movs	r6, #10
 8006b3c:	e7a1      	b.n	8006a82 <_strtol_l.isra.0+0x56>
 8006b3e:	46c0      	nop			; (mov r8, r8)
 8006b40:	08007ee1 	.word	0x08007ee1
 8006b44:	7fffffff 	.word	0x7fffffff

08006b48 <strtol>:
 8006b48:	b510      	push	{r4, lr}
 8006b4a:	0013      	movs	r3, r2
 8006b4c:	000a      	movs	r2, r1
 8006b4e:	0001      	movs	r1, r0
 8006b50:	4802      	ldr	r0, [pc, #8]	; (8006b5c <strtol+0x14>)
 8006b52:	6800      	ldr	r0, [r0, #0]
 8006b54:	f7ff ff6a 	bl	8006a2c <_strtol_l.isra.0>
 8006b58:	bd10      	pop	{r4, pc}
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	2000000c 	.word	0x2000000c

08006b60 <__assert_func>:
 8006b60:	b530      	push	{r4, r5, lr}
 8006b62:	0014      	movs	r4, r2
 8006b64:	001a      	movs	r2, r3
 8006b66:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <__assert_func+0x2c>)
 8006b68:	0005      	movs	r5, r0
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	b085      	sub	sp, #20
 8006b6e:	68d8      	ldr	r0, [r3, #12]
 8006b70:	4b07      	ldr	r3, [pc, #28]	; (8006b90 <__assert_func+0x30>)
 8006b72:	2c00      	cmp	r4, #0
 8006b74:	d101      	bne.n	8006b7a <__assert_func+0x1a>
 8006b76:	4b07      	ldr	r3, [pc, #28]	; (8006b94 <__assert_func+0x34>)
 8006b78:	001c      	movs	r4, r3
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	9100      	str	r1, [sp, #0]
 8006b7e:	002b      	movs	r3, r5
 8006b80:	4905      	ldr	r1, [pc, #20]	; (8006b98 <__assert_func+0x38>)
 8006b82:	9402      	str	r4, [sp, #8]
 8006b84:	f000 f80a 	bl	8006b9c <fiprintf>
 8006b88:	f000 fd3c 	bl	8007604 <abort>
 8006b8c:	2000000c 	.word	0x2000000c
 8006b90:	08007ea4 	.word	0x08007ea4
 8006b94:	08007edf 	.word	0x08007edf
 8006b98:	08007eb1 	.word	0x08007eb1

08006b9c <fiprintf>:
 8006b9c:	b40e      	push	{r1, r2, r3}
 8006b9e:	b503      	push	{r0, r1, lr}
 8006ba0:	0001      	movs	r1, r0
 8006ba2:	ab03      	add	r3, sp, #12
 8006ba4:	4804      	ldr	r0, [pc, #16]	; (8006bb8 <fiprintf+0x1c>)
 8006ba6:	cb04      	ldmia	r3!, {r2}
 8006ba8:	6800      	ldr	r0, [r0, #0]
 8006baa:	9301      	str	r3, [sp, #4]
 8006bac:	f000 f9a0 	bl	8006ef0 <_vfiprintf_r>
 8006bb0:	b002      	add	sp, #8
 8006bb2:	bc08      	pop	{r3}
 8006bb4:	b003      	add	sp, #12
 8006bb6:	4718      	bx	r3
 8006bb8:	2000000c 	.word	0x2000000c

08006bbc <__malloc_lock>:
 8006bbc:	b510      	push	{r4, lr}
 8006bbe:	4802      	ldr	r0, [pc, #8]	; (8006bc8 <__malloc_lock+0xc>)
 8006bc0:	f000 fef7 	bl	80079b2 <__retarget_lock_acquire_recursive>
 8006bc4:	bd10      	pop	{r4, pc}
 8006bc6:	46c0      	nop			; (mov r8, r8)
 8006bc8:	200002bc 	.word	0x200002bc

08006bcc <__malloc_unlock>:
 8006bcc:	b510      	push	{r4, lr}
 8006bce:	4802      	ldr	r0, [pc, #8]	; (8006bd8 <__malloc_unlock+0xc>)
 8006bd0:	f000 fef0 	bl	80079b4 <__retarget_lock_release_recursive>
 8006bd4:	bd10      	pop	{r4, pc}
 8006bd6:	46c0      	nop			; (mov r8, r8)
 8006bd8:	200002bc 	.word	0x200002bc

08006bdc <__ssputs_r>:
 8006bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bde:	688e      	ldr	r6, [r1, #8]
 8006be0:	b085      	sub	sp, #20
 8006be2:	0007      	movs	r7, r0
 8006be4:	000c      	movs	r4, r1
 8006be6:	9203      	str	r2, [sp, #12]
 8006be8:	9301      	str	r3, [sp, #4]
 8006bea:	429e      	cmp	r6, r3
 8006bec:	d83c      	bhi.n	8006c68 <__ssputs_r+0x8c>
 8006bee:	2390      	movs	r3, #144	; 0x90
 8006bf0:	898a      	ldrh	r2, [r1, #12]
 8006bf2:	00db      	lsls	r3, r3, #3
 8006bf4:	421a      	tst	r2, r3
 8006bf6:	d034      	beq.n	8006c62 <__ssputs_r+0x86>
 8006bf8:	2503      	movs	r5, #3
 8006bfa:	6909      	ldr	r1, [r1, #16]
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	1a5b      	subs	r3, r3, r1
 8006c00:	9302      	str	r3, [sp, #8]
 8006c02:	6963      	ldr	r3, [r4, #20]
 8006c04:	9802      	ldr	r0, [sp, #8]
 8006c06:	435d      	muls	r5, r3
 8006c08:	0feb      	lsrs	r3, r5, #31
 8006c0a:	195d      	adds	r5, r3, r5
 8006c0c:	9b01      	ldr	r3, [sp, #4]
 8006c0e:	106d      	asrs	r5, r5, #1
 8006c10:	3301      	adds	r3, #1
 8006c12:	181b      	adds	r3, r3, r0
 8006c14:	42ab      	cmp	r3, r5
 8006c16:	d900      	bls.n	8006c1a <__ssputs_r+0x3e>
 8006c18:	001d      	movs	r5, r3
 8006c1a:	0553      	lsls	r3, r2, #21
 8006c1c:	d532      	bpl.n	8006c84 <__ssputs_r+0xa8>
 8006c1e:	0029      	movs	r1, r5
 8006c20:	0038      	movs	r0, r7
 8006c22:	f7ff fdf3 	bl	800680c <_malloc_r>
 8006c26:	1e06      	subs	r6, r0, #0
 8006c28:	d109      	bne.n	8006c3e <__ssputs_r+0x62>
 8006c2a:	230c      	movs	r3, #12
 8006c2c:	603b      	str	r3, [r7, #0]
 8006c2e:	2340      	movs	r3, #64	; 0x40
 8006c30:	2001      	movs	r0, #1
 8006c32:	89a2      	ldrh	r2, [r4, #12]
 8006c34:	4240      	negs	r0, r0
 8006c36:	4313      	orrs	r3, r2
 8006c38:	81a3      	strh	r3, [r4, #12]
 8006c3a:	b005      	add	sp, #20
 8006c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c3e:	9a02      	ldr	r2, [sp, #8]
 8006c40:	6921      	ldr	r1, [r4, #16]
 8006c42:	f000 ff30 	bl	8007aa6 <memcpy>
 8006c46:	89a3      	ldrh	r3, [r4, #12]
 8006c48:	4a14      	ldr	r2, [pc, #80]	; (8006c9c <__ssputs_r+0xc0>)
 8006c4a:	401a      	ands	r2, r3
 8006c4c:	2380      	movs	r3, #128	; 0x80
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	81a3      	strh	r3, [r4, #12]
 8006c52:	9b02      	ldr	r3, [sp, #8]
 8006c54:	6126      	str	r6, [r4, #16]
 8006c56:	18f6      	adds	r6, r6, r3
 8006c58:	6026      	str	r6, [r4, #0]
 8006c5a:	6165      	str	r5, [r4, #20]
 8006c5c:	9e01      	ldr	r6, [sp, #4]
 8006c5e:	1aed      	subs	r5, r5, r3
 8006c60:	60a5      	str	r5, [r4, #8]
 8006c62:	9b01      	ldr	r3, [sp, #4]
 8006c64:	429e      	cmp	r6, r3
 8006c66:	d900      	bls.n	8006c6a <__ssputs_r+0x8e>
 8006c68:	9e01      	ldr	r6, [sp, #4]
 8006c6a:	0032      	movs	r2, r6
 8006c6c:	9903      	ldr	r1, [sp, #12]
 8006c6e:	6820      	ldr	r0, [r4, #0]
 8006c70:	f000 ff22 	bl	8007ab8 <memmove>
 8006c74:	68a3      	ldr	r3, [r4, #8]
 8006c76:	2000      	movs	r0, #0
 8006c78:	1b9b      	subs	r3, r3, r6
 8006c7a:	60a3      	str	r3, [r4, #8]
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	199e      	adds	r6, r3, r6
 8006c80:	6026      	str	r6, [r4, #0]
 8006c82:	e7da      	b.n	8006c3a <__ssputs_r+0x5e>
 8006c84:	002a      	movs	r2, r5
 8006c86:	0038      	movs	r0, r7
 8006c88:	f000 ff29 	bl	8007ade <_realloc_r>
 8006c8c:	1e06      	subs	r6, r0, #0
 8006c8e:	d1e0      	bne.n	8006c52 <__ssputs_r+0x76>
 8006c90:	0038      	movs	r0, r7
 8006c92:	6921      	ldr	r1, [r4, #16]
 8006c94:	f7ff fd70 	bl	8006778 <_free_r>
 8006c98:	e7c7      	b.n	8006c2a <__ssputs_r+0x4e>
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	fffffb7f 	.word	0xfffffb7f

08006ca0 <_svfiprintf_r>:
 8006ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ca2:	b0a1      	sub	sp, #132	; 0x84
 8006ca4:	9003      	str	r0, [sp, #12]
 8006ca6:	001d      	movs	r5, r3
 8006ca8:	898b      	ldrh	r3, [r1, #12]
 8006caa:	000f      	movs	r7, r1
 8006cac:	0016      	movs	r6, r2
 8006cae:	061b      	lsls	r3, r3, #24
 8006cb0:	d511      	bpl.n	8006cd6 <_svfiprintf_r+0x36>
 8006cb2:	690b      	ldr	r3, [r1, #16]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10e      	bne.n	8006cd6 <_svfiprintf_r+0x36>
 8006cb8:	2140      	movs	r1, #64	; 0x40
 8006cba:	f7ff fda7 	bl	800680c <_malloc_r>
 8006cbe:	6038      	str	r0, [r7, #0]
 8006cc0:	6138      	str	r0, [r7, #16]
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d105      	bne.n	8006cd2 <_svfiprintf_r+0x32>
 8006cc6:	230c      	movs	r3, #12
 8006cc8:	9a03      	ldr	r2, [sp, #12]
 8006cca:	3801      	subs	r0, #1
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	b021      	add	sp, #132	; 0x84
 8006cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cd2:	2340      	movs	r3, #64	; 0x40
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	ac08      	add	r4, sp, #32
 8006cda:	6163      	str	r3, [r4, #20]
 8006cdc:	3320      	adds	r3, #32
 8006cde:	7663      	strb	r3, [r4, #25]
 8006ce0:	3310      	adds	r3, #16
 8006ce2:	76a3      	strb	r3, [r4, #26]
 8006ce4:	9507      	str	r5, [sp, #28]
 8006ce6:	0035      	movs	r5, r6
 8006ce8:	782b      	ldrb	r3, [r5, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <_svfiprintf_r+0x52>
 8006cee:	2b25      	cmp	r3, #37	; 0x25
 8006cf0:	d147      	bne.n	8006d82 <_svfiprintf_r+0xe2>
 8006cf2:	1bab      	subs	r3, r5, r6
 8006cf4:	9305      	str	r3, [sp, #20]
 8006cf6:	42b5      	cmp	r5, r6
 8006cf8:	d00c      	beq.n	8006d14 <_svfiprintf_r+0x74>
 8006cfa:	0032      	movs	r2, r6
 8006cfc:	0039      	movs	r1, r7
 8006cfe:	9803      	ldr	r0, [sp, #12]
 8006d00:	f7ff ff6c 	bl	8006bdc <__ssputs_r>
 8006d04:	1c43      	adds	r3, r0, #1
 8006d06:	d100      	bne.n	8006d0a <_svfiprintf_r+0x6a>
 8006d08:	e0ae      	b.n	8006e68 <_svfiprintf_r+0x1c8>
 8006d0a:	6962      	ldr	r2, [r4, #20]
 8006d0c:	9b05      	ldr	r3, [sp, #20]
 8006d0e:	4694      	mov	ip, r2
 8006d10:	4463      	add	r3, ip
 8006d12:	6163      	str	r3, [r4, #20]
 8006d14:	782b      	ldrb	r3, [r5, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d100      	bne.n	8006d1c <_svfiprintf_r+0x7c>
 8006d1a:	e0a5      	b.n	8006e68 <_svfiprintf_r+0x1c8>
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	2300      	movs	r3, #0
 8006d20:	4252      	negs	r2, r2
 8006d22:	6062      	str	r2, [r4, #4]
 8006d24:	a904      	add	r1, sp, #16
 8006d26:	3254      	adds	r2, #84	; 0x54
 8006d28:	1852      	adds	r2, r2, r1
 8006d2a:	1c6e      	adds	r6, r5, #1
 8006d2c:	6023      	str	r3, [r4, #0]
 8006d2e:	60e3      	str	r3, [r4, #12]
 8006d30:	60a3      	str	r3, [r4, #8]
 8006d32:	7013      	strb	r3, [r2, #0]
 8006d34:	65a3      	str	r3, [r4, #88]	; 0x58
 8006d36:	2205      	movs	r2, #5
 8006d38:	7831      	ldrb	r1, [r6, #0]
 8006d3a:	4854      	ldr	r0, [pc, #336]	; (8006e8c <_svfiprintf_r+0x1ec>)
 8006d3c:	f000 fea8 	bl	8007a90 <memchr>
 8006d40:	1c75      	adds	r5, r6, #1
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d11f      	bne.n	8006d86 <_svfiprintf_r+0xe6>
 8006d46:	6822      	ldr	r2, [r4, #0]
 8006d48:	06d3      	lsls	r3, r2, #27
 8006d4a:	d504      	bpl.n	8006d56 <_svfiprintf_r+0xb6>
 8006d4c:	2353      	movs	r3, #83	; 0x53
 8006d4e:	a904      	add	r1, sp, #16
 8006d50:	185b      	adds	r3, r3, r1
 8006d52:	2120      	movs	r1, #32
 8006d54:	7019      	strb	r1, [r3, #0]
 8006d56:	0713      	lsls	r3, r2, #28
 8006d58:	d504      	bpl.n	8006d64 <_svfiprintf_r+0xc4>
 8006d5a:	2353      	movs	r3, #83	; 0x53
 8006d5c:	a904      	add	r1, sp, #16
 8006d5e:	185b      	adds	r3, r3, r1
 8006d60:	212b      	movs	r1, #43	; 0x2b
 8006d62:	7019      	strb	r1, [r3, #0]
 8006d64:	7833      	ldrb	r3, [r6, #0]
 8006d66:	2b2a      	cmp	r3, #42	; 0x2a
 8006d68:	d016      	beq.n	8006d98 <_svfiprintf_r+0xf8>
 8006d6a:	0035      	movs	r5, r6
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	200a      	movs	r0, #10
 8006d70:	68e3      	ldr	r3, [r4, #12]
 8006d72:	782a      	ldrb	r2, [r5, #0]
 8006d74:	1c6e      	adds	r6, r5, #1
 8006d76:	3a30      	subs	r2, #48	; 0x30
 8006d78:	2a09      	cmp	r2, #9
 8006d7a:	d94e      	bls.n	8006e1a <_svfiprintf_r+0x17a>
 8006d7c:	2900      	cmp	r1, #0
 8006d7e:	d111      	bne.n	8006da4 <_svfiprintf_r+0x104>
 8006d80:	e017      	b.n	8006db2 <_svfiprintf_r+0x112>
 8006d82:	3501      	adds	r5, #1
 8006d84:	e7b0      	b.n	8006ce8 <_svfiprintf_r+0x48>
 8006d86:	4b41      	ldr	r3, [pc, #260]	; (8006e8c <_svfiprintf_r+0x1ec>)
 8006d88:	6822      	ldr	r2, [r4, #0]
 8006d8a:	1ac0      	subs	r0, r0, r3
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	4083      	lsls	r3, r0
 8006d90:	4313      	orrs	r3, r2
 8006d92:	002e      	movs	r6, r5
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	e7ce      	b.n	8006d36 <_svfiprintf_r+0x96>
 8006d98:	9b07      	ldr	r3, [sp, #28]
 8006d9a:	1d19      	adds	r1, r3, #4
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	9107      	str	r1, [sp, #28]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	db01      	blt.n	8006da8 <_svfiprintf_r+0x108>
 8006da4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006da6:	e004      	b.n	8006db2 <_svfiprintf_r+0x112>
 8006da8:	425b      	negs	r3, r3
 8006daa:	60e3      	str	r3, [r4, #12]
 8006dac:	2302      	movs	r3, #2
 8006dae:	4313      	orrs	r3, r2
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	782b      	ldrb	r3, [r5, #0]
 8006db4:	2b2e      	cmp	r3, #46	; 0x2e
 8006db6:	d10a      	bne.n	8006dce <_svfiprintf_r+0x12e>
 8006db8:	786b      	ldrb	r3, [r5, #1]
 8006dba:	2b2a      	cmp	r3, #42	; 0x2a
 8006dbc:	d135      	bne.n	8006e2a <_svfiprintf_r+0x18a>
 8006dbe:	9b07      	ldr	r3, [sp, #28]
 8006dc0:	3502      	adds	r5, #2
 8006dc2:	1d1a      	adds	r2, r3, #4
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	9207      	str	r2, [sp, #28]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	db2b      	blt.n	8006e24 <_svfiprintf_r+0x184>
 8006dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8006dce:	4e30      	ldr	r6, [pc, #192]	; (8006e90 <_svfiprintf_r+0x1f0>)
 8006dd0:	2203      	movs	r2, #3
 8006dd2:	0030      	movs	r0, r6
 8006dd4:	7829      	ldrb	r1, [r5, #0]
 8006dd6:	f000 fe5b 	bl	8007a90 <memchr>
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	d006      	beq.n	8006dec <_svfiprintf_r+0x14c>
 8006dde:	2340      	movs	r3, #64	; 0x40
 8006de0:	1b80      	subs	r0, r0, r6
 8006de2:	4083      	lsls	r3, r0
 8006de4:	6822      	ldr	r2, [r4, #0]
 8006de6:	3501      	adds	r5, #1
 8006de8:	4313      	orrs	r3, r2
 8006dea:	6023      	str	r3, [r4, #0]
 8006dec:	7829      	ldrb	r1, [r5, #0]
 8006dee:	2206      	movs	r2, #6
 8006df0:	4828      	ldr	r0, [pc, #160]	; (8006e94 <_svfiprintf_r+0x1f4>)
 8006df2:	1c6e      	adds	r6, r5, #1
 8006df4:	7621      	strb	r1, [r4, #24]
 8006df6:	f000 fe4b 	bl	8007a90 <memchr>
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	d03c      	beq.n	8006e78 <_svfiprintf_r+0x1d8>
 8006dfe:	4b26      	ldr	r3, [pc, #152]	; (8006e98 <_svfiprintf_r+0x1f8>)
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d125      	bne.n	8006e50 <_svfiprintf_r+0x1b0>
 8006e04:	2207      	movs	r2, #7
 8006e06:	9b07      	ldr	r3, [sp, #28]
 8006e08:	3307      	adds	r3, #7
 8006e0a:	4393      	bics	r3, r2
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	9307      	str	r3, [sp, #28]
 8006e10:	6963      	ldr	r3, [r4, #20]
 8006e12:	9a04      	ldr	r2, [sp, #16]
 8006e14:	189b      	adds	r3, r3, r2
 8006e16:	6163      	str	r3, [r4, #20]
 8006e18:	e765      	b.n	8006ce6 <_svfiprintf_r+0x46>
 8006e1a:	4343      	muls	r3, r0
 8006e1c:	0035      	movs	r5, r6
 8006e1e:	2101      	movs	r1, #1
 8006e20:	189b      	adds	r3, r3, r2
 8006e22:	e7a6      	b.n	8006d72 <_svfiprintf_r+0xd2>
 8006e24:	2301      	movs	r3, #1
 8006e26:	425b      	negs	r3, r3
 8006e28:	e7d0      	b.n	8006dcc <_svfiprintf_r+0x12c>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	200a      	movs	r0, #10
 8006e2e:	001a      	movs	r2, r3
 8006e30:	3501      	adds	r5, #1
 8006e32:	6063      	str	r3, [r4, #4]
 8006e34:	7829      	ldrb	r1, [r5, #0]
 8006e36:	1c6e      	adds	r6, r5, #1
 8006e38:	3930      	subs	r1, #48	; 0x30
 8006e3a:	2909      	cmp	r1, #9
 8006e3c:	d903      	bls.n	8006e46 <_svfiprintf_r+0x1a6>
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0c5      	beq.n	8006dce <_svfiprintf_r+0x12e>
 8006e42:	9209      	str	r2, [sp, #36]	; 0x24
 8006e44:	e7c3      	b.n	8006dce <_svfiprintf_r+0x12e>
 8006e46:	4342      	muls	r2, r0
 8006e48:	0035      	movs	r5, r6
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	1852      	adds	r2, r2, r1
 8006e4e:	e7f1      	b.n	8006e34 <_svfiprintf_r+0x194>
 8006e50:	ab07      	add	r3, sp, #28
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	003a      	movs	r2, r7
 8006e56:	0021      	movs	r1, r4
 8006e58:	4b10      	ldr	r3, [pc, #64]	; (8006e9c <_svfiprintf_r+0x1fc>)
 8006e5a:	9803      	ldr	r0, [sp, #12]
 8006e5c:	e000      	b.n	8006e60 <_svfiprintf_r+0x1c0>
 8006e5e:	bf00      	nop
 8006e60:	9004      	str	r0, [sp, #16]
 8006e62:	9b04      	ldr	r3, [sp, #16]
 8006e64:	3301      	adds	r3, #1
 8006e66:	d1d3      	bne.n	8006e10 <_svfiprintf_r+0x170>
 8006e68:	89bb      	ldrh	r3, [r7, #12]
 8006e6a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006e6c:	065b      	lsls	r3, r3, #25
 8006e6e:	d400      	bmi.n	8006e72 <_svfiprintf_r+0x1d2>
 8006e70:	e72d      	b.n	8006cce <_svfiprintf_r+0x2e>
 8006e72:	2001      	movs	r0, #1
 8006e74:	4240      	negs	r0, r0
 8006e76:	e72a      	b.n	8006cce <_svfiprintf_r+0x2e>
 8006e78:	ab07      	add	r3, sp, #28
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	003a      	movs	r2, r7
 8006e7e:	0021      	movs	r1, r4
 8006e80:	4b06      	ldr	r3, [pc, #24]	; (8006e9c <_svfiprintf_r+0x1fc>)
 8006e82:	9803      	ldr	r0, [sp, #12]
 8006e84:	f000 f9de 	bl	8007244 <_printf_i>
 8006e88:	e7ea      	b.n	8006e60 <_svfiprintf_r+0x1c0>
 8006e8a:	46c0      	nop			; (mov r8, r8)
 8006e8c:	08007fe1 	.word	0x08007fe1
 8006e90:	08007fe7 	.word	0x08007fe7
 8006e94:	08007feb 	.word	0x08007feb
 8006e98:	00000000 	.word	0x00000000
 8006e9c:	08006bdd 	.word	0x08006bdd

08006ea0 <__sfputc_r>:
 8006ea0:	6893      	ldr	r3, [r2, #8]
 8006ea2:	b510      	push	{r4, lr}
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	6093      	str	r3, [r2, #8]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	da04      	bge.n	8006eb6 <__sfputc_r+0x16>
 8006eac:	6994      	ldr	r4, [r2, #24]
 8006eae:	42a3      	cmp	r3, r4
 8006eb0:	db07      	blt.n	8006ec2 <__sfputc_r+0x22>
 8006eb2:	290a      	cmp	r1, #10
 8006eb4:	d005      	beq.n	8006ec2 <__sfputc_r+0x22>
 8006eb6:	6813      	ldr	r3, [r2, #0]
 8006eb8:	1c58      	adds	r0, r3, #1
 8006eba:	6010      	str	r0, [r2, #0]
 8006ebc:	7019      	strb	r1, [r3, #0]
 8006ebe:	0008      	movs	r0, r1
 8006ec0:	bd10      	pop	{r4, pc}
 8006ec2:	f000 fad1 	bl	8007468 <__swbuf_r>
 8006ec6:	0001      	movs	r1, r0
 8006ec8:	e7f9      	b.n	8006ebe <__sfputc_r+0x1e>

08006eca <__sfputs_r>:
 8006eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ecc:	0006      	movs	r6, r0
 8006ece:	000f      	movs	r7, r1
 8006ed0:	0014      	movs	r4, r2
 8006ed2:	18d5      	adds	r5, r2, r3
 8006ed4:	42ac      	cmp	r4, r5
 8006ed6:	d101      	bne.n	8006edc <__sfputs_r+0x12>
 8006ed8:	2000      	movs	r0, #0
 8006eda:	e007      	b.n	8006eec <__sfputs_r+0x22>
 8006edc:	7821      	ldrb	r1, [r4, #0]
 8006ede:	003a      	movs	r2, r7
 8006ee0:	0030      	movs	r0, r6
 8006ee2:	f7ff ffdd 	bl	8006ea0 <__sfputc_r>
 8006ee6:	3401      	adds	r4, #1
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	d1f3      	bne.n	8006ed4 <__sfputs_r+0xa>
 8006eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ef0 <_vfiprintf_r>:
 8006ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ef2:	b0a1      	sub	sp, #132	; 0x84
 8006ef4:	0006      	movs	r6, r0
 8006ef6:	000c      	movs	r4, r1
 8006ef8:	001f      	movs	r7, r3
 8006efa:	9203      	str	r2, [sp, #12]
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d004      	beq.n	8006f0a <_vfiprintf_r+0x1a>
 8006f00:	6983      	ldr	r3, [r0, #24]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <_vfiprintf_r+0x1a>
 8006f06:	f000 fcb3 	bl	8007870 <__sinit>
 8006f0a:	4b8e      	ldr	r3, [pc, #568]	; (8007144 <_vfiprintf_r+0x254>)
 8006f0c:	429c      	cmp	r4, r3
 8006f0e:	d11c      	bne.n	8006f4a <_vfiprintf_r+0x5a>
 8006f10:	6874      	ldr	r4, [r6, #4]
 8006f12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f14:	07db      	lsls	r3, r3, #31
 8006f16:	d405      	bmi.n	8006f24 <_vfiprintf_r+0x34>
 8006f18:	89a3      	ldrh	r3, [r4, #12]
 8006f1a:	059b      	lsls	r3, r3, #22
 8006f1c:	d402      	bmi.n	8006f24 <_vfiprintf_r+0x34>
 8006f1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f20:	f000 fd47 	bl	80079b2 <__retarget_lock_acquire_recursive>
 8006f24:	89a3      	ldrh	r3, [r4, #12]
 8006f26:	071b      	lsls	r3, r3, #28
 8006f28:	d502      	bpl.n	8006f30 <_vfiprintf_r+0x40>
 8006f2a:	6923      	ldr	r3, [r4, #16]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d11d      	bne.n	8006f6c <_vfiprintf_r+0x7c>
 8006f30:	0021      	movs	r1, r4
 8006f32:	0030      	movs	r0, r6
 8006f34:	f000 faee 	bl	8007514 <__swsetup_r>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d017      	beq.n	8006f6c <_vfiprintf_r+0x7c>
 8006f3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f3e:	07db      	lsls	r3, r3, #31
 8006f40:	d50d      	bpl.n	8006f5e <_vfiprintf_r+0x6e>
 8006f42:	2001      	movs	r0, #1
 8006f44:	4240      	negs	r0, r0
 8006f46:	b021      	add	sp, #132	; 0x84
 8006f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f4a:	4b7f      	ldr	r3, [pc, #508]	; (8007148 <_vfiprintf_r+0x258>)
 8006f4c:	429c      	cmp	r4, r3
 8006f4e:	d101      	bne.n	8006f54 <_vfiprintf_r+0x64>
 8006f50:	68b4      	ldr	r4, [r6, #8]
 8006f52:	e7de      	b.n	8006f12 <_vfiprintf_r+0x22>
 8006f54:	4b7d      	ldr	r3, [pc, #500]	; (800714c <_vfiprintf_r+0x25c>)
 8006f56:	429c      	cmp	r4, r3
 8006f58:	d1db      	bne.n	8006f12 <_vfiprintf_r+0x22>
 8006f5a:	68f4      	ldr	r4, [r6, #12]
 8006f5c:	e7d9      	b.n	8006f12 <_vfiprintf_r+0x22>
 8006f5e:	89a3      	ldrh	r3, [r4, #12]
 8006f60:	059b      	lsls	r3, r3, #22
 8006f62:	d4ee      	bmi.n	8006f42 <_vfiprintf_r+0x52>
 8006f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f66:	f000 fd25 	bl	80079b4 <__retarget_lock_release_recursive>
 8006f6a:	e7ea      	b.n	8006f42 <_vfiprintf_r+0x52>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	ad08      	add	r5, sp, #32
 8006f70:	616b      	str	r3, [r5, #20]
 8006f72:	3320      	adds	r3, #32
 8006f74:	766b      	strb	r3, [r5, #25]
 8006f76:	3310      	adds	r3, #16
 8006f78:	76ab      	strb	r3, [r5, #26]
 8006f7a:	9707      	str	r7, [sp, #28]
 8006f7c:	9f03      	ldr	r7, [sp, #12]
 8006f7e:	783b      	ldrb	r3, [r7, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <_vfiprintf_r+0x98>
 8006f84:	2b25      	cmp	r3, #37	; 0x25
 8006f86:	d14e      	bne.n	8007026 <_vfiprintf_r+0x136>
 8006f88:	9b03      	ldr	r3, [sp, #12]
 8006f8a:	1afb      	subs	r3, r7, r3
 8006f8c:	9305      	str	r3, [sp, #20]
 8006f8e:	9b03      	ldr	r3, [sp, #12]
 8006f90:	429f      	cmp	r7, r3
 8006f92:	d00d      	beq.n	8006fb0 <_vfiprintf_r+0xc0>
 8006f94:	9b05      	ldr	r3, [sp, #20]
 8006f96:	0021      	movs	r1, r4
 8006f98:	0030      	movs	r0, r6
 8006f9a:	9a03      	ldr	r2, [sp, #12]
 8006f9c:	f7ff ff95 	bl	8006eca <__sfputs_r>
 8006fa0:	1c43      	adds	r3, r0, #1
 8006fa2:	d100      	bne.n	8006fa6 <_vfiprintf_r+0xb6>
 8006fa4:	e0b5      	b.n	8007112 <_vfiprintf_r+0x222>
 8006fa6:	696a      	ldr	r2, [r5, #20]
 8006fa8:	9b05      	ldr	r3, [sp, #20]
 8006faa:	4694      	mov	ip, r2
 8006fac:	4463      	add	r3, ip
 8006fae:	616b      	str	r3, [r5, #20]
 8006fb0:	783b      	ldrb	r3, [r7, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d100      	bne.n	8006fb8 <_vfiprintf_r+0xc8>
 8006fb6:	e0ac      	b.n	8007112 <_vfiprintf_r+0x222>
 8006fb8:	2201      	movs	r2, #1
 8006fba:	1c7b      	adds	r3, r7, #1
 8006fbc:	9303      	str	r3, [sp, #12]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	4252      	negs	r2, r2
 8006fc2:	606a      	str	r2, [r5, #4]
 8006fc4:	a904      	add	r1, sp, #16
 8006fc6:	3254      	adds	r2, #84	; 0x54
 8006fc8:	1852      	adds	r2, r2, r1
 8006fca:	602b      	str	r3, [r5, #0]
 8006fcc:	60eb      	str	r3, [r5, #12]
 8006fce:	60ab      	str	r3, [r5, #8]
 8006fd0:	7013      	strb	r3, [r2, #0]
 8006fd2:	65ab      	str	r3, [r5, #88]	; 0x58
 8006fd4:	9b03      	ldr	r3, [sp, #12]
 8006fd6:	2205      	movs	r2, #5
 8006fd8:	7819      	ldrb	r1, [r3, #0]
 8006fda:	485d      	ldr	r0, [pc, #372]	; (8007150 <_vfiprintf_r+0x260>)
 8006fdc:	f000 fd58 	bl	8007a90 <memchr>
 8006fe0:	9b03      	ldr	r3, [sp, #12]
 8006fe2:	1c5f      	adds	r7, r3, #1
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d120      	bne.n	800702a <_vfiprintf_r+0x13a>
 8006fe8:	682a      	ldr	r2, [r5, #0]
 8006fea:	06d3      	lsls	r3, r2, #27
 8006fec:	d504      	bpl.n	8006ff8 <_vfiprintf_r+0x108>
 8006fee:	2353      	movs	r3, #83	; 0x53
 8006ff0:	a904      	add	r1, sp, #16
 8006ff2:	185b      	adds	r3, r3, r1
 8006ff4:	2120      	movs	r1, #32
 8006ff6:	7019      	strb	r1, [r3, #0]
 8006ff8:	0713      	lsls	r3, r2, #28
 8006ffa:	d504      	bpl.n	8007006 <_vfiprintf_r+0x116>
 8006ffc:	2353      	movs	r3, #83	; 0x53
 8006ffe:	a904      	add	r1, sp, #16
 8007000:	185b      	adds	r3, r3, r1
 8007002:	212b      	movs	r1, #43	; 0x2b
 8007004:	7019      	strb	r1, [r3, #0]
 8007006:	9b03      	ldr	r3, [sp, #12]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	2b2a      	cmp	r3, #42	; 0x2a
 800700c:	d016      	beq.n	800703c <_vfiprintf_r+0x14c>
 800700e:	2100      	movs	r1, #0
 8007010:	68eb      	ldr	r3, [r5, #12]
 8007012:	9f03      	ldr	r7, [sp, #12]
 8007014:	783a      	ldrb	r2, [r7, #0]
 8007016:	1c78      	adds	r0, r7, #1
 8007018:	3a30      	subs	r2, #48	; 0x30
 800701a:	4684      	mov	ip, r0
 800701c:	2a09      	cmp	r2, #9
 800701e:	d94f      	bls.n	80070c0 <_vfiprintf_r+0x1d0>
 8007020:	2900      	cmp	r1, #0
 8007022:	d111      	bne.n	8007048 <_vfiprintf_r+0x158>
 8007024:	e017      	b.n	8007056 <_vfiprintf_r+0x166>
 8007026:	3701      	adds	r7, #1
 8007028:	e7a9      	b.n	8006f7e <_vfiprintf_r+0x8e>
 800702a:	4b49      	ldr	r3, [pc, #292]	; (8007150 <_vfiprintf_r+0x260>)
 800702c:	682a      	ldr	r2, [r5, #0]
 800702e:	1ac0      	subs	r0, r0, r3
 8007030:	2301      	movs	r3, #1
 8007032:	4083      	lsls	r3, r0
 8007034:	4313      	orrs	r3, r2
 8007036:	602b      	str	r3, [r5, #0]
 8007038:	9703      	str	r7, [sp, #12]
 800703a:	e7cb      	b.n	8006fd4 <_vfiprintf_r+0xe4>
 800703c:	9b07      	ldr	r3, [sp, #28]
 800703e:	1d19      	adds	r1, r3, #4
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	9107      	str	r1, [sp, #28]
 8007044:	2b00      	cmp	r3, #0
 8007046:	db01      	blt.n	800704c <_vfiprintf_r+0x15c>
 8007048:	930b      	str	r3, [sp, #44]	; 0x2c
 800704a:	e004      	b.n	8007056 <_vfiprintf_r+0x166>
 800704c:	425b      	negs	r3, r3
 800704e:	60eb      	str	r3, [r5, #12]
 8007050:	2302      	movs	r3, #2
 8007052:	4313      	orrs	r3, r2
 8007054:	602b      	str	r3, [r5, #0]
 8007056:	783b      	ldrb	r3, [r7, #0]
 8007058:	2b2e      	cmp	r3, #46	; 0x2e
 800705a:	d10a      	bne.n	8007072 <_vfiprintf_r+0x182>
 800705c:	787b      	ldrb	r3, [r7, #1]
 800705e:	2b2a      	cmp	r3, #42	; 0x2a
 8007060:	d137      	bne.n	80070d2 <_vfiprintf_r+0x1e2>
 8007062:	9b07      	ldr	r3, [sp, #28]
 8007064:	3702      	adds	r7, #2
 8007066:	1d1a      	adds	r2, r3, #4
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	9207      	str	r2, [sp, #28]
 800706c:	2b00      	cmp	r3, #0
 800706e:	db2d      	blt.n	80070cc <_vfiprintf_r+0x1dc>
 8007070:	9309      	str	r3, [sp, #36]	; 0x24
 8007072:	2203      	movs	r2, #3
 8007074:	7839      	ldrb	r1, [r7, #0]
 8007076:	4837      	ldr	r0, [pc, #220]	; (8007154 <_vfiprintf_r+0x264>)
 8007078:	f000 fd0a 	bl	8007a90 <memchr>
 800707c:	2800      	cmp	r0, #0
 800707e:	d007      	beq.n	8007090 <_vfiprintf_r+0x1a0>
 8007080:	4b34      	ldr	r3, [pc, #208]	; (8007154 <_vfiprintf_r+0x264>)
 8007082:	682a      	ldr	r2, [r5, #0]
 8007084:	1ac0      	subs	r0, r0, r3
 8007086:	2340      	movs	r3, #64	; 0x40
 8007088:	4083      	lsls	r3, r0
 800708a:	4313      	orrs	r3, r2
 800708c:	3701      	adds	r7, #1
 800708e:	602b      	str	r3, [r5, #0]
 8007090:	7839      	ldrb	r1, [r7, #0]
 8007092:	1c7b      	adds	r3, r7, #1
 8007094:	2206      	movs	r2, #6
 8007096:	4830      	ldr	r0, [pc, #192]	; (8007158 <_vfiprintf_r+0x268>)
 8007098:	9303      	str	r3, [sp, #12]
 800709a:	7629      	strb	r1, [r5, #24]
 800709c:	f000 fcf8 	bl	8007a90 <memchr>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d045      	beq.n	8007130 <_vfiprintf_r+0x240>
 80070a4:	4b2d      	ldr	r3, [pc, #180]	; (800715c <_vfiprintf_r+0x26c>)
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d127      	bne.n	80070fa <_vfiprintf_r+0x20a>
 80070aa:	2207      	movs	r2, #7
 80070ac:	9b07      	ldr	r3, [sp, #28]
 80070ae:	3307      	adds	r3, #7
 80070b0:	4393      	bics	r3, r2
 80070b2:	3308      	adds	r3, #8
 80070b4:	9307      	str	r3, [sp, #28]
 80070b6:	696b      	ldr	r3, [r5, #20]
 80070b8:	9a04      	ldr	r2, [sp, #16]
 80070ba:	189b      	adds	r3, r3, r2
 80070bc:	616b      	str	r3, [r5, #20]
 80070be:	e75d      	b.n	8006f7c <_vfiprintf_r+0x8c>
 80070c0:	210a      	movs	r1, #10
 80070c2:	434b      	muls	r3, r1
 80070c4:	4667      	mov	r7, ip
 80070c6:	189b      	adds	r3, r3, r2
 80070c8:	3909      	subs	r1, #9
 80070ca:	e7a3      	b.n	8007014 <_vfiprintf_r+0x124>
 80070cc:	2301      	movs	r3, #1
 80070ce:	425b      	negs	r3, r3
 80070d0:	e7ce      	b.n	8007070 <_vfiprintf_r+0x180>
 80070d2:	2300      	movs	r3, #0
 80070d4:	001a      	movs	r2, r3
 80070d6:	3701      	adds	r7, #1
 80070d8:	606b      	str	r3, [r5, #4]
 80070da:	7839      	ldrb	r1, [r7, #0]
 80070dc:	1c78      	adds	r0, r7, #1
 80070de:	3930      	subs	r1, #48	; 0x30
 80070e0:	4684      	mov	ip, r0
 80070e2:	2909      	cmp	r1, #9
 80070e4:	d903      	bls.n	80070ee <_vfiprintf_r+0x1fe>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0c3      	beq.n	8007072 <_vfiprintf_r+0x182>
 80070ea:	9209      	str	r2, [sp, #36]	; 0x24
 80070ec:	e7c1      	b.n	8007072 <_vfiprintf_r+0x182>
 80070ee:	230a      	movs	r3, #10
 80070f0:	435a      	muls	r2, r3
 80070f2:	4667      	mov	r7, ip
 80070f4:	1852      	adds	r2, r2, r1
 80070f6:	3b09      	subs	r3, #9
 80070f8:	e7ef      	b.n	80070da <_vfiprintf_r+0x1ea>
 80070fa:	ab07      	add	r3, sp, #28
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	0022      	movs	r2, r4
 8007100:	0029      	movs	r1, r5
 8007102:	0030      	movs	r0, r6
 8007104:	4b16      	ldr	r3, [pc, #88]	; (8007160 <_vfiprintf_r+0x270>)
 8007106:	e000      	b.n	800710a <_vfiprintf_r+0x21a>
 8007108:	bf00      	nop
 800710a:	9004      	str	r0, [sp, #16]
 800710c:	9b04      	ldr	r3, [sp, #16]
 800710e:	3301      	adds	r3, #1
 8007110:	d1d1      	bne.n	80070b6 <_vfiprintf_r+0x1c6>
 8007112:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007114:	07db      	lsls	r3, r3, #31
 8007116:	d405      	bmi.n	8007124 <_vfiprintf_r+0x234>
 8007118:	89a3      	ldrh	r3, [r4, #12]
 800711a:	059b      	lsls	r3, r3, #22
 800711c:	d402      	bmi.n	8007124 <_vfiprintf_r+0x234>
 800711e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007120:	f000 fc48 	bl	80079b4 <__retarget_lock_release_recursive>
 8007124:	89a3      	ldrh	r3, [r4, #12]
 8007126:	065b      	lsls	r3, r3, #25
 8007128:	d500      	bpl.n	800712c <_vfiprintf_r+0x23c>
 800712a:	e70a      	b.n	8006f42 <_vfiprintf_r+0x52>
 800712c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800712e:	e70a      	b.n	8006f46 <_vfiprintf_r+0x56>
 8007130:	ab07      	add	r3, sp, #28
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	0022      	movs	r2, r4
 8007136:	0029      	movs	r1, r5
 8007138:	0030      	movs	r0, r6
 800713a:	4b09      	ldr	r3, [pc, #36]	; (8007160 <_vfiprintf_r+0x270>)
 800713c:	f000 f882 	bl	8007244 <_printf_i>
 8007140:	e7e3      	b.n	800710a <_vfiprintf_r+0x21a>
 8007142:	46c0      	nop			; (mov r8, r8)
 8007144:	08008034 	.word	0x08008034
 8007148:	08008054 	.word	0x08008054
 800714c:	08008014 	.word	0x08008014
 8007150:	08007fe1 	.word	0x08007fe1
 8007154:	08007fe7 	.word	0x08007fe7
 8007158:	08007feb 	.word	0x08007feb
 800715c:	00000000 	.word	0x00000000
 8007160:	08006ecb 	.word	0x08006ecb

08007164 <_printf_common>:
 8007164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007166:	0015      	movs	r5, r2
 8007168:	9301      	str	r3, [sp, #4]
 800716a:	688a      	ldr	r2, [r1, #8]
 800716c:	690b      	ldr	r3, [r1, #16]
 800716e:	000c      	movs	r4, r1
 8007170:	9000      	str	r0, [sp, #0]
 8007172:	4293      	cmp	r3, r2
 8007174:	da00      	bge.n	8007178 <_printf_common+0x14>
 8007176:	0013      	movs	r3, r2
 8007178:	0022      	movs	r2, r4
 800717a:	602b      	str	r3, [r5, #0]
 800717c:	3243      	adds	r2, #67	; 0x43
 800717e:	7812      	ldrb	r2, [r2, #0]
 8007180:	2a00      	cmp	r2, #0
 8007182:	d001      	beq.n	8007188 <_printf_common+0x24>
 8007184:	3301      	adds	r3, #1
 8007186:	602b      	str	r3, [r5, #0]
 8007188:	6823      	ldr	r3, [r4, #0]
 800718a:	069b      	lsls	r3, r3, #26
 800718c:	d502      	bpl.n	8007194 <_printf_common+0x30>
 800718e:	682b      	ldr	r3, [r5, #0]
 8007190:	3302      	adds	r3, #2
 8007192:	602b      	str	r3, [r5, #0]
 8007194:	6822      	ldr	r2, [r4, #0]
 8007196:	2306      	movs	r3, #6
 8007198:	0017      	movs	r7, r2
 800719a:	401f      	ands	r7, r3
 800719c:	421a      	tst	r2, r3
 800719e:	d027      	beq.n	80071f0 <_printf_common+0x8c>
 80071a0:	0023      	movs	r3, r4
 80071a2:	3343      	adds	r3, #67	; 0x43
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	1e5a      	subs	r2, r3, #1
 80071a8:	4193      	sbcs	r3, r2
 80071aa:	6822      	ldr	r2, [r4, #0]
 80071ac:	0692      	lsls	r2, r2, #26
 80071ae:	d430      	bmi.n	8007212 <_printf_common+0xae>
 80071b0:	0022      	movs	r2, r4
 80071b2:	9901      	ldr	r1, [sp, #4]
 80071b4:	9800      	ldr	r0, [sp, #0]
 80071b6:	9e08      	ldr	r6, [sp, #32]
 80071b8:	3243      	adds	r2, #67	; 0x43
 80071ba:	47b0      	blx	r6
 80071bc:	1c43      	adds	r3, r0, #1
 80071be:	d025      	beq.n	800720c <_printf_common+0xa8>
 80071c0:	2306      	movs	r3, #6
 80071c2:	6820      	ldr	r0, [r4, #0]
 80071c4:	682a      	ldr	r2, [r5, #0]
 80071c6:	68e1      	ldr	r1, [r4, #12]
 80071c8:	2500      	movs	r5, #0
 80071ca:	4003      	ands	r3, r0
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	d103      	bne.n	80071d8 <_printf_common+0x74>
 80071d0:	1a8d      	subs	r5, r1, r2
 80071d2:	43eb      	mvns	r3, r5
 80071d4:	17db      	asrs	r3, r3, #31
 80071d6:	401d      	ands	r5, r3
 80071d8:	68a3      	ldr	r3, [r4, #8]
 80071da:	6922      	ldr	r2, [r4, #16]
 80071dc:	4293      	cmp	r3, r2
 80071de:	dd01      	ble.n	80071e4 <_printf_common+0x80>
 80071e0:	1a9b      	subs	r3, r3, r2
 80071e2:	18ed      	adds	r5, r5, r3
 80071e4:	2700      	movs	r7, #0
 80071e6:	42bd      	cmp	r5, r7
 80071e8:	d120      	bne.n	800722c <_printf_common+0xc8>
 80071ea:	2000      	movs	r0, #0
 80071ec:	e010      	b.n	8007210 <_printf_common+0xac>
 80071ee:	3701      	adds	r7, #1
 80071f0:	68e3      	ldr	r3, [r4, #12]
 80071f2:	682a      	ldr	r2, [r5, #0]
 80071f4:	1a9b      	subs	r3, r3, r2
 80071f6:	42bb      	cmp	r3, r7
 80071f8:	ddd2      	ble.n	80071a0 <_printf_common+0x3c>
 80071fa:	0022      	movs	r2, r4
 80071fc:	2301      	movs	r3, #1
 80071fe:	9901      	ldr	r1, [sp, #4]
 8007200:	9800      	ldr	r0, [sp, #0]
 8007202:	9e08      	ldr	r6, [sp, #32]
 8007204:	3219      	adds	r2, #25
 8007206:	47b0      	blx	r6
 8007208:	1c43      	adds	r3, r0, #1
 800720a:	d1f0      	bne.n	80071ee <_printf_common+0x8a>
 800720c:	2001      	movs	r0, #1
 800720e:	4240      	negs	r0, r0
 8007210:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007212:	2030      	movs	r0, #48	; 0x30
 8007214:	18e1      	adds	r1, r4, r3
 8007216:	3143      	adds	r1, #67	; 0x43
 8007218:	7008      	strb	r0, [r1, #0]
 800721a:	0021      	movs	r1, r4
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	3145      	adds	r1, #69	; 0x45
 8007220:	7809      	ldrb	r1, [r1, #0]
 8007222:	18a2      	adds	r2, r4, r2
 8007224:	3243      	adds	r2, #67	; 0x43
 8007226:	3302      	adds	r3, #2
 8007228:	7011      	strb	r1, [r2, #0]
 800722a:	e7c1      	b.n	80071b0 <_printf_common+0x4c>
 800722c:	0022      	movs	r2, r4
 800722e:	2301      	movs	r3, #1
 8007230:	9901      	ldr	r1, [sp, #4]
 8007232:	9800      	ldr	r0, [sp, #0]
 8007234:	9e08      	ldr	r6, [sp, #32]
 8007236:	321a      	adds	r2, #26
 8007238:	47b0      	blx	r6
 800723a:	1c43      	adds	r3, r0, #1
 800723c:	d0e6      	beq.n	800720c <_printf_common+0xa8>
 800723e:	3701      	adds	r7, #1
 8007240:	e7d1      	b.n	80071e6 <_printf_common+0x82>
	...

08007244 <_printf_i>:
 8007244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007246:	b08b      	sub	sp, #44	; 0x2c
 8007248:	9206      	str	r2, [sp, #24]
 800724a:	000a      	movs	r2, r1
 800724c:	3243      	adds	r2, #67	; 0x43
 800724e:	9307      	str	r3, [sp, #28]
 8007250:	9005      	str	r0, [sp, #20]
 8007252:	9204      	str	r2, [sp, #16]
 8007254:	7e0a      	ldrb	r2, [r1, #24]
 8007256:	000c      	movs	r4, r1
 8007258:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800725a:	2a78      	cmp	r2, #120	; 0x78
 800725c:	d806      	bhi.n	800726c <_printf_i+0x28>
 800725e:	2a62      	cmp	r2, #98	; 0x62
 8007260:	d808      	bhi.n	8007274 <_printf_i+0x30>
 8007262:	2a00      	cmp	r2, #0
 8007264:	d100      	bne.n	8007268 <_printf_i+0x24>
 8007266:	e0c0      	b.n	80073ea <_printf_i+0x1a6>
 8007268:	2a58      	cmp	r2, #88	; 0x58
 800726a:	d052      	beq.n	8007312 <_printf_i+0xce>
 800726c:	0026      	movs	r6, r4
 800726e:	3642      	adds	r6, #66	; 0x42
 8007270:	7032      	strb	r2, [r6, #0]
 8007272:	e022      	b.n	80072ba <_printf_i+0x76>
 8007274:	0010      	movs	r0, r2
 8007276:	3863      	subs	r0, #99	; 0x63
 8007278:	2815      	cmp	r0, #21
 800727a:	d8f7      	bhi.n	800726c <_printf_i+0x28>
 800727c:	f7f8 ff4c 	bl	8000118 <__gnu_thumb1_case_shi>
 8007280:	001f0016 	.word	0x001f0016
 8007284:	fff6fff6 	.word	0xfff6fff6
 8007288:	fff6fff6 	.word	0xfff6fff6
 800728c:	fff6001f 	.word	0xfff6001f
 8007290:	fff6fff6 	.word	0xfff6fff6
 8007294:	00a8fff6 	.word	0x00a8fff6
 8007298:	009a0036 	.word	0x009a0036
 800729c:	fff6fff6 	.word	0xfff6fff6
 80072a0:	fff600b9 	.word	0xfff600b9
 80072a4:	fff60036 	.word	0xfff60036
 80072a8:	009efff6 	.word	0x009efff6
 80072ac:	0026      	movs	r6, r4
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	3642      	adds	r6, #66	; 0x42
 80072b2:	1d11      	adds	r1, r2, #4
 80072b4:	6019      	str	r1, [r3, #0]
 80072b6:	6813      	ldr	r3, [r2, #0]
 80072b8:	7033      	strb	r3, [r6, #0]
 80072ba:	2301      	movs	r3, #1
 80072bc:	e0a7      	b.n	800740e <_printf_i+0x1ca>
 80072be:	6808      	ldr	r0, [r1, #0]
 80072c0:	6819      	ldr	r1, [r3, #0]
 80072c2:	1d0a      	adds	r2, r1, #4
 80072c4:	0605      	lsls	r5, r0, #24
 80072c6:	d50b      	bpl.n	80072e0 <_printf_i+0x9c>
 80072c8:	680d      	ldr	r5, [r1, #0]
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	2d00      	cmp	r5, #0
 80072ce:	da03      	bge.n	80072d8 <_printf_i+0x94>
 80072d0:	232d      	movs	r3, #45	; 0x2d
 80072d2:	9a04      	ldr	r2, [sp, #16]
 80072d4:	426d      	negs	r5, r5
 80072d6:	7013      	strb	r3, [r2, #0]
 80072d8:	4b61      	ldr	r3, [pc, #388]	; (8007460 <_printf_i+0x21c>)
 80072da:	270a      	movs	r7, #10
 80072dc:	9303      	str	r3, [sp, #12]
 80072de:	e032      	b.n	8007346 <_printf_i+0x102>
 80072e0:	680d      	ldr	r5, [r1, #0]
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	0641      	lsls	r1, r0, #25
 80072e6:	d5f1      	bpl.n	80072cc <_printf_i+0x88>
 80072e8:	b22d      	sxth	r5, r5
 80072ea:	e7ef      	b.n	80072cc <_printf_i+0x88>
 80072ec:	680d      	ldr	r5, [r1, #0]
 80072ee:	6819      	ldr	r1, [r3, #0]
 80072f0:	1d08      	adds	r0, r1, #4
 80072f2:	6018      	str	r0, [r3, #0]
 80072f4:	062e      	lsls	r6, r5, #24
 80072f6:	d501      	bpl.n	80072fc <_printf_i+0xb8>
 80072f8:	680d      	ldr	r5, [r1, #0]
 80072fa:	e003      	b.n	8007304 <_printf_i+0xc0>
 80072fc:	066d      	lsls	r5, r5, #25
 80072fe:	d5fb      	bpl.n	80072f8 <_printf_i+0xb4>
 8007300:	680d      	ldr	r5, [r1, #0]
 8007302:	b2ad      	uxth	r5, r5
 8007304:	4b56      	ldr	r3, [pc, #344]	; (8007460 <_printf_i+0x21c>)
 8007306:	270a      	movs	r7, #10
 8007308:	9303      	str	r3, [sp, #12]
 800730a:	2a6f      	cmp	r2, #111	; 0x6f
 800730c:	d117      	bne.n	800733e <_printf_i+0xfa>
 800730e:	2708      	movs	r7, #8
 8007310:	e015      	b.n	800733e <_printf_i+0xfa>
 8007312:	3145      	adds	r1, #69	; 0x45
 8007314:	700a      	strb	r2, [r1, #0]
 8007316:	4a52      	ldr	r2, [pc, #328]	; (8007460 <_printf_i+0x21c>)
 8007318:	9203      	str	r2, [sp, #12]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	6821      	ldr	r1, [r4, #0]
 800731e:	ca20      	ldmia	r2!, {r5}
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	0608      	lsls	r0, r1, #24
 8007324:	d550      	bpl.n	80073c8 <_printf_i+0x184>
 8007326:	07cb      	lsls	r3, r1, #31
 8007328:	d502      	bpl.n	8007330 <_printf_i+0xec>
 800732a:	2320      	movs	r3, #32
 800732c:	4319      	orrs	r1, r3
 800732e:	6021      	str	r1, [r4, #0]
 8007330:	2710      	movs	r7, #16
 8007332:	2d00      	cmp	r5, #0
 8007334:	d103      	bne.n	800733e <_printf_i+0xfa>
 8007336:	2320      	movs	r3, #32
 8007338:	6822      	ldr	r2, [r4, #0]
 800733a:	439a      	bics	r2, r3
 800733c:	6022      	str	r2, [r4, #0]
 800733e:	0023      	movs	r3, r4
 8007340:	2200      	movs	r2, #0
 8007342:	3343      	adds	r3, #67	; 0x43
 8007344:	701a      	strb	r2, [r3, #0]
 8007346:	6863      	ldr	r3, [r4, #4]
 8007348:	60a3      	str	r3, [r4, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	db03      	blt.n	8007356 <_printf_i+0x112>
 800734e:	2204      	movs	r2, #4
 8007350:	6821      	ldr	r1, [r4, #0]
 8007352:	4391      	bics	r1, r2
 8007354:	6021      	str	r1, [r4, #0]
 8007356:	2d00      	cmp	r5, #0
 8007358:	d102      	bne.n	8007360 <_printf_i+0x11c>
 800735a:	9e04      	ldr	r6, [sp, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00c      	beq.n	800737a <_printf_i+0x136>
 8007360:	9e04      	ldr	r6, [sp, #16]
 8007362:	0028      	movs	r0, r5
 8007364:	0039      	movs	r1, r7
 8007366:	f7f8 ff67 	bl	8000238 <__aeabi_uidivmod>
 800736a:	9b03      	ldr	r3, [sp, #12]
 800736c:	3e01      	subs	r6, #1
 800736e:	5c5b      	ldrb	r3, [r3, r1]
 8007370:	7033      	strb	r3, [r6, #0]
 8007372:	002b      	movs	r3, r5
 8007374:	0005      	movs	r5, r0
 8007376:	429f      	cmp	r7, r3
 8007378:	d9f3      	bls.n	8007362 <_printf_i+0x11e>
 800737a:	2f08      	cmp	r7, #8
 800737c:	d109      	bne.n	8007392 <_printf_i+0x14e>
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	07db      	lsls	r3, r3, #31
 8007382:	d506      	bpl.n	8007392 <_printf_i+0x14e>
 8007384:	6863      	ldr	r3, [r4, #4]
 8007386:	6922      	ldr	r2, [r4, #16]
 8007388:	4293      	cmp	r3, r2
 800738a:	dc02      	bgt.n	8007392 <_printf_i+0x14e>
 800738c:	2330      	movs	r3, #48	; 0x30
 800738e:	3e01      	subs	r6, #1
 8007390:	7033      	strb	r3, [r6, #0]
 8007392:	9b04      	ldr	r3, [sp, #16]
 8007394:	1b9b      	subs	r3, r3, r6
 8007396:	6123      	str	r3, [r4, #16]
 8007398:	9b07      	ldr	r3, [sp, #28]
 800739a:	0021      	movs	r1, r4
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	9805      	ldr	r0, [sp, #20]
 80073a0:	9b06      	ldr	r3, [sp, #24]
 80073a2:	aa09      	add	r2, sp, #36	; 0x24
 80073a4:	f7ff fede 	bl	8007164 <_printf_common>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d135      	bne.n	8007418 <_printf_i+0x1d4>
 80073ac:	2001      	movs	r0, #1
 80073ae:	4240      	negs	r0, r0
 80073b0:	b00b      	add	sp, #44	; 0x2c
 80073b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b4:	2220      	movs	r2, #32
 80073b6:	6809      	ldr	r1, [r1, #0]
 80073b8:	430a      	orrs	r2, r1
 80073ba:	6022      	str	r2, [r4, #0]
 80073bc:	0022      	movs	r2, r4
 80073be:	2178      	movs	r1, #120	; 0x78
 80073c0:	3245      	adds	r2, #69	; 0x45
 80073c2:	7011      	strb	r1, [r2, #0]
 80073c4:	4a27      	ldr	r2, [pc, #156]	; (8007464 <_printf_i+0x220>)
 80073c6:	e7a7      	b.n	8007318 <_printf_i+0xd4>
 80073c8:	0648      	lsls	r0, r1, #25
 80073ca:	d5ac      	bpl.n	8007326 <_printf_i+0xe2>
 80073cc:	b2ad      	uxth	r5, r5
 80073ce:	e7aa      	b.n	8007326 <_printf_i+0xe2>
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	680d      	ldr	r5, [r1, #0]
 80073d4:	1d10      	adds	r0, r2, #4
 80073d6:	6949      	ldr	r1, [r1, #20]
 80073d8:	6018      	str	r0, [r3, #0]
 80073da:	6813      	ldr	r3, [r2, #0]
 80073dc:	062e      	lsls	r6, r5, #24
 80073de:	d501      	bpl.n	80073e4 <_printf_i+0x1a0>
 80073e0:	6019      	str	r1, [r3, #0]
 80073e2:	e002      	b.n	80073ea <_printf_i+0x1a6>
 80073e4:	066d      	lsls	r5, r5, #25
 80073e6:	d5fb      	bpl.n	80073e0 <_printf_i+0x19c>
 80073e8:	8019      	strh	r1, [r3, #0]
 80073ea:	2300      	movs	r3, #0
 80073ec:	9e04      	ldr	r6, [sp, #16]
 80073ee:	6123      	str	r3, [r4, #16]
 80073f0:	e7d2      	b.n	8007398 <_printf_i+0x154>
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	1d11      	adds	r1, r2, #4
 80073f6:	6019      	str	r1, [r3, #0]
 80073f8:	6816      	ldr	r6, [r2, #0]
 80073fa:	2100      	movs	r1, #0
 80073fc:	0030      	movs	r0, r6
 80073fe:	6862      	ldr	r2, [r4, #4]
 8007400:	f000 fb46 	bl	8007a90 <memchr>
 8007404:	2800      	cmp	r0, #0
 8007406:	d001      	beq.n	800740c <_printf_i+0x1c8>
 8007408:	1b80      	subs	r0, r0, r6
 800740a:	6060      	str	r0, [r4, #4]
 800740c:	6863      	ldr	r3, [r4, #4]
 800740e:	6123      	str	r3, [r4, #16]
 8007410:	2300      	movs	r3, #0
 8007412:	9a04      	ldr	r2, [sp, #16]
 8007414:	7013      	strb	r3, [r2, #0]
 8007416:	e7bf      	b.n	8007398 <_printf_i+0x154>
 8007418:	6923      	ldr	r3, [r4, #16]
 800741a:	0032      	movs	r2, r6
 800741c:	9906      	ldr	r1, [sp, #24]
 800741e:	9805      	ldr	r0, [sp, #20]
 8007420:	9d07      	ldr	r5, [sp, #28]
 8007422:	47a8      	blx	r5
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	d0c1      	beq.n	80073ac <_printf_i+0x168>
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	079b      	lsls	r3, r3, #30
 800742c:	d415      	bmi.n	800745a <_printf_i+0x216>
 800742e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007430:	68e0      	ldr	r0, [r4, #12]
 8007432:	4298      	cmp	r0, r3
 8007434:	dabc      	bge.n	80073b0 <_printf_i+0x16c>
 8007436:	0018      	movs	r0, r3
 8007438:	e7ba      	b.n	80073b0 <_printf_i+0x16c>
 800743a:	0022      	movs	r2, r4
 800743c:	2301      	movs	r3, #1
 800743e:	9906      	ldr	r1, [sp, #24]
 8007440:	9805      	ldr	r0, [sp, #20]
 8007442:	9e07      	ldr	r6, [sp, #28]
 8007444:	3219      	adds	r2, #25
 8007446:	47b0      	blx	r6
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	d0af      	beq.n	80073ac <_printf_i+0x168>
 800744c:	3501      	adds	r5, #1
 800744e:	68e3      	ldr	r3, [r4, #12]
 8007450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007452:	1a9b      	subs	r3, r3, r2
 8007454:	42ab      	cmp	r3, r5
 8007456:	dcf0      	bgt.n	800743a <_printf_i+0x1f6>
 8007458:	e7e9      	b.n	800742e <_printf_i+0x1ea>
 800745a:	2500      	movs	r5, #0
 800745c:	e7f7      	b.n	800744e <_printf_i+0x20a>
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	08007ff2 	.word	0x08007ff2
 8007464:	08008003 	.word	0x08008003

08007468 <__swbuf_r>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	0005      	movs	r5, r0
 800746c:	000e      	movs	r6, r1
 800746e:	0014      	movs	r4, r2
 8007470:	2800      	cmp	r0, #0
 8007472:	d004      	beq.n	800747e <__swbuf_r+0x16>
 8007474:	6983      	ldr	r3, [r0, #24]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <__swbuf_r+0x16>
 800747a:	f000 f9f9 	bl	8007870 <__sinit>
 800747e:	4b22      	ldr	r3, [pc, #136]	; (8007508 <__swbuf_r+0xa0>)
 8007480:	429c      	cmp	r4, r3
 8007482:	d12e      	bne.n	80074e2 <__swbuf_r+0x7a>
 8007484:	686c      	ldr	r4, [r5, #4]
 8007486:	69a3      	ldr	r3, [r4, #24]
 8007488:	60a3      	str	r3, [r4, #8]
 800748a:	89a3      	ldrh	r3, [r4, #12]
 800748c:	071b      	lsls	r3, r3, #28
 800748e:	d532      	bpl.n	80074f6 <__swbuf_r+0x8e>
 8007490:	6923      	ldr	r3, [r4, #16]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d02f      	beq.n	80074f6 <__swbuf_r+0x8e>
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	6922      	ldr	r2, [r4, #16]
 800749a:	b2f7      	uxtb	r7, r6
 800749c:	1a98      	subs	r0, r3, r2
 800749e:	6963      	ldr	r3, [r4, #20]
 80074a0:	b2f6      	uxtb	r6, r6
 80074a2:	4283      	cmp	r3, r0
 80074a4:	dc05      	bgt.n	80074b2 <__swbuf_r+0x4a>
 80074a6:	0021      	movs	r1, r4
 80074a8:	0028      	movs	r0, r5
 80074aa:	f000 f93f 	bl	800772c <_fflush_r>
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d127      	bne.n	8007502 <__swbuf_r+0x9a>
 80074b2:	68a3      	ldr	r3, [r4, #8]
 80074b4:	3001      	adds	r0, #1
 80074b6:	3b01      	subs	r3, #1
 80074b8:	60a3      	str	r3, [r4, #8]
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	1c5a      	adds	r2, r3, #1
 80074be:	6022      	str	r2, [r4, #0]
 80074c0:	701f      	strb	r7, [r3, #0]
 80074c2:	6963      	ldr	r3, [r4, #20]
 80074c4:	4283      	cmp	r3, r0
 80074c6:	d004      	beq.n	80074d2 <__swbuf_r+0x6a>
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	07db      	lsls	r3, r3, #31
 80074cc:	d507      	bpl.n	80074de <__swbuf_r+0x76>
 80074ce:	2e0a      	cmp	r6, #10
 80074d0:	d105      	bne.n	80074de <__swbuf_r+0x76>
 80074d2:	0021      	movs	r1, r4
 80074d4:	0028      	movs	r0, r5
 80074d6:	f000 f929 	bl	800772c <_fflush_r>
 80074da:	2800      	cmp	r0, #0
 80074dc:	d111      	bne.n	8007502 <__swbuf_r+0x9a>
 80074de:	0030      	movs	r0, r6
 80074e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074e2:	4b0a      	ldr	r3, [pc, #40]	; (800750c <__swbuf_r+0xa4>)
 80074e4:	429c      	cmp	r4, r3
 80074e6:	d101      	bne.n	80074ec <__swbuf_r+0x84>
 80074e8:	68ac      	ldr	r4, [r5, #8]
 80074ea:	e7cc      	b.n	8007486 <__swbuf_r+0x1e>
 80074ec:	4b08      	ldr	r3, [pc, #32]	; (8007510 <__swbuf_r+0xa8>)
 80074ee:	429c      	cmp	r4, r3
 80074f0:	d1c9      	bne.n	8007486 <__swbuf_r+0x1e>
 80074f2:	68ec      	ldr	r4, [r5, #12]
 80074f4:	e7c7      	b.n	8007486 <__swbuf_r+0x1e>
 80074f6:	0021      	movs	r1, r4
 80074f8:	0028      	movs	r0, r5
 80074fa:	f000 f80b 	bl	8007514 <__swsetup_r>
 80074fe:	2800      	cmp	r0, #0
 8007500:	d0c9      	beq.n	8007496 <__swbuf_r+0x2e>
 8007502:	2601      	movs	r6, #1
 8007504:	4276      	negs	r6, r6
 8007506:	e7ea      	b.n	80074de <__swbuf_r+0x76>
 8007508:	08008034 	.word	0x08008034
 800750c:	08008054 	.word	0x08008054
 8007510:	08008014 	.word	0x08008014

08007514 <__swsetup_r>:
 8007514:	4b37      	ldr	r3, [pc, #220]	; (80075f4 <__swsetup_r+0xe0>)
 8007516:	b570      	push	{r4, r5, r6, lr}
 8007518:	681d      	ldr	r5, [r3, #0]
 800751a:	0006      	movs	r6, r0
 800751c:	000c      	movs	r4, r1
 800751e:	2d00      	cmp	r5, #0
 8007520:	d005      	beq.n	800752e <__swsetup_r+0x1a>
 8007522:	69ab      	ldr	r3, [r5, #24]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d102      	bne.n	800752e <__swsetup_r+0x1a>
 8007528:	0028      	movs	r0, r5
 800752a:	f000 f9a1 	bl	8007870 <__sinit>
 800752e:	4b32      	ldr	r3, [pc, #200]	; (80075f8 <__swsetup_r+0xe4>)
 8007530:	429c      	cmp	r4, r3
 8007532:	d10f      	bne.n	8007554 <__swsetup_r+0x40>
 8007534:	686c      	ldr	r4, [r5, #4]
 8007536:	230c      	movs	r3, #12
 8007538:	5ee2      	ldrsh	r2, [r4, r3]
 800753a:	b293      	uxth	r3, r2
 800753c:	0711      	lsls	r1, r2, #28
 800753e:	d42d      	bmi.n	800759c <__swsetup_r+0x88>
 8007540:	06d9      	lsls	r1, r3, #27
 8007542:	d411      	bmi.n	8007568 <__swsetup_r+0x54>
 8007544:	2309      	movs	r3, #9
 8007546:	2001      	movs	r0, #1
 8007548:	6033      	str	r3, [r6, #0]
 800754a:	3337      	adds	r3, #55	; 0x37
 800754c:	4313      	orrs	r3, r2
 800754e:	81a3      	strh	r3, [r4, #12]
 8007550:	4240      	negs	r0, r0
 8007552:	bd70      	pop	{r4, r5, r6, pc}
 8007554:	4b29      	ldr	r3, [pc, #164]	; (80075fc <__swsetup_r+0xe8>)
 8007556:	429c      	cmp	r4, r3
 8007558:	d101      	bne.n	800755e <__swsetup_r+0x4a>
 800755a:	68ac      	ldr	r4, [r5, #8]
 800755c:	e7eb      	b.n	8007536 <__swsetup_r+0x22>
 800755e:	4b28      	ldr	r3, [pc, #160]	; (8007600 <__swsetup_r+0xec>)
 8007560:	429c      	cmp	r4, r3
 8007562:	d1e8      	bne.n	8007536 <__swsetup_r+0x22>
 8007564:	68ec      	ldr	r4, [r5, #12]
 8007566:	e7e6      	b.n	8007536 <__swsetup_r+0x22>
 8007568:	075b      	lsls	r3, r3, #29
 800756a:	d513      	bpl.n	8007594 <__swsetup_r+0x80>
 800756c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800756e:	2900      	cmp	r1, #0
 8007570:	d008      	beq.n	8007584 <__swsetup_r+0x70>
 8007572:	0023      	movs	r3, r4
 8007574:	3344      	adds	r3, #68	; 0x44
 8007576:	4299      	cmp	r1, r3
 8007578:	d002      	beq.n	8007580 <__swsetup_r+0x6c>
 800757a:	0030      	movs	r0, r6
 800757c:	f7ff f8fc 	bl	8006778 <_free_r>
 8007580:	2300      	movs	r3, #0
 8007582:	6363      	str	r3, [r4, #52]	; 0x34
 8007584:	2224      	movs	r2, #36	; 0x24
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	4393      	bics	r3, r2
 800758a:	81a3      	strh	r3, [r4, #12]
 800758c:	2300      	movs	r3, #0
 800758e:	6063      	str	r3, [r4, #4]
 8007590:	6923      	ldr	r3, [r4, #16]
 8007592:	6023      	str	r3, [r4, #0]
 8007594:	2308      	movs	r3, #8
 8007596:	89a2      	ldrh	r2, [r4, #12]
 8007598:	4313      	orrs	r3, r2
 800759a:	81a3      	strh	r3, [r4, #12]
 800759c:	6923      	ldr	r3, [r4, #16]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10b      	bne.n	80075ba <__swsetup_r+0xa6>
 80075a2:	21a0      	movs	r1, #160	; 0xa0
 80075a4:	2280      	movs	r2, #128	; 0x80
 80075a6:	89a3      	ldrh	r3, [r4, #12]
 80075a8:	0089      	lsls	r1, r1, #2
 80075aa:	0092      	lsls	r2, r2, #2
 80075ac:	400b      	ands	r3, r1
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d003      	beq.n	80075ba <__swsetup_r+0xa6>
 80075b2:	0021      	movs	r1, r4
 80075b4:	0030      	movs	r0, r6
 80075b6:	f000 fa27 	bl	8007a08 <__smakebuf_r>
 80075ba:	220c      	movs	r2, #12
 80075bc:	5ea3      	ldrsh	r3, [r4, r2]
 80075be:	2001      	movs	r0, #1
 80075c0:	001a      	movs	r2, r3
 80075c2:	b299      	uxth	r1, r3
 80075c4:	4002      	ands	r2, r0
 80075c6:	4203      	tst	r3, r0
 80075c8:	d00f      	beq.n	80075ea <__swsetup_r+0xd6>
 80075ca:	2200      	movs	r2, #0
 80075cc:	60a2      	str	r2, [r4, #8]
 80075ce:	6962      	ldr	r2, [r4, #20]
 80075d0:	4252      	negs	r2, r2
 80075d2:	61a2      	str	r2, [r4, #24]
 80075d4:	2000      	movs	r0, #0
 80075d6:	6922      	ldr	r2, [r4, #16]
 80075d8:	4282      	cmp	r2, r0
 80075da:	d1ba      	bne.n	8007552 <__swsetup_r+0x3e>
 80075dc:	060a      	lsls	r2, r1, #24
 80075de:	d5b8      	bpl.n	8007552 <__swsetup_r+0x3e>
 80075e0:	2240      	movs	r2, #64	; 0x40
 80075e2:	4313      	orrs	r3, r2
 80075e4:	81a3      	strh	r3, [r4, #12]
 80075e6:	3801      	subs	r0, #1
 80075e8:	e7b3      	b.n	8007552 <__swsetup_r+0x3e>
 80075ea:	0788      	lsls	r0, r1, #30
 80075ec:	d400      	bmi.n	80075f0 <__swsetup_r+0xdc>
 80075ee:	6962      	ldr	r2, [r4, #20]
 80075f0:	60a2      	str	r2, [r4, #8]
 80075f2:	e7ef      	b.n	80075d4 <__swsetup_r+0xc0>
 80075f4:	2000000c 	.word	0x2000000c
 80075f8:	08008034 	.word	0x08008034
 80075fc:	08008054 	.word	0x08008054
 8007600:	08008014 	.word	0x08008014

08007604 <abort>:
 8007604:	2006      	movs	r0, #6
 8007606:	b510      	push	{r4, lr}
 8007608:	f000 faba 	bl	8007b80 <raise>
 800760c:	2001      	movs	r0, #1
 800760e:	f7fb f951 	bl	80028b4 <_exit>
	...

08007614 <__sflush_r>:
 8007614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007616:	898b      	ldrh	r3, [r1, #12]
 8007618:	0005      	movs	r5, r0
 800761a:	000c      	movs	r4, r1
 800761c:	071a      	lsls	r2, r3, #28
 800761e:	d45f      	bmi.n	80076e0 <__sflush_r+0xcc>
 8007620:	684a      	ldr	r2, [r1, #4]
 8007622:	2a00      	cmp	r2, #0
 8007624:	dc04      	bgt.n	8007630 <__sflush_r+0x1c>
 8007626:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007628:	2a00      	cmp	r2, #0
 800762a:	dc01      	bgt.n	8007630 <__sflush_r+0x1c>
 800762c:	2000      	movs	r0, #0
 800762e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007630:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007632:	2f00      	cmp	r7, #0
 8007634:	d0fa      	beq.n	800762c <__sflush_r+0x18>
 8007636:	2200      	movs	r2, #0
 8007638:	2180      	movs	r1, #128	; 0x80
 800763a:	682e      	ldr	r6, [r5, #0]
 800763c:	602a      	str	r2, [r5, #0]
 800763e:	001a      	movs	r2, r3
 8007640:	0149      	lsls	r1, r1, #5
 8007642:	400a      	ands	r2, r1
 8007644:	420b      	tst	r3, r1
 8007646:	d034      	beq.n	80076b2 <__sflush_r+0x9e>
 8007648:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800764a:	89a3      	ldrh	r3, [r4, #12]
 800764c:	075b      	lsls	r3, r3, #29
 800764e:	d506      	bpl.n	800765e <__sflush_r+0x4a>
 8007650:	6863      	ldr	r3, [r4, #4]
 8007652:	1ac0      	subs	r0, r0, r3
 8007654:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007656:	2b00      	cmp	r3, #0
 8007658:	d001      	beq.n	800765e <__sflush_r+0x4a>
 800765a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800765c:	1ac0      	subs	r0, r0, r3
 800765e:	0002      	movs	r2, r0
 8007660:	6a21      	ldr	r1, [r4, #32]
 8007662:	2300      	movs	r3, #0
 8007664:	0028      	movs	r0, r5
 8007666:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007668:	47b8      	blx	r7
 800766a:	89a1      	ldrh	r1, [r4, #12]
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	d106      	bne.n	800767e <__sflush_r+0x6a>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	2b1d      	cmp	r3, #29
 8007674:	d831      	bhi.n	80076da <__sflush_r+0xc6>
 8007676:	4a2c      	ldr	r2, [pc, #176]	; (8007728 <__sflush_r+0x114>)
 8007678:	40da      	lsrs	r2, r3
 800767a:	07d3      	lsls	r3, r2, #31
 800767c:	d52d      	bpl.n	80076da <__sflush_r+0xc6>
 800767e:	2300      	movs	r3, #0
 8007680:	6063      	str	r3, [r4, #4]
 8007682:	6923      	ldr	r3, [r4, #16]
 8007684:	6023      	str	r3, [r4, #0]
 8007686:	04cb      	lsls	r3, r1, #19
 8007688:	d505      	bpl.n	8007696 <__sflush_r+0x82>
 800768a:	1c43      	adds	r3, r0, #1
 800768c:	d102      	bne.n	8007694 <__sflush_r+0x80>
 800768e:	682b      	ldr	r3, [r5, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d100      	bne.n	8007696 <__sflush_r+0x82>
 8007694:	6560      	str	r0, [r4, #84]	; 0x54
 8007696:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007698:	602e      	str	r6, [r5, #0]
 800769a:	2900      	cmp	r1, #0
 800769c:	d0c6      	beq.n	800762c <__sflush_r+0x18>
 800769e:	0023      	movs	r3, r4
 80076a0:	3344      	adds	r3, #68	; 0x44
 80076a2:	4299      	cmp	r1, r3
 80076a4:	d002      	beq.n	80076ac <__sflush_r+0x98>
 80076a6:	0028      	movs	r0, r5
 80076a8:	f7ff f866 	bl	8006778 <_free_r>
 80076ac:	2000      	movs	r0, #0
 80076ae:	6360      	str	r0, [r4, #52]	; 0x34
 80076b0:	e7bd      	b.n	800762e <__sflush_r+0x1a>
 80076b2:	2301      	movs	r3, #1
 80076b4:	0028      	movs	r0, r5
 80076b6:	6a21      	ldr	r1, [r4, #32]
 80076b8:	47b8      	blx	r7
 80076ba:	1c43      	adds	r3, r0, #1
 80076bc:	d1c5      	bne.n	800764a <__sflush_r+0x36>
 80076be:	682b      	ldr	r3, [r5, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d0c2      	beq.n	800764a <__sflush_r+0x36>
 80076c4:	2b1d      	cmp	r3, #29
 80076c6:	d001      	beq.n	80076cc <__sflush_r+0xb8>
 80076c8:	2b16      	cmp	r3, #22
 80076ca:	d101      	bne.n	80076d0 <__sflush_r+0xbc>
 80076cc:	602e      	str	r6, [r5, #0]
 80076ce:	e7ad      	b.n	800762c <__sflush_r+0x18>
 80076d0:	2340      	movs	r3, #64	; 0x40
 80076d2:	89a2      	ldrh	r2, [r4, #12]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	81a3      	strh	r3, [r4, #12]
 80076d8:	e7a9      	b.n	800762e <__sflush_r+0x1a>
 80076da:	2340      	movs	r3, #64	; 0x40
 80076dc:	430b      	orrs	r3, r1
 80076de:	e7fa      	b.n	80076d6 <__sflush_r+0xc2>
 80076e0:	690f      	ldr	r7, [r1, #16]
 80076e2:	2f00      	cmp	r7, #0
 80076e4:	d0a2      	beq.n	800762c <__sflush_r+0x18>
 80076e6:	680a      	ldr	r2, [r1, #0]
 80076e8:	600f      	str	r7, [r1, #0]
 80076ea:	1bd2      	subs	r2, r2, r7
 80076ec:	9201      	str	r2, [sp, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	079b      	lsls	r3, r3, #30
 80076f2:	d100      	bne.n	80076f6 <__sflush_r+0xe2>
 80076f4:	694a      	ldr	r2, [r1, #20]
 80076f6:	60a2      	str	r2, [r4, #8]
 80076f8:	9b01      	ldr	r3, [sp, #4]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	dc00      	bgt.n	8007700 <__sflush_r+0xec>
 80076fe:	e795      	b.n	800762c <__sflush_r+0x18>
 8007700:	003a      	movs	r2, r7
 8007702:	0028      	movs	r0, r5
 8007704:	9b01      	ldr	r3, [sp, #4]
 8007706:	6a21      	ldr	r1, [r4, #32]
 8007708:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800770a:	47b0      	blx	r6
 800770c:	2800      	cmp	r0, #0
 800770e:	dc06      	bgt.n	800771e <__sflush_r+0x10a>
 8007710:	2340      	movs	r3, #64	; 0x40
 8007712:	2001      	movs	r0, #1
 8007714:	89a2      	ldrh	r2, [r4, #12]
 8007716:	4240      	negs	r0, r0
 8007718:	4313      	orrs	r3, r2
 800771a:	81a3      	strh	r3, [r4, #12]
 800771c:	e787      	b.n	800762e <__sflush_r+0x1a>
 800771e:	9b01      	ldr	r3, [sp, #4]
 8007720:	183f      	adds	r7, r7, r0
 8007722:	1a1b      	subs	r3, r3, r0
 8007724:	9301      	str	r3, [sp, #4]
 8007726:	e7e7      	b.n	80076f8 <__sflush_r+0xe4>
 8007728:	20400001 	.word	0x20400001

0800772c <_fflush_r>:
 800772c:	690b      	ldr	r3, [r1, #16]
 800772e:	b570      	push	{r4, r5, r6, lr}
 8007730:	0005      	movs	r5, r0
 8007732:	000c      	movs	r4, r1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d102      	bne.n	800773e <_fflush_r+0x12>
 8007738:	2500      	movs	r5, #0
 800773a:	0028      	movs	r0, r5
 800773c:	bd70      	pop	{r4, r5, r6, pc}
 800773e:	2800      	cmp	r0, #0
 8007740:	d004      	beq.n	800774c <_fflush_r+0x20>
 8007742:	6983      	ldr	r3, [r0, #24]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d101      	bne.n	800774c <_fflush_r+0x20>
 8007748:	f000 f892 	bl	8007870 <__sinit>
 800774c:	4b14      	ldr	r3, [pc, #80]	; (80077a0 <_fflush_r+0x74>)
 800774e:	429c      	cmp	r4, r3
 8007750:	d11b      	bne.n	800778a <_fflush_r+0x5e>
 8007752:	686c      	ldr	r4, [r5, #4]
 8007754:	220c      	movs	r2, #12
 8007756:	5ea3      	ldrsh	r3, [r4, r2]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d0ed      	beq.n	8007738 <_fflush_r+0xc>
 800775c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800775e:	07d2      	lsls	r2, r2, #31
 8007760:	d404      	bmi.n	800776c <_fflush_r+0x40>
 8007762:	059b      	lsls	r3, r3, #22
 8007764:	d402      	bmi.n	800776c <_fflush_r+0x40>
 8007766:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007768:	f000 f923 	bl	80079b2 <__retarget_lock_acquire_recursive>
 800776c:	0028      	movs	r0, r5
 800776e:	0021      	movs	r1, r4
 8007770:	f7ff ff50 	bl	8007614 <__sflush_r>
 8007774:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007776:	0005      	movs	r5, r0
 8007778:	07db      	lsls	r3, r3, #31
 800777a:	d4de      	bmi.n	800773a <_fflush_r+0xe>
 800777c:	89a3      	ldrh	r3, [r4, #12]
 800777e:	059b      	lsls	r3, r3, #22
 8007780:	d4db      	bmi.n	800773a <_fflush_r+0xe>
 8007782:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007784:	f000 f916 	bl	80079b4 <__retarget_lock_release_recursive>
 8007788:	e7d7      	b.n	800773a <_fflush_r+0xe>
 800778a:	4b06      	ldr	r3, [pc, #24]	; (80077a4 <_fflush_r+0x78>)
 800778c:	429c      	cmp	r4, r3
 800778e:	d101      	bne.n	8007794 <_fflush_r+0x68>
 8007790:	68ac      	ldr	r4, [r5, #8]
 8007792:	e7df      	b.n	8007754 <_fflush_r+0x28>
 8007794:	4b04      	ldr	r3, [pc, #16]	; (80077a8 <_fflush_r+0x7c>)
 8007796:	429c      	cmp	r4, r3
 8007798:	d1dc      	bne.n	8007754 <_fflush_r+0x28>
 800779a:	68ec      	ldr	r4, [r5, #12]
 800779c:	e7da      	b.n	8007754 <_fflush_r+0x28>
 800779e:	46c0      	nop			; (mov r8, r8)
 80077a0:	08008034 	.word	0x08008034
 80077a4:	08008054 	.word	0x08008054
 80077a8:	08008014 	.word	0x08008014

080077ac <std>:
 80077ac:	2300      	movs	r3, #0
 80077ae:	b510      	push	{r4, lr}
 80077b0:	0004      	movs	r4, r0
 80077b2:	6003      	str	r3, [r0, #0]
 80077b4:	6043      	str	r3, [r0, #4]
 80077b6:	6083      	str	r3, [r0, #8]
 80077b8:	8181      	strh	r1, [r0, #12]
 80077ba:	6643      	str	r3, [r0, #100]	; 0x64
 80077bc:	0019      	movs	r1, r3
 80077be:	81c2      	strh	r2, [r0, #14]
 80077c0:	6103      	str	r3, [r0, #16]
 80077c2:	6143      	str	r3, [r0, #20]
 80077c4:	6183      	str	r3, [r0, #24]
 80077c6:	2208      	movs	r2, #8
 80077c8:	305c      	adds	r0, #92	; 0x5c
 80077ca:	f7fe ffcd 	bl	8006768 <memset>
 80077ce:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <std+0x38>)
 80077d0:	6263      	str	r3, [r4, #36]	; 0x24
 80077d2:	4b05      	ldr	r3, [pc, #20]	; (80077e8 <std+0x3c>)
 80077d4:	6224      	str	r4, [r4, #32]
 80077d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80077d8:	4b04      	ldr	r3, [pc, #16]	; (80077ec <std+0x40>)
 80077da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077dc:	4b04      	ldr	r3, [pc, #16]	; (80077f0 <std+0x44>)
 80077de:	6323      	str	r3, [r4, #48]	; 0x30
 80077e0:	bd10      	pop	{r4, pc}
 80077e2:	46c0      	nop			; (mov r8, r8)
 80077e4:	08007bc1 	.word	0x08007bc1
 80077e8:	08007be9 	.word	0x08007be9
 80077ec:	08007c21 	.word	0x08007c21
 80077f0:	08007c4d 	.word	0x08007c4d

080077f4 <_cleanup_r>:
 80077f4:	b510      	push	{r4, lr}
 80077f6:	4902      	ldr	r1, [pc, #8]	; (8007800 <_cleanup_r+0xc>)
 80077f8:	f000 f8ba 	bl	8007970 <_fwalk_reent>
 80077fc:	bd10      	pop	{r4, pc}
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	0800772d 	.word	0x0800772d

08007804 <__sfmoreglue>:
 8007804:	b570      	push	{r4, r5, r6, lr}
 8007806:	2568      	movs	r5, #104	; 0x68
 8007808:	1e4a      	subs	r2, r1, #1
 800780a:	4355      	muls	r5, r2
 800780c:	000e      	movs	r6, r1
 800780e:	0029      	movs	r1, r5
 8007810:	3174      	adds	r1, #116	; 0x74
 8007812:	f7fe fffb 	bl	800680c <_malloc_r>
 8007816:	1e04      	subs	r4, r0, #0
 8007818:	d008      	beq.n	800782c <__sfmoreglue+0x28>
 800781a:	2100      	movs	r1, #0
 800781c:	002a      	movs	r2, r5
 800781e:	6001      	str	r1, [r0, #0]
 8007820:	6046      	str	r6, [r0, #4]
 8007822:	300c      	adds	r0, #12
 8007824:	60a0      	str	r0, [r4, #8]
 8007826:	3268      	adds	r2, #104	; 0x68
 8007828:	f7fe ff9e 	bl	8006768 <memset>
 800782c:	0020      	movs	r0, r4
 800782e:	bd70      	pop	{r4, r5, r6, pc}

08007830 <__sfp_lock_acquire>:
 8007830:	b510      	push	{r4, lr}
 8007832:	4802      	ldr	r0, [pc, #8]	; (800783c <__sfp_lock_acquire+0xc>)
 8007834:	f000 f8bd 	bl	80079b2 <__retarget_lock_acquire_recursive>
 8007838:	bd10      	pop	{r4, pc}
 800783a:	46c0      	nop			; (mov r8, r8)
 800783c:	200002c0 	.word	0x200002c0

08007840 <__sfp_lock_release>:
 8007840:	b510      	push	{r4, lr}
 8007842:	4802      	ldr	r0, [pc, #8]	; (800784c <__sfp_lock_release+0xc>)
 8007844:	f000 f8b6 	bl	80079b4 <__retarget_lock_release_recursive>
 8007848:	bd10      	pop	{r4, pc}
 800784a:	46c0      	nop			; (mov r8, r8)
 800784c:	200002c0 	.word	0x200002c0

08007850 <__sinit_lock_acquire>:
 8007850:	b510      	push	{r4, lr}
 8007852:	4802      	ldr	r0, [pc, #8]	; (800785c <__sinit_lock_acquire+0xc>)
 8007854:	f000 f8ad 	bl	80079b2 <__retarget_lock_acquire_recursive>
 8007858:	bd10      	pop	{r4, pc}
 800785a:	46c0      	nop			; (mov r8, r8)
 800785c:	200002bb 	.word	0x200002bb

08007860 <__sinit_lock_release>:
 8007860:	b510      	push	{r4, lr}
 8007862:	4802      	ldr	r0, [pc, #8]	; (800786c <__sinit_lock_release+0xc>)
 8007864:	f000 f8a6 	bl	80079b4 <__retarget_lock_release_recursive>
 8007868:	bd10      	pop	{r4, pc}
 800786a:	46c0      	nop			; (mov r8, r8)
 800786c:	200002bb 	.word	0x200002bb

08007870 <__sinit>:
 8007870:	b513      	push	{r0, r1, r4, lr}
 8007872:	0004      	movs	r4, r0
 8007874:	f7ff ffec 	bl	8007850 <__sinit_lock_acquire>
 8007878:	69a3      	ldr	r3, [r4, #24]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <__sinit+0x14>
 800787e:	f7ff ffef 	bl	8007860 <__sinit_lock_release>
 8007882:	bd13      	pop	{r0, r1, r4, pc}
 8007884:	64a3      	str	r3, [r4, #72]	; 0x48
 8007886:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007888:	6523      	str	r3, [r4, #80]	; 0x50
 800788a:	4b13      	ldr	r3, [pc, #76]	; (80078d8 <__sinit+0x68>)
 800788c:	4a13      	ldr	r2, [pc, #76]	; (80078dc <__sinit+0x6c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	62a2      	str	r2, [r4, #40]	; 0x28
 8007892:	9301      	str	r3, [sp, #4]
 8007894:	42a3      	cmp	r3, r4
 8007896:	d101      	bne.n	800789c <__sinit+0x2c>
 8007898:	2301      	movs	r3, #1
 800789a:	61a3      	str	r3, [r4, #24]
 800789c:	0020      	movs	r0, r4
 800789e:	f000 f81f 	bl	80078e0 <__sfp>
 80078a2:	6060      	str	r0, [r4, #4]
 80078a4:	0020      	movs	r0, r4
 80078a6:	f000 f81b 	bl	80078e0 <__sfp>
 80078aa:	60a0      	str	r0, [r4, #8]
 80078ac:	0020      	movs	r0, r4
 80078ae:	f000 f817 	bl	80078e0 <__sfp>
 80078b2:	2200      	movs	r2, #0
 80078b4:	2104      	movs	r1, #4
 80078b6:	60e0      	str	r0, [r4, #12]
 80078b8:	6860      	ldr	r0, [r4, #4]
 80078ba:	f7ff ff77 	bl	80077ac <std>
 80078be:	2201      	movs	r2, #1
 80078c0:	2109      	movs	r1, #9
 80078c2:	68a0      	ldr	r0, [r4, #8]
 80078c4:	f7ff ff72 	bl	80077ac <std>
 80078c8:	2202      	movs	r2, #2
 80078ca:	2112      	movs	r1, #18
 80078cc:	68e0      	ldr	r0, [r4, #12]
 80078ce:	f7ff ff6d 	bl	80077ac <std>
 80078d2:	2301      	movs	r3, #1
 80078d4:	61a3      	str	r3, [r4, #24]
 80078d6:	e7d2      	b.n	800787e <__sinit+0xe>
 80078d8:	08007e28 	.word	0x08007e28
 80078dc:	080077f5 	.word	0x080077f5

080078e0 <__sfp>:
 80078e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e2:	0007      	movs	r7, r0
 80078e4:	f7ff ffa4 	bl	8007830 <__sfp_lock_acquire>
 80078e8:	4b1f      	ldr	r3, [pc, #124]	; (8007968 <__sfp+0x88>)
 80078ea:	681e      	ldr	r6, [r3, #0]
 80078ec:	69b3      	ldr	r3, [r6, #24]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d102      	bne.n	80078f8 <__sfp+0x18>
 80078f2:	0030      	movs	r0, r6
 80078f4:	f7ff ffbc 	bl	8007870 <__sinit>
 80078f8:	3648      	adds	r6, #72	; 0x48
 80078fa:	68b4      	ldr	r4, [r6, #8]
 80078fc:	6873      	ldr	r3, [r6, #4]
 80078fe:	3b01      	subs	r3, #1
 8007900:	d504      	bpl.n	800790c <__sfp+0x2c>
 8007902:	6833      	ldr	r3, [r6, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d022      	beq.n	800794e <__sfp+0x6e>
 8007908:	6836      	ldr	r6, [r6, #0]
 800790a:	e7f6      	b.n	80078fa <__sfp+0x1a>
 800790c:	220c      	movs	r2, #12
 800790e:	5ea5      	ldrsh	r5, [r4, r2]
 8007910:	2d00      	cmp	r5, #0
 8007912:	d11a      	bne.n	800794a <__sfp+0x6a>
 8007914:	0020      	movs	r0, r4
 8007916:	4b15      	ldr	r3, [pc, #84]	; (800796c <__sfp+0x8c>)
 8007918:	3058      	adds	r0, #88	; 0x58
 800791a:	60e3      	str	r3, [r4, #12]
 800791c:	6665      	str	r5, [r4, #100]	; 0x64
 800791e:	f000 f847 	bl	80079b0 <__retarget_lock_init_recursive>
 8007922:	f7ff ff8d 	bl	8007840 <__sfp_lock_release>
 8007926:	0020      	movs	r0, r4
 8007928:	2208      	movs	r2, #8
 800792a:	0029      	movs	r1, r5
 800792c:	6025      	str	r5, [r4, #0]
 800792e:	60a5      	str	r5, [r4, #8]
 8007930:	6065      	str	r5, [r4, #4]
 8007932:	6125      	str	r5, [r4, #16]
 8007934:	6165      	str	r5, [r4, #20]
 8007936:	61a5      	str	r5, [r4, #24]
 8007938:	305c      	adds	r0, #92	; 0x5c
 800793a:	f7fe ff15 	bl	8006768 <memset>
 800793e:	6365      	str	r5, [r4, #52]	; 0x34
 8007940:	63a5      	str	r5, [r4, #56]	; 0x38
 8007942:	64a5      	str	r5, [r4, #72]	; 0x48
 8007944:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007946:	0020      	movs	r0, r4
 8007948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800794a:	3468      	adds	r4, #104	; 0x68
 800794c:	e7d7      	b.n	80078fe <__sfp+0x1e>
 800794e:	2104      	movs	r1, #4
 8007950:	0038      	movs	r0, r7
 8007952:	f7ff ff57 	bl	8007804 <__sfmoreglue>
 8007956:	1e04      	subs	r4, r0, #0
 8007958:	6030      	str	r0, [r6, #0]
 800795a:	d1d5      	bne.n	8007908 <__sfp+0x28>
 800795c:	f7ff ff70 	bl	8007840 <__sfp_lock_release>
 8007960:	230c      	movs	r3, #12
 8007962:	603b      	str	r3, [r7, #0]
 8007964:	e7ef      	b.n	8007946 <__sfp+0x66>
 8007966:	46c0      	nop			; (mov r8, r8)
 8007968:	08007e28 	.word	0x08007e28
 800796c:	ffff0001 	.word	0xffff0001

08007970 <_fwalk_reent>:
 8007970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007972:	0004      	movs	r4, r0
 8007974:	0006      	movs	r6, r0
 8007976:	2700      	movs	r7, #0
 8007978:	9101      	str	r1, [sp, #4]
 800797a:	3448      	adds	r4, #72	; 0x48
 800797c:	6863      	ldr	r3, [r4, #4]
 800797e:	68a5      	ldr	r5, [r4, #8]
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	9b00      	ldr	r3, [sp, #0]
 8007984:	3b01      	subs	r3, #1
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	d504      	bpl.n	8007994 <_fwalk_reent+0x24>
 800798a:	6824      	ldr	r4, [r4, #0]
 800798c:	2c00      	cmp	r4, #0
 800798e:	d1f5      	bne.n	800797c <_fwalk_reent+0xc>
 8007990:	0038      	movs	r0, r7
 8007992:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007994:	89ab      	ldrh	r3, [r5, #12]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d908      	bls.n	80079ac <_fwalk_reent+0x3c>
 800799a:	220e      	movs	r2, #14
 800799c:	5eab      	ldrsh	r3, [r5, r2]
 800799e:	3301      	adds	r3, #1
 80079a0:	d004      	beq.n	80079ac <_fwalk_reent+0x3c>
 80079a2:	0029      	movs	r1, r5
 80079a4:	0030      	movs	r0, r6
 80079a6:	9b01      	ldr	r3, [sp, #4]
 80079a8:	4798      	blx	r3
 80079aa:	4307      	orrs	r7, r0
 80079ac:	3568      	adds	r5, #104	; 0x68
 80079ae:	e7e8      	b.n	8007982 <_fwalk_reent+0x12>

080079b0 <__retarget_lock_init_recursive>:
 80079b0:	4770      	bx	lr

080079b2 <__retarget_lock_acquire_recursive>:
 80079b2:	4770      	bx	lr

080079b4 <__retarget_lock_release_recursive>:
 80079b4:	4770      	bx	lr
	...

080079b8 <__swhatbuf_r>:
 80079b8:	b570      	push	{r4, r5, r6, lr}
 80079ba:	000e      	movs	r6, r1
 80079bc:	001d      	movs	r5, r3
 80079be:	230e      	movs	r3, #14
 80079c0:	5ec9      	ldrsh	r1, [r1, r3]
 80079c2:	0014      	movs	r4, r2
 80079c4:	b096      	sub	sp, #88	; 0x58
 80079c6:	2900      	cmp	r1, #0
 80079c8:	da07      	bge.n	80079da <__swhatbuf_r+0x22>
 80079ca:	2300      	movs	r3, #0
 80079cc:	602b      	str	r3, [r5, #0]
 80079ce:	89b3      	ldrh	r3, [r6, #12]
 80079d0:	061b      	lsls	r3, r3, #24
 80079d2:	d411      	bmi.n	80079f8 <__swhatbuf_r+0x40>
 80079d4:	2380      	movs	r3, #128	; 0x80
 80079d6:	00db      	lsls	r3, r3, #3
 80079d8:	e00f      	b.n	80079fa <__swhatbuf_r+0x42>
 80079da:	466a      	mov	r2, sp
 80079dc:	f000 f962 	bl	8007ca4 <_fstat_r>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	dbf2      	blt.n	80079ca <__swhatbuf_r+0x12>
 80079e4:	23f0      	movs	r3, #240	; 0xf0
 80079e6:	9901      	ldr	r1, [sp, #4]
 80079e8:	021b      	lsls	r3, r3, #8
 80079ea:	4019      	ands	r1, r3
 80079ec:	4b05      	ldr	r3, [pc, #20]	; (8007a04 <__swhatbuf_r+0x4c>)
 80079ee:	18c9      	adds	r1, r1, r3
 80079f0:	424b      	negs	r3, r1
 80079f2:	4159      	adcs	r1, r3
 80079f4:	6029      	str	r1, [r5, #0]
 80079f6:	e7ed      	b.n	80079d4 <__swhatbuf_r+0x1c>
 80079f8:	2340      	movs	r3, #64	; 0x40
 80079fa:	2000      	movs	r0, #0
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	b016      	add	sp, #88	; 0x58
 8007a00:	bd70      	pop	{r4, r5, r6, pc}
 8007a02:	46c0      	nop			; (mov r8, r8)
 8007a04:	ffffe000 	.word	0xffffe000

08007a08 <__smakebuf_r>:
 8007a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a0a:	2602      	movs	r6, #2
 8007a0c:	898b      	ldrh	r3, [r1, #12]
 8007a0e:	0005      	movs	r5, r0
 8007a10:	000c      	movs	r4, r1
 8007a12:	4233      	tst	r3, r6
 8007a14:	d006      	beq.n	8007a24 <__smakebuf_r+0x1c>
 8007a16:	0023      	movs	r3, r4
 8007a18:	3347      	adds	r3, #71	; 0x47
 8007a1a:	6023      	str	r3, [r4, #0]
 8007a1c:	6123      	str	r3, [r4, #16]
 8007a1e:	2301      	movs	r3, #1
 8007a20:	6163      	str	r3, [r4, #20]
 8007a22:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007a24:	466a      	mov	r2, sp
 8007a26:	ab01      	add	r3, sp, #4
 8007a28:	f7ff ffc6 	bl	80079b8 <__swhatbuf_r>
 8007a2c:	9900      	ldr	r1, [sp, #0]
 8007a2e:	0007      	movs	r7, r0
 8007a30:	0028      	movs	r0, r5
 8007a32:	f7fe feeb 	bl	800680c <_malloc_r>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d108      	bne.n	8007a4c <__smakebuf_r+0x44>
 8007a3a:	220c      	movs	r2, #12
 8007a3c:	5ea3      	ldrsh	r3, [r4, r2]
 8007a3e:	059a      	lsls	r2, r3, #22
 8007a40:	d4ef      	bmi.n	8007a22 <__smakebuf_r+0x1a>
 8007a42:	2203      	movs	r2, #3
 8007a44:	4393      	bics	r3, r2
 8007a46:	431e      	orrs	r6, r3
 8007a48:	81a6      	strh	r6, [r4, #12]
 8007a4a:	e7e4      	b.n	8007a16 <__smakebuf_r+0xe>
 8007a4c:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <__smakebuf_r+0x84>)
 8007a4e:	62ab      	str	r3, [r5, #40]	; 0x28
 8007a50:	2380      	movs	r3, #128	; 0x80
 8007a52:	89a2      	ldrh	r2, [r4, #12]
 8007a54:	6020      	str	r0, [r4, #0]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	81a3      	strh	r3, [r4, #12]
 8007a5a:	9b00      	ldr	r3, [sp, #0]
 8007a5c:	6120      	str	r0, [r4, #16]
 8007a5e:	6163      	str	r3, [r4, #20]
 8007a60:	9b01      	ldr	r3, [sp, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00d      	beq.n	8007a82 <__smakebuf_r+0x7a>
 8007a66:	0028      	movs	r0, r5
 8007a68:	230e      	movs	r3, #14
 8007a6a:	5ee1      	ldrsh	r1, [r4, r3]
 8007a6c:	f000 f92c 	bl	8007cc8 <_isatty_r>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d006      	beq.n	8007a82 <__smakebuf_r+0x7a>
 8007a74:	2203      	movs	r2, #3
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	4393      	bics	r3, r2
 8007a7a:	001a      	movs	r2, r3
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	81a3      	strh	r3, [r4, #12]
 8007a82:	89a0      	ldrh	r0, [r4, #12]
 8007a84:	4307      	orrs	r7, r0
 8007a86:	81a7      	strh	r7, [r4, #12]
 8007a88:	e7cb      	b.n	8007a22 <__smakebuf_r+0x1a>
 8007a8a:	46c0      	nop			; (mov r8, r8)
 8007a8c:	080077f5 	.word	0x080077f5

08007a90 <memchr>:
 8007a90:	b2c9      	uxtb	r1, r1
 8007a92:	1882      	adds	r2, r0, r2
 8007a94:	4290      	cmp	r0, r2
 8007a96:	d101      	bne.n	8007a9c <memchr+0xc>
 8007a98:	2000      	movs	r0, #0
 8007a9a:	4770      	bx	lr
 8007a9c:	7803      	ldrb	r3, [r0, #0]
 8007a9e:	428b      	cmp	r3, r1
 8007aa0:	d0fb      	beq.n	8007a9a <memchr+0xa>
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	e7f6      	b.n	8007a94 <memchr+0x4>

08007aa6 <memcpy>:
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	b510      	push	{r4, lr}
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d100      	bne.n	8007ab0 <memcpy+0xa>
 8007aae:	bd10      	pop	{r4, pc}
 8007ab0:	5ccc      	ldrb	r4, [r1, r3]
 8007ab2:	54c4      	strb	r4, [r0, r3]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	e7f8      	b.n	8007aaa <memcpy+0x4>

08007ab8 <memmove>:
 8007ab8:	b510      	push	{r4, lr}
 8007aba:	4288      	cmp	r0, r1
 8007abc:	d902      	bls.n	8007ac4 <memmove+0xc>
 8007abe:	188b      	adds	r3, r1, r2
 8007ac0:	4298      	cmp	r0, r3
 8007ac2:	d303      	bcc.n	8007acc <memmove+0x14>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	e007      	b.n	8007ad8 <memmove+0x20>
 8007ac8:	5c8b      	ldrb	r3, [r1, r2]
 8007aca:	5483      	strb	r3, [r0, r2]
 8007acc:	3a01      	subs	r2, #1
 8007ace:	d2fb      	bcs.n	8007ac8 <memmove+0x10>
 8007ad0:	bd10      	pop	{r4, pc}
 8007ad2:	5ccc      	ldrb	r4, [r1, r3]
 8007ad4:	54c4      	strb	r4, [r0, r3]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d1fa      	bne.n	8007ad2 <memmove+0x1a>
 8007adc:	e7f8      	b.n	8007ad0 <memmove+0x18>

08007ade <_realloc_r>:
 8007ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae0:	0007      	movs	r7, r0
 8007ae2:	000d      	movs	r5, r1
 8007ae4:	0016      	movs	r6, r2
 8007ae6:	2900      	cmp	r1, #0
 8007ae8:	d105      	bne.n	8007af6 <_realloc_r+0x18>
 8007aea:	0011      	movs	r1, r2
 8007aec:	f7fe fe8e 	bl	800680c <_malloc_r>
 8007af0:	0004      	movs	r4, r0
 8007af2:	0020      	movs	r0, r4
 8007af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007af6:	2a00      	cmp	r2, #0
 8007af8:	d103      	bne.n	8007b02 <_realloc_r+0x24>
 8007afa:	f7fe fe3d 	bl	8006778 <_free_r>
 8007afe:	0034      	movs	r4, r6
 8007b00:	e7f7      	b.n	8007af2 <_realloc_r+0x14>
 8007b02:	f000 f907 	bl	8007d14 <_malloc_usable_size_r>
 8007b06:	002c      	movs	r4, r5
 8007b08:	42b0      	cmp	r0, r6
 8007b0a:	d2f2      	bcs.n	8007af2 <_realloc_r+0x14>
 8007b0c:	0031      	movs	r1, r6
 8007b0e:	0038      	movs	r0, r7
 8007b10:	f7fe fe7c 	bl	800680c <_malloc_r>
 8007b14:	1e04      	subs	r4, r0, #0
 8007b16:	d0ec      	beq.n	8007af2 <_realloc_r+0x14>
 8007b18:	0029      	movs	r1, r5
 8007b1a:	0032      	movs	r2, r6
 8007b1c:	f7ff ffc3 	bl	8007aa6 <memcpy>
 8007b20:	0029      	movs	r1, r5
 8007b22:	0038      	movs	r0, r7
 8007b24:	f7fe fe28 	bl	8006778 <_free_r>
 8007b28:	e7e3      	b.n	8007af2 <_realloc_r+0x14>

08007b2a <_raise_r>:
 8007b2a:	b570      	push	{r4, r5, r6, lr}
 8007b2c:	0004      	movs	r4, r0
 8007b2e:	000d      	movs	r5, r1
 8007b30:	291f      	cmp	r1, #31
 8007b32:	d904      	bls.n	8007b3e <_raise_r+0x14>
 8007b34:	2316      	movs	r3, #22
 8007b36:	6003      	str	r3, [r0, #0]
 8007b38:	2001      	movs	r0, #1
 8007b3a:	4240      	negs	r0, r0
 8007b3c:	bd70      	pop	{r4, r5, r6, pc}
 8007b3e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d004      	beq.n	8007b4e <_raise_r+0x24>
 8007b44:	008a      	lsls	r2, r1, #2
 8007b46:	189b      	adds	r3, r3, r2
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	2a00      	cmp	r2, #0
 8007b4c:	d108      	bne.n	8007b60 <_raise_r+0x36>
 8007b4e:	0020      	movs	r0, r4
 8007b50:	f000 f832 	bl	8007bb8 <_getpid_r>
 8007b54:	002a      	movs	r2, r5
 8007b56:	0001      	movs	r1, r0
 8007b58:	0020      	movs	r0, r4
 8007b5a:	f000 f81b 	bl	8007b94 <_kill_r>
 8007b5e:	e7ed      	b.n	8007b3c <_raise_r+0x12>
 8007b60:	2000      	movs	r0, #0
 8007b62:	2a01      	cmp	r2, #1
 8007b64:	d0ea      	beq.n	8007b3c <_raise_r+0x12>
 8007b66:	1c51      	adds	r1, r2, #1
 8007b68:	d103      	bne.n	8007b72 <_raise_r+0x48>
 8007b6a:	2316      	movs	r3, #22
 8007b6c:	3001      	adds	r0, #1
 8007b6e:	6023      	str	r3, [r4, #0]
 8007b70:	e7e4      	b.n	8007b3c <_raise_r+0x12>
 8007b72:	2400      	movs	r4, #0
 8007b74:	0028      	movs	r0, r5
 8007b76:	601c      	str	r4, [r3, #0]
 8007b78:	4790      	blx	r2
 8007b7a:	0020      	movs	r0, r4
 8007b7c:	e7de      	b.n	8007b3c <_raise_r+0x12>
	...

08007b80 <raise>:
 8007b80:	b510      	push	{r4, lr}
 8007b82:	4b03      	ldr	r3, [pc, #12]	; (8007b90 <raise+0x10>)
 8007b84:	0001      	movs	r1, r0
 8007b86:	6818      	ldr	r0, [r3, #0]
 8007b88:	f7ff ffcf 	bl	8007b2a <_raise_r>
 8007b8c:	bd10      	pop	{r4, pc}
 8007b8e:	46c0      	nop			; (mov r8, r8)
 8007b90:	2000000c 	.word	0x2000000c

08007b94 <_kill_r>:
 8007b94:	2300      	movs	r3, #0
 8007b96:	b570      	push	{r4, r5, r6, lr}
 8007b98:	4d06      	ldr	r5, [pc, #24]	; (8007bb4 <_kill_r+0x20>)
 8007b9a:	0004      	movs	r4, r0
 8007b9c:	0008      	movs	r0, r1
 8007b9e:	0011      	movs	r1, r2
 8007ba0:	602b      	str	r3, [r5, #0]
 8007ba2:	f7fa fe77 	bl	8002894 <_kill>
 8007ba6:	1c43      	adds	r3, r0, #1
 8007ba8:	d103      	bne.n	8007bb2 <_kill_r+0x1e>
 8007baa:	682b      	ldr	r3, [r5, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d000      	beq.n	8007bb2 <_kill_r+0x1e>
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	200002b4 	.word	0x200002b4

08007bb8 <_getpid_r>:
 8007bb8:	b510      	push	{r4, lr}
 8007bba:	f7fa fe65 	bl	8002888 <_getpid>
 8007bbe:	bd10      	pop	{r4, pc}

08007bc0 <__sread>:
 8007bc0:	b570      	push	{r4, r5, r6, lr}
 8007bc2:	000c      	movs	r4, r1
 8007bc4:	250e      	movs	r5, #14
 8007bc6:	5f49      	ldrsh	r1, [r1, r5]
 8007bc8:	f000 f8ac 	bl	8007d24 <_read_r>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	db03      	blt.n	8007bd8 <__sread+0x18>
 8007bd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007bd2:	181b      	adds	r3, r3, r0
 8007bd4:	6563      	str	r3, [r4, #84]	; 0x54
 8007bd6:	bd70      	pop	{r4, r5, r6, pc}
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	4a02      	ldr	r2, [pc, #8]	; (8007be4 <__sread+0x24>)
 8007bdc:	4013      	ands	r3, r2
 8007bde:	81a3      	strh	r3, [r4, #12]
 8007be0:	e7f9      	b.n	8007bd6 <__sread+0x16>
 8007be2:	46c0      	nop			; (mov r8, r8)
 8007be4:	ffffefff 	.word	0xffffefff

08007be8 <__swrite>:
 8007be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bea:	001f      	movs	r7, r3
 8007bec:	898b      	ldrh	r3, [r1, #12]
 8007bee:	0005      	movs	r5, r0
 8007bf0:	000c      	movs	r4, r1
 8007bf2:	0016      	movs	r6, r2
 8007bf4:	05db      	lsls	r3, r3, #23
 8007bf6:	d505      	bpl.n	8007c04 <__swrite+0x1c>
 8007bf8:	230e      	movs	r3, #14
 8007bfa:	5ec9      	ldrsh	r1, [r1, r3]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	2302      	movs	r3, #2
 8007c00:	f000 f874 	bl	8007cec <_lseek_r>
 8007c04:	89a3      	ldrh	r3, [r4, #12]
 8007c06:	4a05      	ldr	r2, [pc, #20]	; (8007c1c <__swrite+0x34>)
 8007c08:	0028      	movs	r0, r5
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	81a3      	strh	r3, [r4, #12]
 8007c0e:	0032      	movs	r2, r6
 8007c10:	230e      	movs	r3, #14
 8007c12:	5ee1      	ldrsh	r1, [r4, r3]
 8007c14:	003b      	movs	r3, r7
 8007c16:	f000 f81f 	bl	8007c58 <_write_r>
 8007c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c1c:	ffffefff 	.word	0xffffefff

08007c20 <__sseek>:
 8007c20:	b570      	push	{r4, r5, r6, lr}
 8007c22:	000c      	movs	r4, r1
 8007c24:	250e      	movs	r5, #14
 8007c26:	5f49      	ldrsh	r1, [r1, r5]
 8007c28:	f000 f860 	bl	8007cec <_lseek_r>
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	1c42      	adds	r2, r0, #1
 8007c30:	d103      	bne.n	8007c3a <__sseek+0x1a>
 8007c32:	4a05      	ldr	r2, [pc, #20]	; (8007c48 <__sseek+0x28>)
 8007c34:	4013      	ands	r3, r2
 8007c36:	81a3      	strh	r3, [r4, #12]
 8007c38:	bd70      	pop	{r4, r5, r6, pc}
 8007c3a:	2280      	movs	r2, #128	; 0x80
 8007c3c:	0152      	lsls	r2, r2, #5
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	81a3      	strh	r3, [r4, #12]
 8007c42:	6560      	str	r0, [r4, #84]	; 0x54
 8007c44:	e7f8      	b.n	8007c38 <__sseek+0x18>
 8007c46:	46c0      	nop			; (mov r8, r8)
 8007c48:	ffffefff 	.word	0xffffefff

08007c4c <__sclose>:
 8007c4c:	b510      	push	{r4, lr}
 8007c4e:	230e      	movs	r3, #14
 8007c50:	5ec9      	ldrsh	r1, [r1, r3]
 8007c52:	f000 f815 	bl	8007c80 <_close_r>
 8007c56:	bd10      	pop	{r4, pc}

08007c58 <_write_r>:
 8007c58:	b570      	push	{r4, r5, r6, lr}
 8007c5a:	0004      	movs	r4, r0
 8007c5c:	0008      	movs	r0, r1
 8007c5e:	0011      	movs	r1, r2
 8007c60:	001a      	movs	r2, r3
 8007c62:	2300      	movs	r3, #0
 8007c64:	4d05      	ldr	r5, [pc, #20]	; (8007c7c <_write_r+0x24>)
 8007c66:	602b      	str	r3, [r5, #0]
 8007c68:	f7f9 fed4 	bl	8001a14 <_write>
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	d103      	bne.n	8007c78 <_write_r+0x20>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d000      	beq.n	8007c78 <_write_r+0x20>
 8007c76:	6023      	str	r3, [r4, #0]
 8007c78:	bd70      	pop	{r4, r5, r6, pc}
 8007c7a:	46c0      	nop			; (mov r8, r8)
 8007c7c:	200002b4 	.word	0x200002b4

08007c80 <_close_r>:
 8007c80:	2300      	movs	r3, #0
 8007c82:	b570      	push	{r4, r5, r6, lr}
 8007c84:	4d06      	ldr	r5, [pc, #24]	; (8007ca0 <_close_r+0x20>)
 8007c86:	0004      	movs	r4, r0
 8007c88:	0008      	movs	r0, r1
 8007c8a:	602b      	str	r3, [r5, #0]
 8007c8c:	f7fa fe3b 	bl	8002906 <_close>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d103      	bne.n	8007c9c <_close_r+0x1c>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d000      	beq.n	8007c9c <_close_r+0x1c>
 8007c9a:	6023      	str	r3, [r4, #0]
 8007c9c:	bd70      	pop	{r4, r5, r6, pc}
 8007c9e:	46c0      	nop			; (mov r8, r8)
 8007ca0:	200002b4 	.word	0x200002b4

08007ca4 <_fstat_r>:
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	b570      	push	{r4, r5, r6, lr}
 8007ca8:	4d06      	ldr	r5, [pc, #24]	; (8007cc4 <_fstat_r+0x20>)
 8007caa:	0004      	movs	r4, r0
 8007cac:	0008      	movs	r0, r1
 8007cae:	0011      	movs	r1, r2
 8007cb0:	602b      	str	r3, [r5, #0]
 8007cb2:	f7fa fe32 	bl	800291a <_fstat>
 8007cb6:	1c43      	adds	r3, r0, #1
 8007cb8:	d103      	bne.n	8007cc2 <_fstat_r+0x1e>
 8007cba:	682b      	ldr	r3, [r5, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d000      	beq.n	8007cc2 <_fstat_r+0x1e>
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	bd70      	pop	{r4, r5, r6, pc}
 8007cc4:	200002b4 	.word	0x200002b4

08007cc8 <_isatty_r>:
 8007cc8:	2300      	movs	r3, #0
 8007cca:	b570      	push	{r4, r5, r6, lr}
 8007ccc:	4d06      	ldr	r5, [pc, #24]	; (8007ce8 <_isatty_r+0x20>)
 8007cce:	0004      	movs	r4, r0
 8007cd0:	0008      	movs	r0, r1
 8007cd2:	602b      	str	r3, [r5, #0]
 8007cd4:	f7fa fe2f 	bl	8002936 <_isatty>
 8007cd8:	1c43      	adds	r3, r0, #1
 8007cda:	d103      	bne.n	8007ce4 <_isatty_r+0x1c>
 8007cdc:	682b      	ldr	r3, [r5, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d000      	beq.n	8007ce4 <_isatty_r+0x1c>
 8007ce2:	6023      	str	r3, [r4, #0]
 8007ce4:	bd70      	pop	{r4, r5, r6, pc}
 8007ce6:	46c0      	nop			; (mov r8, r8)
 8007ce8:	200002b4 	.word	0x200002b4

08007cec <_lseek_r>:
 8007cec:	b570      	push	{r4, r5, r6, lr}
 8007cee:	0004      	movs	r4, r0
 8007cf0:	0008      	movs	r0, r1
 8007cf2:	0011      	movs	r1, r2
 8007cf4:	001a      	movs	r2, r3
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	4d05      	ldr	r5, [pc, #20]	; (8007d10 <_lseek_r+0x24>)
 8007cfa:	602b      	str	r3, [r5, #0]
 8007cfc:	f7fa fe24 	bl	8002948 <_lseek>
 8007d00:	1c43      	adds	r3, r0, #1
 8007d02:	d103      	bne.n	8007d0c <_lseek_r+0x20>
 8007d04:	682b      	ldr	r3, [r5, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d000      	beq.n	8007d0c <_lseek_r+0x20>
 8007d0a:	6023      	str	r3, [r4, #0]
 8007d0c:	bd70      	pop	{r4, r5, r6, pc}
 8007d0e:	46c0      	nop			; (mov r8, r8)
 8007d10:	200002b4 	.word	0x200002b4

08007d14 <_malloc_usable_size_r>:
 8007d14:	1f0b      	subs	r3, r1, #4
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	1f18      	subs	r0, r3, #4
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	da01      	bge.n	8007d22 <_malloc_usable_size_r+0xe>
 8007d1e:	580b      	ldr	r3, [r1, r0]
 8007d20:	18c0      	adds	r0, r0, r3
 8007d22:	4770      	bx	lr

08007d24 <_read_r>:
 8007d24:	b570      	push	{r4, r5, r6, lr}
 8007d26:	0004      	movs	r4, r0
 8007d28:	0008      	movs	r0, r1
 8007d2a:	0011      	movs	r1, r2
 8007d2c:	001a      	movs	r2, r3
 8007d2e:	2300      	movs	r3, #0
 8007d30:	4d05      	ldr	r5, [pc, #20]	; (8007d48 <_read_r+0x24>)
 8007d32:	602b      	str	r3, [r5, #0]
 8007d34:	f7fa fdca 	bl	80028cc <_read>
 8007d38:	1c43      	adds	r3, r0, #1
 8007d3a:	d103      	bne.n	8007d44 <_read_r+0x20>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d000      	beq.n	8007d44 <_read_r+0x20>
 8007d42:	6023      	str	r3, [r4, #0]
 8007d44:	bd70      	pop	{r4, r5, r6, pc}
 8007d46:	46c0      	nop			; (mov r8, r8)
 8007d48:	200002b4 	.word	0x200002b4

08007d4c <_init>:
 8007d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4e:	46c0      	nop			; (mov r8, r8)
 8007d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d52:	bc08      	pop	{r3}
 8007d54:	469e      	mov	lr, r3
 8007d56:	4770      	bx	lr

08007d58 <_fini>:
 8007d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5a:	46c0      	nop			; (mov r8, r8)
 8007d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5e:	bc08      	pop	{r3}
 8007d60:	469e      	mov	lr, r3
 8007d62:	4770      	bx	lr
